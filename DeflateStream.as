package 
{
    import flash.utils.ByteArray;
    import flash.system.ApplicationDomain;
    import flash.utils.Endian;
    import _DeflateStream.LZHash;
    import _DeflateStream.HuffmanTree;
    import avm2.intrinsics.memory.*; // ASC2.0, AIR3.6 SDK and above, FlasCC (Alchemy)

    public class DeflateStream 
    {

        public static var MAX_SYMBOLS_IN_TREE:int = 286;
        public static var LENGTH_CODES:int = 29;
        public static var MIN_LENGTH:int = 3;
        public static var MAX_LENGTH:int = 258;
        public static var LENGTHS:int = 0x0100;
        public static var SCRATCH_MEMORY_SIZE:int = 5576;
        public static var DISTANCE_OFFSET:int = 1144;
        public static var CODE_LENGTH_OFFSET:int = 1272;
        public static var HUFFMAN_SCRATCH_OFFSET:int = 1348;
        public static var LENGTH_EXTRA_BITS_OFFSET:int = 2492;
        public static var DIST_EXTRA_BITS_OFFSET:int = 3528;
        public static var OUTPUT_BYTES_BEFORE_NEW_BLOCK:int = 0xC000;
        public static var MAX_UNCOMPRESSED_BYTES_PER_BLOCK:uint = 0xFFFF;
        public static var ADLER_MAX:int = 65521;
        public static var MAX_CODE_LENGTH:int = 15;
        public static var MAX_CODE_LENGTH_CODE_LENGTH:int = 7;
        public static var EOB:int = 0x0100;
        public static var HASH_SIZE_BITS:int = 16;
        public static var HASH_SIZE:int = 0x10000;
        public static var HASH_MASK:int = 0xFFFF;
        public static var WINDOW_SIZE:int = 0x8000;
        public static var NMAX:int = 5552;

        public var zlib:Boolean;
        public var startAddr:uint;
        public var scratchAddr:int;
        public var s2:uint;
        public var s1:uint;
        public var rangeResult:MemoryRange;
        public var literalLengthCodes:int;
        public var level:CompressionLevel;
        public var distanceCodes:int;
        public var currentAddr:int;
        public var blockStartAddr:int;
        public var blockInProgress:Boolean;
        public var bitOffset:int;

        public function DeflateStream(_arg_1:CompressionLevel, _arg_2:Boolean, _arg_3:int, _arg_4:int):void
        {
            _new(_arg_1, _arg_2, _arg_3, _arg_4);
        }

        public static function create(_arg_1:CompressionLevel, _arg_2:Boolean=false):DeflateStream
        {
            var _local_3:ByteArray = new ByteArray();
            _local_3.length = ApplicationDomain.MIN_DOMAIN_MEMORY_LENGTH;
            ApplicationDomain.currentDomain.domainMemory = _local_3;
            return (DeflateStream.createEx(_arg_1, 0, 5576, _arg_2));
        }

        public static function createEx(_arg_1:CompressionLevel, _arg_2:int, _arg_3:int, _arg_4:Boolean=false):DeflateStream
        {
            return (new DeflateStream(_arg_1, _arg_4, _arg_2, _arg_3));
        }

        public static function memcpy(_arg_1:ByteArray, _arg_2:int, _arg_3:int=0):void
        {
            _arg_1.readBytes(ApplicationDomain.currentDomain.domainMemory, _arg_2, _arg_3);
        }


        public function writeTemporaryBufferSymbol(_arg_1:int):int
        {
            var _local_2:int;
            var _local_3:int;
            var _local_4:int;
            var _local_5:int;
            var _local_7:int;
            var _local_8:int;
            var _local_9:int;
            var _local_6:int = li16(_arg_1);
            if ((_local_6 & 0x0200) != 0)
            {
                _local_2 = (_local_6 ^ 0x0200);
                _local_4 = li32((scratchAddr + 2492) + (_local_2 << 2));
                _local_7 = 0;
                _local_8 = li32((scratchAddr + _local_7) + ((_local_4 >>> 16) * 4));
                _local_9 = li8(currentAddr);
                _local_9 = (_local_9 | ((_local_8 >>> 16) << bitOffset));
                si32(_local_9, currentAddr);
                bitOffset = (bitOffset + (_local_8 & 0xFFFF));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
                _local_7 = li8(currentAddr);
                _local_7 = (_local_7 | ((_local_2 - (_local_4 & 0x1FFF)) << bitOffset));
                si32(_local_7, currentAddr);
                bitOffset = (bitOffset + ((_local_4 & 0xFF00) >>> 13));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
                _local_3 = li16(_arg_1 + 2);
                _local_5 = li32((scratchAddr + 3528) + (((_local_3 <= 0x0100) ? _local_3 : (0x0100 + ((_local_3 - 1) >>> 7))) << 2));
                _local_7 = li32((scratchAddr + 1144) + ((_local_5 >>> 24) * 4));
                _local_8 = li8(currentAddr);
                _local_8 = (_local_8 | ((_local_7 >>> 16) << bitOffset));
                si32(_local_8, currentAddr);
                bitOffset = (bitOffset + (_local_7 & 0xFFFF));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
                _local_7 = li8(currentAddr);
                _local_7 = (_local_7 | ((_local_3 - (_local_5 & 0xFFFF)) << bitOffset));
                si32(_local_7, currentAddr);
                bitOffset = (bitOffset + ((_local_5 & 0xFF0000) >>> 16));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            }
            else
            {
                _local_7 = 0;
                _local_8 = li32((scratchAddr + _local_7) + (_local_6 * 4));
                _local_9 = li8(currentAddr);
                _local_9 = (_local_9 | ((_local_8 >>> 16) << bitOffset));
                si32(_local_9, currentAddr);
                bitOffset = (bitOffset + (_local_8 & 0xFFFF));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            return (_local_6);
        }

        public function writeSymbol(_arg_1:int, _arg_2:int=0):void
        {
            var _local_3:int = li32((scratchAddr + _arg_2) + (_arg_1 * 4));
            var _local_4:int = li8(currentAddr);
            _local_4 = (_local_4 | ((_local_3 >>> 16) << bitOffset));
            si32(_local_4, currentAddr);
            bitOffset = (bitOffset + (_local_3 & 0xFFFF));
            currentAddr = (currentAddr + (bitOffset >>> 3));
            bitOffset = (bitOffset & 0x07);
        }

        public function writeShort(_arg_1:int):void
        {
            si16(_arg_1, currentAddr);
            currentAddr = (currentAddr + 2);
        }

        public function writeEmptyBlock(_arg_1:Boolean):void
        {
            var _local_2:int;
            var _local_3:int;
            var _local_4:int;
            if (blockInProgress)
            {
                if (level != CompressionLevel.UNCOMPRESSED)
                {
                    _local_2 = 0;
                    _local_3 = li32((scratchAddr + _local_2) + 0x0400);
                    _local_4 = li8(currentAddr);
                    _local_4 = (_local_4 | ((_local_3 >>> 16) << bitOffset));
                    si32(_local_4, currentAddr);
                    bitOffset = (bitOffset + (_local_3 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
                blockInProgress = false;
            };
            var _local_5:CompressionLevel = level;
            level = CompressionLevel.UNCOMPRESSED;
            blockInProgress = true;
            if (level == CompressionLevel.UNCOMPRESSED)
            {
                if (bitOffset == 0)
                {
                    si8(0, currentAddr);
                };
                _local_2 = li8(currentAddr);
                _local_2 = (_local_2 | (((_arg_1) ? 1 : 0) << bitOffset));
                si32(_local_2, currentAddr);
                bitOffset = (bitOffset + 3);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
                if (bitOffset > 0)
                {
                    _local_2 = li8(currentAddr);
                    _local_2 = (_local_2 | (0 << bitOffset));
                    si32(_local_2, currentAddr);
                    bitOffset = (bitOffset + (8 - bitOffset));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
            }
            else
            {
                _local_2 = li8(currentAddr);
                _local_2 = (_local_2 | ((0x04 | ((_arg_1) ? 1 : 0)) << bitOffset));
                si32(_local_2, currentAddr);
                bitOffset = (bitOffset + 3);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            blockStartAddr = currentAddr;
            si16(0, currentAddr);
            currentAddr = (currentAddr + 2);
            si16(-1, currentAddr);
            currentAddr = (currentAddr + 2);
            if (level != CompressionLevel.UNCOMPRESSED)
            {
                _local_2 = 0;
                _local_3 = li32((scratchAddr + _local_2) + 0x0400);
                _local_4 = li8(currentAddr);
                _local_4 = (_local_4 | ((_local_3 >>> 16) << bitOffset));
                si32(_local_4, currentAddr);
                bitOffset = (bitOffset + (_local_3 & 0xFFFF));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            blockInProgress = false;
            level = _local_5;
        }

        public function writeByte(_arg_1:int):void
        {
            si8(_arg_1, currentAddr);
            currentAddr = (currentAddr + 1);
        }

        public function writeBits(_arg_1:int, _arg_2:int):void
        {
            var _local_3:int = li8(currentAddr);
            _local_3 = (_local_3 | (_arg_1 << bitOffset));
            si32(_local_3, currentAddr);
            bitOffset = (bitOffset + _arg_2);
            currentAddr = (currentAddr + (bitOffset >>> 3));
            bitOffset = (bitOffset & 0x07);
        }

        public function write(_arg_1:ByteArray):void
        {
            var _local_4:int;
            var _local_5:int;
            var _local_3:int = _arg_1.bytesAvailable;
            var _local_6:int = 1;
            var _local_7:int;
            if (level == CompressionLevel.UNCOMPRESSED)
            {
                _local_5 = 8;
                _local_4 = int(Math.ceil((_local_3 / 0xFFFF)));
            }
            else
            {
                if (level == CompressionLevel.FAST)
                {
                    _local_4 = int(Math.ceil(((_local_3 * 2) / 0xC000)));
                }
                else
                {
                    _local_4 = int(Math.ceil((_local_3 / 98304)));
                    if (level == CompressionLevel.NORMAL)
                    {
                        _local_7 = 0x70000;
                    }
                    else
                    {
                        if (level == CompressionLevel.GOOD)
                        {
                            _local_7 = 524308;
                        };
                    };
                };
                _local_6 = 2;
                _local_5 = 300;
            };
            var _local_2:* = (currentAddr + (((_local_3 * _local_6) + (_local_5 * (_local_4 + 1))) + _local_7));
            var _local_8:uint = (_local_2 + _arg_1.bytesAvailable);
            var _local_9:ByteArray = ApplicationDomain.currentDomain.domainMemory;
            var _local_10:uint = _local_8;
            if (_local_9.length < _local_10)
            {
                _local_9.length = _local_8;
                ApplicationDomain.currentDomain.domainMemory = _local_9;
            };
            _local_3 = 0;
            _arg_1.readBytes(ApplicationDomain.currentDomain.domainMemory, _local_2, _local_3);
            return (fastWrite(_local_2, _local_8));
        }

        public function updateAdler32(_arg_1:int, _arg_2:int):void
        {
            var _local_3:int;
            var _local_4:int;
            while ((_arg_1 + 5552) <= _arg_2)
            {
                _local_3 = _arg_1;
                while (_local_3 < (_arg_1 + 5552))
                {
                    s2 = (s2 + (((((((((((((((((s1 << 4) + (li8(_local_3) * 16)) + (li8(_local_3 + 1) * 15)) + (li8(_local_3 + 2) * 14)) + (li8(_local_3 + 3) * 13)) + (li8(_local_3 + 4) * 12)) + (li8(_local_3 + 5) * 11)) + (li8(_local_3 + 6) * 10)) + (li8(_local_3 + 7) * 9)) + (li8(_local_3 + 8) * 8)) + (li8(_local_3 + 9) * 7)) + (li8(_local_3 + 10) * 6)) + (li8(_local_3 + 11) * 5)) + (li8(_local_3 + 12) * 4)) + (li8(_local_3 + 13) * 3)) + (li8(_local_3 + 14) * 2)) + li8(_local_3 + 15)));
                    s1 = (s1 + (((((((((((((((li8(_local_3) + li8(_local_3 + 1)) + li8(_local_3 + 2)) + li8(_local_3 + 3)) + li8(_local_3 + 4)) + li8(_local_3 + 5)) + li8(_local_3 + 6)) + li8(_local_3 + 7)) + li8(_local_3 + 8)) + li8(_local_3 + 9)) + li8(_local_3 + 10)) + li8(_local_3 + 11)) + li8(_local_3 + 12)) + li8(_local_3 + 13)) + li8(_local_3 + 14)) + li8(_local_3 + 15)));
                    _local_3 = (_local_3 + 16);
                };
                s1 = (s1 % 65521);
                s2 = (s2 % 65521);
                _arg_1 = (_arg_1 + 5552);
            };
            if (_arg_1 != _arg_2)
            {
                _local_3 = _arg_1;
                while (_local_3 < _arg_2)
                {
                    _local_4 = _local_3++;
                    s1 = (s1 + li8(_local_4));
                    s2 = (s2 + s1);
                };
                s1 = (s1 % 65521);
                s2 = (s2 % 65521);
            };
        }

        public function setupStaticScratchMem():void
        {
            var _local_1:int;
            var _local_2:int;
            var _local_3:int;
            var _local_4:int;
            var _local_5:int;
            var _local_6:int;
            var _local_7:int;
            var _local_8:int;
            var _local_9:int;
            var _local_10:int;
            if (((level == (CompressionLevel.NORMAL)) || (level == CompressionLevel.GOOD)))
            {
                _local_1 = (scratchAddr + 2492);
                si32(16842755, (_local_1 + 12));
                si32(16908292, (_local_1 + 16));
                si32(16973829, (_local_1 + 20));
                si32(17039366, (_local_1 + 24));
                si32(17104903, (_local_1 + 28));
                si32(17170440, (_local_1 + 32));
                si32(17235977, (_local_1 + 36));
                si32(17301514, (_local_1 + 40));
                _local_2 = 11;
                _local_3 = 265;
                _local_4 = 1;
                while (_local_4 < 6)
                {
                    _local_5 = _local_4++;
                    _local_6 = 0;
                    while (_local_6 < 4)
                    {
                        _local_7 = _local_6++;
                        _local_8 = _local_2;
                        _local_9 = (_local_2 + (1 << _local_5));
                        while (_local_8 < _local_9)
                        {
                            _local_10 = _local_8++;
                            si32((((_local_3 << 16) | (_local_5 << 13)) | _local_2), (_local_1 + (_local_10 * 4)));
                        };
                        _local_2 = (_local_2 + (1 << _local_5));
                        _local_3++;
                    };
                };
                si32(18678018, (_local_1 + 1032));
                _local_1 = (scratchAddr + 3528);
                si32(1, (_local_1 + 4));
                si32(16777218, (_local_1 + 8));
                si32(33554435, (_local_1 + 12));
                si32(50331652, (_local_1 + 16));
                _local_2 = 5;
                _local_3 = 4;
                _local_4 = 1;
                while (_local_4 < 7)
                {
                    _local_5 = _local_4++;
                    _local_6 = 0;
                    while (_local_6 < 2)
                    {
                        _local_7 = _local_6++;
                        _local_8 = _local_2;
                        _local_9 = (_local_2 + (1 << _local_5));
                        while (_local_8 < _local_9)
                        {
                            _local_10 = _local_8++;
                            si32((((_local_3 << 24) | (_local_5 << 16)) | _local_2), (_local_1 + (_local_10 * 4)));
                        };
                        _local_2 = (_local_2 + (1 << _local_5));
                        _local_3++;
                    };
                };
                _local_1 = (_local_1 + 0x0400);
                _local_4 = 7;
                while (_local_4 < 14)
                {
                    _local_5 = _local_4++;
                    _local_6 = 0;
                    while (_local_6 < 2)
                    {
                        _local_7 = _local_6++;
                        _local_8 = (_local_2 >>> 7);
                        _local_9 = ((_local_2 >>> 7) + (1 << (_local_5 - 7)));
                        while (_local_8 < _local_9)
                        {
                            _local_10 = _local_8++;
                            si32((((_local_3 << 24) | (_local_5 << 16)) | _local_2), (_local_1 + (_local_10 * 4)));
                        };
                        _local_2 = (_local_2 + (1 << _local_5));
                        _local_3++;
                    };
                };
            };
        }

        public function release():void
        {
            var _local_1:int;
            if (bitOffset > 0)
            {
                _local_1 = li8(currentAddr);
                si8(_local_1, startAddr);
            }
            else
            {
                si8(0, startAddr);
            };
            blockStartAddr = (startAddr - (currentAddr - blockStartAddr));
            currentAddr = startAddr;
        }

        public function peek():MemoryRange
        {
            rangeResult.offset = startAddr;
            rangeResult.end = currentAddr;
            return (rangeResult);
        }

        public function maxOutputBufferSize(_arg_1:int):int
        {
            var _local_2:int;
            var _local_3:int;
            var _local_4:int = 1;
            var _local_5:int;
            if (level == CompressionLevel.UNCOMPRESSED)
            {
                _local_3 = 8;
                _local_2 = int(Math.ceil((_arg_1 / 0xFFFF)));
            }
            else
            {
                if (level == CompressionLevel.FAST)
                {
                    _local_2 = int(Math.ceil(((_arg_1 * 2) / 0xC000)));
                }
                else
                {
                    _local_2 = int(Math.ceil((_arg_1 / 98304)));
                    if (level == CompressionLevel.NORMAL)
                    {
                        _local_5 = 0x70000;
                    }
                    else
                    {
                        if (level == CompressionLevel.GOOD)
                        {
                            _local_5 = 524308;
                        };
                    };
                };
                _local_4 = 2;
                _local_3 = 300;
            };
            return (((_arg_1 * _local_4) + (_local_3 * (_local_2 + 1))) + _local_5);
        }

        public function incSymbolFrequency(_arg_1:int, _arg_2:int=0):void
        {
            var _local_3:* = ((scratchAddr + _arg_2) + (_arg_1 << 2));
            var _local_4:* = (li32(_local_3) + 1);
            si32(_local_4, _local_3);
        }

        public function getDistanceInfo(_arg_1:int):int
        {
            return (li32((scratchAddr + 3528) + (((_arg_1 <= 0x0100) ? _arg_1 : (0x0100 + ((_arg_1 - 1) >>> 7))) << 2)));
        }

        public function finalize():ByteArray
        {
            var _local_1:MemoryRange = fastFinalize();
            var _local_2:ByteArray = new ByteArray();
            if (zlib)
            {
                _local_2.endian = Endian.BIG_ENDIAN;
            }
            else
            {
                _local_2.endian = Endian.LITTLE_ENDIAN;
            };
            var _local_3:ByteArray = ApplicationDomain.currentDomain.domainMemory;
            _local_3.position = _local_1.offset;
            _local_3.readBytes(_local_2, 0, (_local_1.end - _local_1.offset));
            _local_2.position = 0;
            return (_local_2);
        }

        public function fastWrite(_arg_1:int, _arg_2:int):void
        {
            var _local_3:int;
            var _local_4:int;
            var _local_5:int;
            var _local_6:int;
            var _local_7:uint;
            var _local_8:* = (null as ByteArray);
            var _local_9:uint;
            var _local_10:int;
            var _local_11:Number;
            var _local_12:Boolean;
            var _local_13:int;
            var _local_14:int;
            var _local_15:int;
            var _local_16:int;
            var _local_17:int;
            var _local_18:int;
            var _local_20:int;
            var _local_21:int;
            var _local_22:int;
            var _local_23:int;
            var _local_24:int;
            var _local_25:int;
            var _local_26:int;
            var _local_27:int;
            var _local_28:int;
            var _local_29:int;
            var _local_30:int;
            var _local_31:int;
            var _local_35:* = (null as LZHash);
            var _local_36:int;
            var _local_37:int;
            var _local_38:int;
            var _local_39:int;
            var _local_40:int;
            var _local_41:int;
            var _local_42:int;
            var _local_43:int;
            if (level == CompressionLevel.UNCOMPRESSED)
            {
                _local_3 = _arg_1;
                if (zlib)
                {
                    _local_4 = _local_3;
                    while ((_local_4 + 5552) <= _arg_2)
                    {
                        _local_5 = _local_4;
                        while (_local_5 < (_local_4 + 5552))
                        {
                            s2 = (s2 + (((((((((((((((((s1 << 4) + (li8(_local_5) * 16)) + (li8(_local_5 + 1) * 15)) + (li8(_local_5 + 2) * 14)) + (li8(_local_5 + 3) * 13)) + (li8(_local_5 + 4) * 12)) + (li8(_local_5 + 5) * 11)) + (li8(_local_5 + 6) * 10)) + (li8(_local_5 + 7) * 9)) + (li8(_local_5 + 8) * 8)) + (li8(_local_5 + 9) * 7)) + (li8(_local_5 + 10) * 6)) + (li8(_local_5 + 11) * 5)) + (li8(_local_5 + 12) * 4)) + (li8(_local_5 + 13) * 3)) + (li8(_local_5 + 14) * 2)) + li8(_local_5 + 15)));
                            s1 = (s1 + (((((((((((((((li8(_local_5) + li8(_local_5 + 1)) + li8(_local_5 + 2)) + li8(_local_5 + 3)) + li8(_local_5 + 4)) + li8(_local_5 + 5)) + li8(_local_5 + 6)) + li8(_local_5 + 7)) + li8(_local_5 + 8)) + li8(_local_5 + 9)) + li8(_local_5 + 10)) + li8(_local_5 + 11)) + li8(_local_5 + 12)) + li8(_local_5 + 13)) + li8(_local_5 + 14)) + li8(_local_5 + 15)));
                            _local_5 = (_local_5 + 16);
                        };
                        s1 = (s1 % 65521);
                        s2 = (s2 % 65521);
                        _local_4 = (_local_4 + 5552);
                    };
                    if (_local_4 != _arg_2)
                    {
                        _local_5 = _local_4;
                        while (_local_5 < _arg_2)
                        {
                            _local_6 = _local_5++;
                            s1 = (s1 + li8(_local_6));
                            s2 = (s2 + s1);
                        };
                        s1 = (s1 % 65521);
                        s2 = (s2 % 65521);
                    };
                };
                _local_4 = 8;
                _local_5 = (_arg_2 - _local_3);
                _local_6 = int(Math.ceil((_local_5 / 0xFFFF)));
                _local_7 = (_local_5 + (_local_4 * _local_6));
                _local_8 = ApplicationDomain.currentDomain.domainMemory;
                _local_9 = (_local_8.length - currentAddr);
                if (_local_9 < _local_7)
                {
                    _local_8.length = (currentAddr + _local_7);
                    ApplicationDomain.currentDomain.domainMemory = _local_8;
                };
                while ((_arg_2 - _local_3) > 0)
                {
                    _local_11 = Math.min((_arg_2 - _local_3), 0xFFFF);
                    _local_10 = _local_11;
                    _local_12 = false;
                    blockInProgress = true;
                    if (level == CompressionLevel.UNCOMPRESSED)
                    {
                        if (bitOffset == 0)
                        {
                            si8(0, currentAddr);
                        };
                        _local_13 = li8(currentAddr);
                        _local_13 = (_local_13 | (((_local_12) ? 1 : 0) << bitOffset));
                        si32(_local_13, currentAddr);
                        bitOffset = (bitOffset + 3);
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        if (bitOffset > 0)
                        {
                            _local_13 = li8(currentAddr);
                            _local_13 = (_local_13 | (0 << bitOffset));
                            si32(_local_13, currentAddr);
                            bitOffset = (bitOffset + (8 - bitOffset));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                        };
                    }
                    else
                    {
                        _local_13 = li8(currentAddr);
                        _local_13 = (_local_13 | ((0x04 | ((_local_12) ? 1 : 0)) << bitOffset));
                        si32(_local_13, currentAddr);
                        bitOffset = (bitOffset + 3);
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    blockStartAddr = currentAddr;
                    si16(_local_10, currentAddr);
                    currentAddr = (currentAddr + 2);
                    si16((~(_local_10)), currentAddr);
                    currentAddr = (currentAddr + 2);
                    _local_13 = (_local_3 + _local_10);
                    _local_14 = (_local_3 + (_local_10 & 0xFFFFFFE0));
                    _local_15 = _local_3;
                    while (_local_15 < _local_14)
                    {
                        _local_16 = li32(_local_15);
                        si32(_local_16, currentAddr);
                        _local_16 = li32(_local_15 + 4);
                        si32(_local_16, (currentAddr + 4));
                        _local_16 = li32(_local_15 + 8);
                        si32(_local_16, (currentAddr + 8));
                        _local_16 = li32(_local_15 + 12);
                        si32(_local_16, (currentAddr + 12));
                        _local_16 = li32(_local_15 + 16);
                        si32(_local_16, (currentAddr + 16));
                        _local_16 = li32(_local_15 + 20);
                        si32(_local_16, (currentAddr + 20));
                        _local_16 = li32(_local_15 + 24);
                        si32(_local_16, (currentAddr + 24));
                        _local_16 = li32(_local_15 + 28);
                        si32(_local_16, (currentAddr + 28));
                        currentAddr = (currentAddr + 32);
                        _local_15 = (_local_15 + 32);
                    };
                    while (_local_15 < _local_13)
                    {
                        _local_16 = li8(_local_15);
                        si8(_local_16, currentAddr);
                        currentAddr = (currentAddr + 1);
                        _local_15++;
                    };
                    if (level != CompressionLevel.UNCOMPRESSED)
                    {
                        _local_16 = 0;
                        _local_17 = li32((scratchAddr + _local_16) + 0x0400);
                        _local_18 = li8(currentAddr);
                        _local_18 = (_local_18 | ((_local_17 >>> 16) << bitOffset));
                        si32(_local_18, currentAddr);
                        bitOffset = (bitOffset + (_local_17 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    blockInProgress = false;
                    _local_3 = (_local_3 + _local_10);
                };
            }
            else
            {
                _local_3 = (_arg_2 - _arg_1);
                _local_8 = ApplicationDomain.currentDomain.domainMemory;
                _local_6 = 1;
                _local_10 = 0;
                if (level == CompressionLevel.UNCOMPRESSED)
                {
                    _local_5 = 8;
                    _local_4 = int(Math.ceil((_local_3 / 0xFFFF)));
                }
                else
                {
                    if (level == CompressionLevel.FAST)
                    {
                        _local_4 = int(Math.ceil(((_local_3 * 2) / 0xC000)));
                    }
                    else
                    {
                        _local_4 = int(Math.ceil((_local_3 / 98304)));
                        if (level == CompressionLevel.NORMAL)
                        {
                            _local_10 = 0x70000;
                        }
                        else
                        {
                            if (level == CompressionLevel.GOOD)
                            {
                                _local_10 = 524308;
                            };
                        };
                    };
                    _local_6 = 2;
                    _local_5 = 300;
                };
                _local_7 = ((((_local_3 * _local_6) + (_local_5 * (_local_4 + 1))) + _local_10) + currentAddr);
                if (_local_7 > _local_8.length)
                {
                    _local_6 = 1;
                    _local_10 = 0;
                    if (level == CompressionLevel.UNCOMPRESSED)
                    {
                        _local_5 = 8;
                        _local_4 = int(Math.ceil((_local_3 / 0xFFFF)));
                    }
                    else
                    {
                        if (level == CompressionLevel.FAST)
                        {
                            _local_4 = int(Math.ceil(((_local_3 * 2) / 0xC000)));
                        }
                        else
                        {
                            _local_4 = int(Math.ceil((_local_3 / 98304)));
                            if (level == CompressionLevel.NORMAL)
                            {
                                _local_10 = 0x70000;
                            }
                            else
                            {
                                if (level == CompressionLevel.GOOD)
                                {
                                    _local_10 = 524308;
                                };
                            };
                        };
                        _local_6 = 2;
                        _local_5 = 300;
                    };
                    _local_8.length = ((((_local_3 * _local_6) + (_local_5 * (_local_4 + 1))) + _local_10) + currentAddr);
                    ApplicationDomain.currentDomain.domainMemory = _local_8;
                };
                if (zlib)
                {
                    _local_4 = _arg_1;
                    while ((_local_4 + 5552) <= _arg_2)
                    {
                        _local_5 = _local_4;
                        while (_local_5 < (_local_4 + 5552))
                        {
                            s2 = (s2 + (((((((((((((((((s1 << 4) + (li8(_local_5) * 16)) + (li8(_local_5 + 1) * 15)) + (li8(_local_5 + 2) * 14)) + (li8(_local_5 + 3) * 13)) + (li8(_local_5 + 4) * 12)) + (li8(_local_5 + 5) * 11)) + (li8(_local_5 + 6) * 10)) + (li8(_local_5 + 7) * 9)) + (li8(_local_5 + 8) * 8)) + (li8(_local_5 + 9) * 7)) + (li8(_local_5 + 10) * 6)) + (li8(_local_5 + 11) * 5)) + (li8(_local_5 + 12) * 4)) + (li8(_local_5 + 13) * 3)) + (li8(_local_5 + 14) * 2)) + li8(_local_5 + 15)));
                            s1 = (s1 + (((((((((((((((li8(_local_5) + li8(_local_5 + 1)) + li8(_local_5 + 2)) + li8(_local_5 + 3)) + li8(_local_5 + 4)) + li8(_local_5 + 5)) + li8(_local_5 + 6)) + li8(_local_5 + 7)) + li8(_local_5 + 8)) + li8(_local_5 + 9)) + li8(_local_5 + 10)) + li8(_local_5 + 11)) + li8(_local_5 + 12)) + li8(_local_5 + 13)) + li8(_local_5 + 14)) + li8(_local_5 + 15)));
                            _local_5 = (_local_5 + 16);
                        };
                        s1 = (s1 % 65521);
                        s2 = (s2 % 65521);
                        _local_4 = (_local_4 + 5552);
                    };
                    if (_local_4 != _arg_2)
                    {
                        _local_5 = _local_4;
                        while (_local_5 < _arg_2)
                        {
                            _local_6 = _local_5++;
                            s1 = (s1 + li8(_local_6));
                            s2 = (s2 + s1);
                        };
                        s1 = (s1 % 65521);
                        s2 = (s2 % 65521);
                    };
                };
                if (level == CompressionLevel.FAST)
                {
                    _local_4 = _arg_1;
                    _local_5 = 0x0800;
                    _local_6 = _local_4;
                    while ((_arg_2 - _local_4) > _local_5)
                    {
                        _local_10 = (_local_4 + _local_5);
                        if (!blockInProgress)
                        {
                            _local_12 = false;
                            blockInProgress = true;
                            if (level == CompressionLevel.UNCOMPRESSED)
                            {
                                if (bitOffset == 0)
                                {
                                    si8(0, currentAddr);
                                };
                                _local_13 = li8(currentAddr);
                                _local_13 = (_local_13 | (((_local_12) ? 1 : 0) << bitOffset));
                                si32(_local_13, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                if (bitOffset > 0)
                                {
                                    _local_13 = li8(currentAddr);
                                    _local_13 = (_local_13 | (0 << bitOffset));
                                    si32(_local_13, currentAddr);
                                    bitOffset = (bitOffset + (8 - bitOffset));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                            }
                            else
                            {
                                _local_13 = li8(currentAddr);
                                _local_13 = (_local_13 | ((0x04 | ((_local_12) ? 1 : 0)) << bitOffset));
                                si32(_local_13, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockStartAddr = currentAddr;
                            _local_11 = Math.min(_arg_2, (_local_4 + 98304));
                            createAndWriteHuffmanTrees(_local_4, _local_11);
                        };
                        while (_local_6 < _local_10)
                        {
                            _local_13 = li8(_local_6);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_6++;
                        };
                        _local_4 = (_local_4 + _local_5);
                        if (((blockInProgress) ? (currentAddr - blockStartAddr) : 0) > 0xC000)
                        {
                            if (level != CompressionLevel.UNCOMPRESSED)
                            {
                                _local_13 = 0;
                                _local_14 = li32((scratchAddr + _local_13) + 0x0400);
                                _local_15 = li8(currentAddr);
                                _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                                si32(_local_15, currentAddr);
                                bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockInProgress = false;
                        };
                    };
                    if (_local_6 < _arg_2)
                    {
                        if (!blockInProgress)
                        {
                            _local_12 = false;
                            blockInProgress = true;
                            if (level == CompressionLevel.UNCOMPRESSED)
                            {
                                if (bitOffset == 0)
                                {
                                    si8(0, currentAddr);
                                };
                                _local_13 = li8(currentAddr);
                                _local_13 = (_local_13 | (((_local_12) ? 1 : 0) << bitOffset));
                                si32(_local_13, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                if (bitOffset > 0)
                                {
                                    _local_13 = li8(currentAddr);
                                    _local_13 = (_local_13 | (0 << bitOffset));
                                    si32(_local_13, currentAddr);
                                    bitOffset = (bitOffset + (8 - bitOffset));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                            }
                            else
                            {
                                _local_13 = li8(currentAddr);
                                _local_13 = (_local_13 | ((0x04 | ((_local_12) ? 1 : 0)) << bitOffset));
                                si32(_local_13, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockStartAddr = currentAddr;
                            createAndWriteHuffmanTrees(_local_4, _arg_2);
                        };
                        while (_local_6 < _arg_2)
                        {
                            _local_13 = li8(_local_6);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_6++;
                        };
                        if (((blockInProgress) ? (currentAddr - blockStartAddr) : 0) > 0xC000)
                        {
                            if (level != CompressionLevel.UNCOMPRESSED)
                            {
                                _local_13 = 0;
                                _local_14 = li32((scratchAddr + _local_13) + 0x0400);
                                _local_15 = li8(currentAddr);
                                _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                                si32(_local_15, currentAddr);
                                bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockInProgress = false;
                        };
                    };
                }
                else
                {
                    if (level == CompressionLevel.NORMAL)
                    {
                        _local_4 = _arg_1;
                        _local_22 = (_arg_2 - _local_4);
                        _local_25 = 1;
                        _local_26 = 0;
                        if (level == CompressionLevel.UNCOMPRESSED)
                        {
                            _local_24 = 8;
                            _local_23 = int(Math.ceil((_local_22 / 0xFFFF)));
                        }
                        else
                        {
                            if (level == CompressionLevel.FAST)
                            {
                                _local_23 = int(Math.ceil(((_local_22 * 2) / 0xC000)));
                            }
                            else
                            {
                                _local_23 = int(Math.ceil((_local_22 / 98304)));
                                if (level == CompressionLevel.NORMAL)
                                {
                                    _local_26 = 0x70000;
                                }
                                else
                                {
                                    if (level == CompressionLevel.GOOD)
                                    {
                                        _local_26 = 524308;
                                    };
                                };
                            };
                            _local_25 = 2;
                            _local_24 = 300;
                        };
                        _local_21 = ((currentAddr + (((_local_22 * _local_25) + (_local_24 * (_local_23 + 1))) + _local_26)) - 0x40000);
                        _local_22 = (_local_21 - 0x30000);
                        _local_17 = ((_local_21 + 0x40000) - 32);
                        while (_local_17 >= _local_21)
                        {
                            si32(-1, _local_17);
                            si32(-1, (_local_17 + 4));
                            si32(-1, (_local_17 + 8));
                            si32(-1, (_local_17 + 12));
                            si32(-1, (_local_17 + 16));
                            si32(-1, (_local_17 + 20));
                            si32(-1, (_local_17 + 24));
                            si32(-1, (_local_17 + 28));
                            _local_17 = (_local_17 - 32);
                        };
                        while ((_arg_2 - _local_4) > 0)
                        {
                            _local_11 = Math.min(_arg_2, (_local_4 + 98304));
                            _local_5 = _local_11;
                            _local_6 = (_local_5 - 4);
                            _local_24 = 0;
                            while (_local_24 < 286)
                            {
                                _local_25 = _local_24++;
                                si32(0, (scratchAddr + (_local_25 << 2)));
                            };
                            _local_24 = 0;
                            while (_local_24 < 30)
                            {
                                _local_25 = _local_24++;
                                si32(0, ((scratchAddr + 1144) + (_local_25 << 2)));
                            };
                            _local_23 = _local_22;
                            _local_17 = _local_4;
                            while (_local_17 < _local_6)
                            {
                                _local_24 = 775236557;
                                _local_25 = -862048943;
                                _local_26 = 461845907;
                                _local_27 = (li32(_local_17) * _local_25);
                                _local_27 = ((_local_27 << 15) | (_local_27 >>> 17));
                                _local_24 = (_local_24 ^ (_local_27 * _local_26));
                                _local_24 = ((_local_24 << 13) | (_local_24 >>> 19));
                                _local_24 = ((_local_24 * 5) + -430675100);
                                _local_28 = (_local_24 ^ 0x04);
                                _local_28 = (_local_28 ^ (_local_28 >>> 16));
                                _local_28 = (_local_28 * -2048144789);
                                _local_28 = (_local_28 ^ (_local_28 >>> 13));
                                _local_28 = (_local_28 * -1028477387);
                                _local_16 = (((_local_28 ^ (_local_28 >>> 16)) & 0xFFFF) << 2);
                                _local_18 = li32(_local_21 + _local_16);
                                if (((_local_18 >= (0)) && (li32(_local_18) == li32(_local_17))))
                                {
                                    _local_13 = 4;
                                    _local_18 = (_local_18 + 4);
                                    _local_20 = (_local_17 + 4);
                                    while ((((_local_20 < (_local_5)) && (li8(_local_18) == li8(_local_20))) && (_local_13 < 258)))
                                    {
                                        _local_18++;
                                        _local_20++;
                                        _local_13++;
                                    };
                                    si32(_local_17, (_local_21 + _local_16));
                                    _local_14 = (_local_20 - _local_18);
                                    if (_local_14 <= 0x8000)
                                    {
                                        _local_24 = li16(((scratchAddr + 2492) + (_local_13 << 2)) + 2);
                                        _local_25 = 0;
                                        _local_26 = ((scratchAddr + _local_25) + (_local_24 << 2));
                                        _local_27 = (li32(_local_26) + 1);
                                        si32(_local_27, _local_26);
                                        _local_15 = li32((scratchAddr + 3528) + (((_local_14 <= 0x0100) ? _local_14 : (0x0100 + ((_local_14 - 1) >>> 7))) << 2));
                                        _local_24 = ((scratchAddr + 1144) + ((_local_15 >>> 24) << 2));
                                        _local_25 = (li32(_local_24) + 1);
                                        si32(_local_25, _local_24);
                                        si32(((_local_13 | 0x0200) | (_local_14 << 16)), _local_23);
                                        _local_23 = (_local_23 + 4);
                                        _local_17 = (_local_17 + _local_13);
                                        if (_local_17 < _local_6)
                                        {
                                            var _temp_1:* = _local_21;
                                            _local_25 = 775236557;
                                            _local_26 = -862048943;
                                            _local_27 = 461845907;
                                            _local_28 = (li32(_local_17 - 1) * _local_26);
                                            _local_28 = ((_local_28 << 15) | (_local_28 >>> 17));
                                            _local_25 = (_local_25 ^ (_local_28 * _local_27));
                                            _local_25 = ((_local_25 << 13) | (_local_25 >>> 19));
                                            _local_25 = ((_local_25 * 5) + -430675100);
                                            _local_29 = (_local_25 ^ 0x04);
                                            _local_29 = (_local_29 ^ (_local_29 >>> 16));
                                            _local_29 = (_local_29 * -2048144789);
                                            _local_29 = (_local_29 ^ (_local_29 >>> 13));
                                            _local_29 = (_local_29 * -1028477387);
                                            _local_24 = (_temp_1 + (((_local_29 ^ (_local_29 >>> 16)) & 0xFFFF) << 2));
                                            si32((_local_17 - 1), _local_24);
                                        };
                                    }
                                    else
                                    {
                                        _local_10 = li8(_local_17);
                                        si16(_local_10, _local_23);
                                        _local_24 = 0;
                                        _local_25 = ((scratchAddr + _local_24) + (_local_10 << 2));
                                        _local_26 = (li32(_local_25) + 1);
                                        si32(_local_26, _local_25);
                                        _local_23 = (_local_23 + 2);
                                        _local_17++;
                                    };
                                }
                                else
                                {
                                    _local_10 = li8(_local_17);
                                    si16(_local_10, _local_23);
                                    _local_24 = 0;
                                    _local_25 = ((scratchAddr + _local_24) + (_local_10 << 2));
                                    _local_26 = (li32(_local_25) + 1);
                                    si32(_local_26, _local_25);
                                    si32(_local_17, (_local_21 + _local_16));
                                    _local_23 = (_local_23 + 2);
                                    _local_17++;
                                };
                            };
                            while (_local_17 < _local_5)
                            {
                                _local_10 = li8(_local_17);
                                si16(_local_10, _local_23);
                                _local_24 = 0;
                                _local_25 = ((scratchAddr + _local_24) + (_local_10 << 2));
                                _local_26 = (li32(_local_25) + 1);
                                si32(_local_26, _local_25);
                                _local_23 = (_local_23 + 2);
                                _local_17++;
                            };
                            _local_12 = false;
                            blockInProgress = true;
                            if (level == CompressionLevel.UNCOMPRESSED)
                            {
                                if (bitOffset == 0)
                                {
                                    si8(0, currentAddr);
                                };
                                _local_24 = li8(currentAddr);
                                _local_24 = (_local_24 | (((_local_12) ? 1 : 0) << bitOffset));
                                si32(_local_24, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                if (bitOffset > 0)
                                {
                                    _local_24 = li8(currentAddr);
                                    _local_24 = (_local_24 | (0 << bitOffset));
                                    si32(_local_24, currentAddr);
                                    bitOffset = (bitOffset + (8 - bitOffset));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                            }
                            else
                            {
                                _local_24 = li8(currentAddr);
                                _local_24 = (_local_24 | ((0x04 | ((_local_12) ? 1 : 0)) << bitOffset));
                                si32(_local_24, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockStartAddr = currentAddr;
                            createAndWriteHuffmanTrees(_local_4, _local_5);
                            _local_17 = _local_22;
                            while ((_local_17 + 64) <= _local_23)
                            {
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                            };
                            while (_local_17 < _local_23)
                            {
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                            };
                            if (level != CompressionLevel.UNCOMPRESSED)
                            {
                                _local_24 = 0;
                                _local_25 = li32((scratchAddr + _local_24) + 0x0400);
                                _local_26 = li8(currentAddr);
                                _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                si32(_local_26, currentAddr);
                                bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockInProgress = false;
                            _local_4 = _local_5;
                        };
                    }
                    else
                    {
                        if (level == CompressionLevel.GOOD)
                        {
                            _local_4 = _arg_1;
                            _local_18 = (_arg_2 - _local_4);
                            _local_22 = 1;
                            _local_23 = 0;
                            if (level == CompressionLevel.UNCOMPRESSED)
                            {
                                _local_21 = 8;
                                _local_20 = int(Math.ceil((_local_18 / 0xFFFF)));
                            }
                            else
                            {
                                if (level == CompressionLevel.FAST)
                                {
                                    _local_20 = int(Math.ceil(((_local_18 * 2) / 0xC000)));
                                }
                                else
                                {
                                    _local_20 = int(Math.ceil((_local_18 / 98304)));
                                    if (level == CompressionLevel.NORMAL)
                                    {
                                        _local_23 = 0x70000;
                                    }
                                    else
                                    {
                                        if (level == CompressionLevel.GOOD)
                                        {
                                            _local_23 = 524308;
                                        };
                                    };
                                };
                                _local_22 = 2;
                                _local_21 = 300;
                            };
                            _local_17 = ((currentAddr + (((_local_18 * _local_22) + (_local_21 * (_local_20 + 1))) + _local_23)) - 327700);
                            _local_18 = (_local_17 - 0x30000);
                            _local_35 = new LZHash(_local_17, 258, 0x8000);
                            while ((_arg_2 - _local_4) > 0)
                            {
                                _local_11 = Math.min(_arg_2, (_local_4 + 98304));
                                _local_5 = _local_11;
                                _local_10 = (_local_5 - 9);
                                _local_6 = ((_local_10 - 516) - 1);
                                _local_21 = 0;
                                while (_local_21 < 286)
                                {
                                    _local_22 = _local_21++;
                                    si32(0, (scratchAddr + (_local_22 << 2)));
                                };
                                _local_21 = 0;
                                while (_local_21 < 30)
                                {
                                    _local_22 = _local_21++;
                                    si32(0, ((scratchAddr + 1144) + (_local_22 << 2)));
                                };
                                _local_20 = _local_18;
                                _local_16 = _local_4;
                                if (_local_16 < _local_6)
                                {
                                    _local_23 = 775236557;
                                    _local_24 = -862048943;
                                    _local_25 = 461845907;
                                    _local_26 = (li32(_local_4) * _local_24);
                                    _local_26 = ((_local_26 << 15) | (_local_26 >>> 17));
                                    _local_23 = (_local_23 ^ (_local_26 * _local_25));
                                    _local_23 = ((_local_23 << 13) | (_local_23 >>> 19));
                                    _local_23 = ((_local_23 * 5) + -430675100);
                                    _local_27 = (_local_23 ^ 0x04);
                                    _local_27 = (_local_27 ^ (_local_27 >>> 16));
                                    _local_27 = (_local_27 * -2048144789);
                                    _local_27 = (_local_27 ^ (_local_27 >>> 13));
                                    _local_27 = (_local_27 * -1028477387);
                                    _local_22 = ((_local_27 ^ (_local_27 >>> 16)) & 0xFFFF);
                                    _local_21 = (_local_35.addr + (_local_22 * 5));
                                    _local_22 = 3;
                                    _local_23 = -1;
                                    _local_25 = li32(_local_21 + 1);
                                    if ((((_local_25 >= (0)) && (li32(_local_4) == li32(_local_25))) && ((_local_4 - _local_25) <= _local_35.windowSize)))
                                    {
                                        _local_26 = (_local_4 + 4);
                                        _local_24 = 4;
                                        _local_25 = (_local_25 + 4);
                                        while (((li32(_local_25) == (li32(_local_26))) && ((_local_24 + 4) <= _local_35.maxMatchLength)))
                                        {
                                            _local_24 = (_local_24 + 4);
                                            _local_25 = (_local_25 + 4);
                                            _local_26 = (_local_26 + 4);
                                        };
                                        while (((li8(_local_25) == (li8(_local_26))) && (_local_24 < _local_35.maxMatchLength)))
                                        {
                                            _local_24++;
                                            _local_25++;
                                            _local_26++;
                                        };
                                        _local_22 = _local_24;
                                        _local_23 = _local_25;
                                    };
                                    _local_27 = 5;
                                    _local_28 = 9;
                                    while (_local_27 < _local_28)
                                    {
                                        _local_29 = _local_27++;
                                        _local_36 = li32(_local_4);
                                        si32(_local_36, _local_35.hashScratchAddr);
                                        _local_36 = li32(_local_4 + 4);
                                        si32(_local_36, (_local_35.hashScratchAddr + 4));
                                        si32(0, (_local_35.hashScratchAddr + _local_29));
                                        _local_36 = 775236557;
                                        _local_37 = -862048943;
                                        _local_38 = 461845907;
                                        _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                        _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                        _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                        _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                        _local_36 = ((_local_36 * 5) + -430675100);
                                        _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                        _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                        _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                        _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                        _local_36 = ((_local_36 * 5) + -430675100);
                                        _local_40 = (_local_36 ^ _local_29);
                                        _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                        _local_40 = (_local_40 * -2048144789);
                                        _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                        _local_40 = (_local_40 * -1028477387);
                                        _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                        _local_30 = ((_local_35.addr + (_local_31 * 5)) + 1);
                                        _local_25 = li32(_local_30);
                                        if (((((_local_25 >= (0)) && (li32((_local_25 + _local_22) - 3) == li32((_local_4 + _local_22) - 3))) && (li32(_local_4) == li32(_local_25))) && ((_local_4 - _local_25) <= _local_35.windowSize)))
                                        {
                                            _local_26 = (_local_4 + 4);
                                            _local_24 = 4;
                                            _local_25 = (_local_25 + 4);
                                            while (((li32(_local_25) == (li32(_local_26))) && ((_local_24 + 4) <= _local_35.maxMatchLength)))
                                            {
                                                _local_24 = (_local_24 + 4);
                                                _local_25 = (_local_25 + 4);
                                                _local_26 = (_local_26 + 4);
                                            };
                                            while (((li8(_local_25) == (li8(_local_26))) && (_local_24 < _local_35.maxMatchLength)))
                                            {
                                                _local_24++;
                                                _local_25++;
                                                _local_26++;
                                            };
                                            if (_local_24 > _local_22)
                                            {
                                                _local_22 = _local_24;
                                                _local_23 = _local_25;
                                            };
                                        };
                                    };
                                    si32((((_local_4 - (_local_23 - _local_22)) << 16) | _local_22), _local_35.resultAddr);
                                    _local_22 = _local_21;
                                    _local_23 = 4;
                                    _local_24 = _local_4;
                                    _local_25 = li8(_local_22);
                                    if (((_local_25 < (8)) && (_local_25 >= 0)))
                                    {
                                        _local_26 = li32(_local_22 + 1);
                                        si8(_local_23, _local_22);
                                        si32(_local_24, (_local_22 + 1));
                                        _local_23 = (_local_25 + 1);
                                        _local_24 = _local_26;
                                        _local_28 = li32(_local_24);
                                        si32(_local_28, _local_35.hashScratchAddr);
                                        _local_28 = li32(_local_24 + 4);
                                        si32(_local_28, (_local_35.hashScratchAddr + 4));
                                        si32(0, (_local_35.hashScratchAddr + _local_23));
                                        _local_28 = 775236557;
                                        _local_29 = -862048943;
                                        _local_30 = 461845907;
                                        _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                        _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                        _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                        _local_28 = ((_local_28 * 5) + -430675100);
                                        _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                        _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                        _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                        _local_28 = ((_local_28 * 5) + -430675100);
                                        _local_36 = (_local_28 ^ _local_23);
                                        _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                        _local_36 = (_local_36 * -2048144789);
                                        _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                        _local_36 = (_local_36 * -1028477387);
                                        _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                        _local_22 = (_local_35.addr + (_local_27 * 5));
                                        _local_25 = li8(_local_22);
                                        if (((_local_25 < (8)) && (_local_25 >= 0)))
                                        {
                                            _local_26 = li32(_local_22 + 1);
                                            si8(_local_23, _local_22);
                                            si32(_local_24, (_local_22 + 1));
                                            _local_23 = (_local_25 + 1);
                                            _local_24 = _local_26;
                                            _local_28 = li32(_local_24);
                                            si32(_local_28, _local_35.hashScratchAddr);
                                            _local_28 = li32(_local_24 + 4);
                                            si32(_local_28, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_23));
                                            _local_28 = 775236557;
                                            _local_29 = -862048943;
                                            _local_30 = 461845907;
                                            _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                            _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                            _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_36 = (_local_28 ^ _local_23);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                            _local_36 = (_local_36 * -2048144789);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                            _local_36 = (_local_36 * -1028477387);
                                            _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                            _local_22 = (_local_35.addr + (_local_27 * 5));
                                            _local_25 = li8(_local_22);
                                            if (((_local_25 < (8)) && (_local_25 >= 0)))
                                            {
                                                _local_26 = li32(_local_22 + 1);
                                                si8(_local_23, _local_22);
                                                si32(_local_24, (_local_22 + 1));
                                                _local_23 = (_local_25 + 1);
                                                _local_24 = _local_26;
                                                _local_28 = li32(_local_24);
                                                si32(_local_28, _local_35.hashScratchAddr);
                                                _local_28 = li32(_local_24 + 4);
                                                si32(_local_28, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_23));
                                                _local_28 = 775236557;
                                                _local_29 = -862048943;
                                                _local_30 = 461845907;
                                                _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                                _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                                _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_36 = (_local_28 ^ _local_23);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                _local_36 = (_local_36 * -2048144789);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                _local_36 = (_local_36 * -1028477387);
                                                _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                _local_22 = (_local_35.addr + (_local_27 * 5));
                                                _local_25 = li8(_local_22);
                                                if (((_local_25 < (8)) && (_local_25 >= 0)))
                                                {
                                                    _local_26 = li32(_local_22 + 1);
                                                    si8(_local_23, _local_22);
                                                    si32(_local_24, (_local_22 + 1));
                                                    _local_23 = (_local_25 + 1);
                                                    _local_24 = _local_26;
                                                    _local_28 = li32(_local_24);
                                                    si32(_local_28, _local_35.hashScratchAddr);
                                                    _local_28 = li32(_local_24 + 4);
                                                    si32(_local_28, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_23));
                                                    _local_28 = 775236557;
                                                    _local_29 = -862048943;
                                                    _local_30 = 461845907;
                                                    _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                                    _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                    _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                    _local_28 = ((_local_28 * 5) + -430675100);
                                                    _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                                    _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                    _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                    _local_28 = ((_local_28 * 5) + -430675100);
                                                    _local_36 = (_local_28 ^ _local_23);
                                                    _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                    _local_36 = (_local_36 * -2048144789);
                                                    _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                    _local_36 = (_local_36 * -1028477387);
                                                    _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                    _local_22 = (_local_35.addr + (_local_27 * 5));
                                                };
                                            };
                                        };
                                    };
                                    si8(_local_23, _local_22);
                                    si32(_local_24, (_local_22 + 1));
                                    _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                }
                                else
                                {
                                    if (_local_16 < _local_10)
                                    {
                                        _local_23 = 775236557;
                                        _local_24 = -862048943;
                                        _local_25 = 461845907;
                                        _local_26 = (li32(_local_4) * _local_24);
                                        _local_26 = ((_local_26 << 15) | (_local_26 >>> 17));
                                        _local_23 = (_local_23 ^ (_local_26 * _local_25));
                                        _local_23 = ((_local_23 << 13) | (_local_23 >>> 19));
                                        _local_23 = ((_local_23 * 5) + -430675100);
                                        _local_27 = (_local_23 ^ 0x04);
                                        _local_27 = (_local_27 ^ (_local_27 >>> 16));
                                        _local_27 = (_local_27 * -2048144789);
                                        _local_27 = (_local_27 ^ (_local_27 >>> 13));
                                        _local_27 = (_local_27 * -1028477387);
                                        _local_22 = ((_local_27 ^ (_local_27 >>> 16)) & 0xFFFF);
                                        _local_21 = (_local_35.addr + (_local_22 * 5));
                                        _local_22 = 3;
                                        _local_23 = -1;
                                        _local_25 = li32(_local_21 + 1);
                                        if ((((_local_25 >= (0)) && (li32(_local_4) == li32(_local_25))) && ((_local_4 - _local_25) <= _local_35.windowSize)))
                                        {
                                            _local_26 = (_local_4 + 4);
                                            _local_24 = 4;
                                            _local_25 = (_local_25 + 4);
                                            while (((((_local_26 + 4) <= (_local_5)) && (li32(_local_25) == li32(_local_26))) && ((_local_24 + 4) <= _local_35.maxMatchLength)))
                                            {
                                                _local_24 = (_local_24 + 4);
                                                _local_25 = (_local_25 + 4);
                                                _local_26 = (_local_26 + 4);
                                            };
                                            while ((((_local_26 < (_local_5)) && (li8(_local_25) == li8(_local_26))) && (_local_24 < _local_35.maxMatchLength)))
                                            {
                                                _local_24++;
                                                _local_25++;
                                                _local_26++;
                                            };
                                            _local_22 = _local_24;
                                            _local_23 = _local_25;
                                        };
                                        _local_27 = 5;
                                        _local_28 = 9;
                                        while (_local_27 < _local_28)
                                        {
                                            _local_29 = _local_27++;
                                            _local_36 = li32(_local_4);
                                            si32(_local_36, _local_35.hashScratchAddr);
                                            _local_36 = li32(_local_4 + 4);
                                            si32(_local_36, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_29));
                                            _local_36 = 775236557;
                                            _local_37 = -862048943;
                                            _local_38 = 461845907;
                                            _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                            _local_36 = ((_local_36 * 5) + -430675100);
                                            _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                            _local_36 = ((_local_36 * 5) + -430675100);
                                            _local_40 = (_local_36 ^ _local_29);
                                            _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                            _local_40 = (_local_40 * -2048144789);
                                            _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                            _local_40 = (_local_40 * -1028477387);
                                            _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                            _local_30 = ((_local_35.addr + (_local_31 * 5)) + 1);
                                            _local_25 = li32(_local_30);
                                            if ((((_local_25 >= (0)) && (li32(_local_4) == li32(_local_25))) && ((_local_4 - _local_25) <= _local_35.windowSize)))
                                            {
                                                _local_26 = (_local_4 + 4);
                                                _local_24 = 4;
                                                _local_25 = (_local_25 + 4);
                                                while (((((_local_26 + 4) <= (_local_5)) && (li32(_local_25) == li32(_local_26))) && ((_local_24 + 4) <= _local_35.maxMatchLength)))
                                                {
                                                    _local_24 = (_local_24 + 4);
                                                    _local_25 = (_local_25 + 4);
                                                    _local_26 = (_local_26 + 4);
                                                };
                                                while ((((_local_26 < (_local_5)) && (li8(_local_25) == li8(_local_26))) && (_local_24 < _local_35.maxMatchLength)))
                                                {
                                                    _local_24++;
                                                    _local_25++;
                                                    _local_26++;
                                                };
                                                if (_local_24 > _local_22)
                                                {
                                                    _local_22 = _local_24;
                                                    _local_23 = _local_25;
                                                };
                                            };
                                        };
                                        si32((((_local_4 - (_local_23 - _local_22)) << 16) | _local_22), _local_35.resultAddr);
                                        _local_22 = _local_21;
                                        _local_23 = 4;
                                        _local_24 = _local_4;
                                        _local_25 = li8(_local_22);
                                        if (((_local_25 < (8)) && (_local_25 >= 0)))
                                        {
                                            _local_26 = li32(_local_22 + 1);
                                            si8(_local_23, _local_22);
                                            si32(_local_24, (_local_22 + 1));
                                            _local_23 = (_local_25 + 1);
                                            _local_24 = _local_26;
                                            _local_28 = li32(_local_24);
                                            si32(_local_28, _local_35.hashScratchAddr);
                                            _local_28 = li32(_local_24 + 4);
                                            si32(_local_28, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_23));
                                            _local_28 = 775236557;
                                            _local_29 = -862048943;
                                            _local_30 = 461845907;
                                            _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                            _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                            _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_36 = (_local_28 ^ _local_23);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                            _local_36 = (_local_36 * -2048144789);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                            _local_36 = (_local_36 * -1028477387);
                                            _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                            _local_22 = (_local_35.addr + (_local_27 * 5));
                                            _local_25 = li8(_local_22);
                                            if (((_local_25 < (8)) && (_local_25 >= 0)))
                                            {
                                                _local_26 = li32(_local_22 + 1);
                                                si8(_local_23, _local_22);
                                                si32(_local_24, (_local_22 + 1));
                                                _local_23 = (_local_25 + 1);
                                                _local_24 = _local_26;
                                                _local_28 = li32(_local_24);
                                                si32(_local_28, _local_35.hashScratchAddr);
                                                _local_28 = li32(_local_24 + 4);
                                                si32(_local_28, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_23));
                                                _local_28 = 775236557;
                                                _local_29 = -862048943;
                                                _local_30 = 461845907;
                                                _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                                _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                                _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_36 = (_local_28 ^ _local_23);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                _local_36 = (_local_36 * -2048144789);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                _local_36 = (_local_36 * -1028477387);
                                                _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                _local_22 = (_local_35.addr + (_local_27 * 5));
                                                _local_25 = li8(_local_22);
                                                if (((_local_25 < (8)) && (_local_25 >= 0)))
                                                {
                                                    _local_26 = li32(_local_22 + 1);
                                                    si8(_local_23, _local_22);
                                                    si32(_local_24, (_local_22 + 1));
                                                    _local_23 = (_local_25 + 1);
                                                    _local_24 = _local_26;
                                                    _local_28 = li32(_local_24);
                                                    si32(_local_28, _local_35.hashScratchAddr);
                                                    _local_28 = li32(_local_24 + 4);
                                                    si32(_local_28, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_23));
                                                    _local_28 = 775236557;
                                                    _local_29 = -862048943;
                                                    _local_30 = 461845907;
                                                    _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                                    _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                    _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                    _local_28 = ((_local_28 * 5) + -430675100);
                                                    _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                                    _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                    _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                    _local_28 = ((_local_28 * 5) + -430675100);
                                                    _local_36 = (_local_28 ^ _local_23);
                                                    _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                    _local_36 = (_local_36 * -2048144789);
                                                    _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                    _local_36 = (_local_36 * -1028477387);
                                                    _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                    _local_22 = (_local_35.addr + (_local_27 * 5));
                                                    _local_25 = li8(_local_22);
                                                    if (((_local_25 < (8)) && (_local_25 >= 0)))
                                                    {
                                                        _local_26 = li32(_local_22 + 1);
                                                        si8(_local_23, _local_22);
                                                        si32(_local_24, (_local_22 + 1));
                                                        _local_23 = (_local_25 + 1);
                                                        _local_24 = _local_26;
                                                        _local_28 = li32(_local_24);
                                                        si32(_local_28, _local_35.hashScratchAddr);
                                                        _local_28 = li32(_local_24 + 4);
                                                        si32(_local_28, (_local_35.hashScratchAddr + 4));
                                                        si32(0, (_local_35.hashScratchAddr + _local_23));
                                                        _local_28 = 775236557;
                                                        _local_29 = -862048943;
                                                        _local_30 = 461845907;
                                                        _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                                        _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                        _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                        _local_28 = ((_local_28 * 5) + -430675100);
                                                        _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                                        _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                        _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                        _local_28 = ((_local_28 * 5) + -430675100);
                                                        _local_36 = (_local_28 ^ _local_23);
                                                        _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                        _local_36 = (_local_36 * -2048144789);
                                                        _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                        _local_36 = (_local_36 * -1028477387);
                                                        _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                        _local_22 = (_local_35.addr + (_local_27 * 5));
                                                    };
                                                };
                                            };
                                        };
                                        si8(_local_23, _local_22);
                                        si32(_local_24, (_local_22 + 1));
                                        _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                    };
                                };
                                while (_local_16 < _local_6)
                                {
                                    _local_24 = 775236557;
                                    _local_25 = -862048943;
                                    _local_26 = 461845907;
                                    _local_27 = (li32(_local_16 + 1) * _local_25);
                                    _local_27 = ((_local_27 << 15) | (_local_27 >>> 17));
                                    _local_24 = (_local_24 ^ (_local_27 * _local_26));
                                    _local_24 = ((_local_24 << 13) | (_local_24 >>> 19));
                                    _local_24 = ((_local_24 * 5) + -430675100);
                                    _local_28 = (_local_24 ^ 0x04);
                                    _local_28 = (_local_28 ^ (_local_28 >>> 16));
                                    _local_28 = (_local_28 * -2048144789);
                                    _local_28 = (_local_28 ^ (_local_28 >>> 13));
                                    _local_28 = (_local_28 * -1028477387);
                                    _local_23 = ((_local_28 ^ (_local_28 >>> 16)) & 0xFFFF);
                                    _local_22 = (_local_35.addr + (_local_23 * 5));
                                    if (li16(_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07)) < (_local_35.avgMatchLength + 4))
                                    {
                                        _local_23 = (_local_16 + 1);
                                        _local_24 = 3;
                                        _local_25 = -1;
                                        _local_27 = li32(_local_22 + 1);
                                        if ((((_local_27 >= (0)) && (li32(_local_23) == li32(_local_27))) && ((_local_23 - _local_27) <= _local_35.windowSize)))
                                        {
                                            _local_28 = (_local_23 + 4);
                                            _local_26 = 4;
                                            _local_27 = (_local_27 + 4);
                                            while (((li32(_local_27) == (li32(_local_28))) && ((_local_26 + 4) <= _local_35.maxMatchLength)))
                                            {
                                                _local_26 = (_local_26 + 4);
                                                _local_27 = (_local_27 + 4);
                                                _local_28 = (_local_28 + 4);
                                            };
                                            while (((li8(_local_27) == (li8(_local_28))) && (_local_26 < _local_35.maxMatchLength)))
                                            {
                                                _local_26++;
                                                _local_27++;
                                                _local_28++;
                                            };
                                            _local_24 = _local_26;
                                            _local_25 = _local_27;
                                        };
                                        _local_29 = 5;
                                        _local_30 = 9;
                                        while (_local_29 < _local_30)
                                        {
                                            _local_31 = _local_29++;
                                            _local_38 = li32(_local_23);
                                            si32(_local_38, _local_35.hashScratchAddr);
                                            _local_38 = li32(_local_23 + 4);
                                            si32(_local_38, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_31));
                                            _local_38 = 775236557;
                                            _local_39 = -862048943;
                                            _local_40 = 461845907;
                                            _local_41 = (li32(_local_35.hashScratchAddr) * _local_39);
                                            _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                            _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                            _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                            _local_38 = ((_local_38 * 5) + -430675100);
                                            _local_41 = (li32(_local_35.hashScratchAddr + 4) * _local_39);
                                            _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                            _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                            _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                            _local_38 = ((_local_38 * 5) + -430675100);
                                            _local_42 = (_local_38 ^ _local_31);
                                            _local_42 = (_local_42 ^ (_local_42 >>> 16));
                                            _local_42 = (_local_42 * -2048144789);
                                            _local_42 = (_local_42 ^ (_local_42 >>> 13));
                                            _local_42 = (_local_42 * -1028477387);
                                            _local_37 = ((_local_42 ^ (_local_42 >>> 16)) & 0xFFFF);
                                            _local_36 = ((_local_35.addr + (_local_37 * 5)) + 1);
                                            _local_27 = li32(_local_36);
                                            if (((((_local_27 >= (0)) && (li32((_local_27 + _local_24) - 3) == li32((_local_23 + _local_24) - 3))) && (li32(_local_23) == li32(_local_27))) && ((_local_23 - _local_27) <= _local_35.windowSize)))
                                            {
                                                _local_28 = (_local_23 + 4);
                                                _local_26 = 4;
                                                _local_27 = (_local_27 + 4);
                                                while (((li32(_local_27) == (li32(_local_28))) && ((_local_26 + 4) <= _local_35.maxMatchLength)))
                                                {
                                                    _local_26 = (_local_26 + 4);
                                                    _local_27 = (_local_27 + 4);
                                                    _local_28 = (_local_28 + 4);
                                                };
                                                while (((li8(_local_27) == (li8(_local_28))) && (_local_26 < _local_35.maxMatchLength)))
                                                {
                                                    _local_26++;
                                                    _local_27++;
                                                    _local_28++;
                                                };
                                                if (_local_26 > _local_24)
                                                {
                                                    _local_24 = _local_26;
                                                    _local_25 = _local_27;
                                                };
                                            };
                                        };
                                        si32((((_local_23 - (_local_25 - _local_24)) << 16) | _local_24), _local_35.resultAddr);
                                    }
                                    else
                                    {
                                        si32(0, _local_35.resultAddr);
                                    };
                                    _local_23 = _local_22;
                                    _local_24 = 4;
                                    _local_25 = (_local_16 + 1);
                                    _local_26 = li8(_local_23);
                                    if (((_local_26 < (8)) && (_local_26 >= 0)))
                                    {
                                        _local_27 = li32(_local_23 + 1);
                                        si8(_local_24, _local_23);
                                        si32(_local_25, (_local_23 + 1));
                                        _local_24 = (_local_26 + 1);
                                        _local_25 = _local_27;
                                        _local_29 = li32(_local_25);
                                        si32(_local_29, _local_35.hashScratchAddr);
                                        _local_29 = li32(_local_25 + 4);
                                        si32(_local_29, (_local_35.hashScratchAddr + 4));
                                        si32(0, (_local_35.hashScratchAddr + _local_24));
                                        _local_29 = 775236557;
                                        _local_30 = -862048943;
                                        _local_31 = 461845907;
                                        _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                        _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                        _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_37 = (_local_29 ^ _local_24);
                                        _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                        _local_37 = (_local_37 * -2048144789);
                                        _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                        _local_37 = (_local_37 * -1028477387);
                                        _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                        _local_23 = (_local_35.addr + (_local_28 * 5));
                                        _local_26 = li8(_local_23);
                                        if (((_local_26 < (8)) && (_local_26 >= 0)))
                                        {
                                            _local_27 = li32(_local_23 + 1);
                                            si8(_local_24, _local_23);
                                            si32(_local_25, (_local_23 + 1));
                                            _local_24 = (_local_26 + 1);
                                            _local_25 = _local_27;
                                            _local_29 = li32(_local_25);
                                            si32(_local_29, _local_35.hashScratchAddr);
                                            _local_29 = li32(_local_25 + 4);
                                            si32(_local_29, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_24));
                                            _local_29 = 775236557;
                                            _local_30 = -862048943;
                                            _local_31 = 461845907;
                                            _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                            _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                            _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_37 = (_local_29 ^ _local_24);
                                            _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                            _local_37 = (_local_37 * -2048144789);
                                            _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                            _local_37 = (_local_37 * -1028477387);
                                            _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                            _local_23 = (_local_35.addr + (_local_28 * 5));
                                            _local_26 = li8(_local_23);
                                            if (((_local_26 < (8)) && (_local_26 >= 0)))
                                            {
                                                _local_27 = li32(_local_23 + 1);
                                                si8(_local_24, _local_23);
                                                si32(_local_25, (_local_23 + 1));
                                                _local_24 = (_local_26 + 1);
                                                _local_25 = _local_27;
                                                _local_29 = li32(_local_25);
                                                si32(_local_29, _local_35.hashScratchAddr);
                                                _local_29 = li32(_local_25 + 4);
                                                si32(_local_29, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_24));
                                                _local_29 = 775236557;
                                                _local_30 = -862048943;
                                                _local_31 = 461845907;
                                                _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                                _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                _local_29 = ((_local_29 * 5) + -430675100);
                                                _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                                _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                _local_29 = ((_local_29 * 5) + -430675100);
                                                _local_37 = (_local_29 ^ _local_24);
                                                _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                                _local_37 = (_local_37 * -2048144789);
                                                _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                                _local_37 = (_local_37 * -1028477387);
                                                _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                                _local_23 = (_local_35.addr + (_local_28 * 5));
                                                _local_26 = li8(_local_23);
                                                if (((_local_26 < (8)) && (_local_26 >= 0)))
                                                {
                                                    _local_27 = li32(_local_23 + 1);
                                                    si8(_local_24, _local_23);
                                                    si32(_local_25, (_local_23 + 1));
                                                    _local_24 = (_local_26 + 1);
                                                    _local_25 = _local_27;
                                                    _local_29 = li32(_local_25);
                                                    si32(_local_29, _local_35.hashScratchAddr);
                                                    _local_29 = li32(_local_25 + 4);
                                                    si32(_local_29, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_24));
                                                    _local_29 = 775236557;
                                                    _local_30 = -862048943;
                                                    _local_31 = 461845907;
                                                    _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                                    _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                    _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                    _local_29 = ((_local_29 * 5) + -430675100);
                                                    _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                                    _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                    _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                    _local_29 = ((_local_29 * 5) + -430675100);
                                                    _local_37 = (_local_29 ^ _local_24);
                                                    _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                                    _local_37 = (_local_37 * -2048144789);
                                                    _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                                    _local_37 = (_local_37 * -1028477387);
                                                    _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                                    _local_23 = (_local_35.addr + (_local_28 * 5));
                                                };
                                            };
                                        };
                                    };
                                    si8(_local_24, _local_23);
                                    si32(_local_25, (_local_23 + 1));
                                    _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                    if (li16(_local_35.resultAddr) >= 4)
                                    {
                                        _local_21 = li16(_local_35.resultAddr);
                                        if (li16(_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07)) > _local_21)
                                        {
                                            si32(0, _local_35.resultAddr);
                                        }
                                        else
                                        {
                                            _local_35.avgMatchLength = ((((_local_35.avgMatchLength << 1) + (_local_35.avgMatchLength << 2)) + (_local_21 << 1)) >>> 3);
                                            if (_local_21 < (_local_35.avgMatchLength + 4))
                                            {
                                                _local_23 = ((_local_16 + 1) + 1);
                                                _local_24 = (_local_16 + _local_21);
                                                while (_local_23 < _local_24)
                                                {
                                                    _local_25 = _local_23++;
                                                    _local_26 = 4;
                                                    _local_27 = _local_25;
                                                    _local_36 = 775236557;
                                                    _local_37 = -862048943;
                                                    _local_38 = 461845907;
                                                    _local_39 = (li32(_local_25) * _local_37);
                                                    _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                    _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                    _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                    _local_36 = ((_local_36 * 5) + -430675100);
                                                    _local_40 = (_local_36 ^ 0x04);
                                                    _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                    _local_40 = (_local_40 * -2048144789);
                                                    _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                    _local_40 = (_local_40 * -1028477387);
                                                    _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                    _local_30 = (_local_35.addr + (_local_31 * 5));
                                                    _local_28 = li8(_local_30);
                                                    if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                    {
                                                        _local_29 = li32(_local_30 + 1);
                                                        si8(_local_26, _local_30);
                                                        si32(_local_27, (_local_30 + 1));
                                                        _local_26 = (_local_28 + 1);
                                                        _local_27 = _local_29;
                                                        _local_36 = li32(_local_27);
                                                        si32(_local_36, _local_35.hashScratchAddr);
                                                        _local_36 = li32(_local_27 + 4);
                                                        si32(_local_36, (_local_35.hashScratchAddr + 4));
                                                        si32(0, (_local_35.hashScratchAddr + _local_26));
                                                        _local_36 = 775236557;
                                                        _local_37 = -862048943;
                                                        _local_38 = 461845907;
                                                        _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                                        _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                        _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                        _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                        _local_36 = ((_local_36 * 5) + -430675100);
                                                        _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                                        _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                        _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                        _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                        _local_36 = ((_local_36 * 5) + -430675100);
                                                        _local_40 = (_local_36 ^ _local_26);
                                                        _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                        _local_40 = (_local_40 * -2048144789);
                                                        _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                        _local_40 = (_local_40 * -1028477387);
                                                        _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                        _local_30 = (_local_35.addr + (_local_31 * 5));
                                                        _local_28 = li8(_local_30);
                                                        if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                        {
                                                            _local_29 = li32(_local_30 + 1);
                                                            si8(_local_26, _local_30);
                                                            si32(_local_27, (_local_30 + 1));
                                                            _local_26 = (_local_28 + 1);
                                                            _local_27 = _local_29;
                                                            _local_36 = li32(_local_27);
                                                            si32(_local_36, _local_35.hashScratchAddr);
                                                            _local_36 = li32(_local_27 + 4);
                                                            si32(_local_36, (_local_35.hashScratchAddr + 4));
                                                            si32(0, (_local_35.hashScratchAddr + _local_26));
                                                            _local_36 = 775236557;
                                                            _local_37 = -862048943;
                                                            _local_38 = 461845907;
                                                            _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                            _local_36 = ((_local_36 * 5) + -430675100);
                                                            _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                            _local_36 = ((_local_36 * 5) + -430675100);
                                                            _local_40 = (_local_36 ^ _local_26);
                                                            _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                            _local_40 = (_local_40 * -2048144789);
                                                            _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                            _local_40 = (_local_40 * -1028477387);
                                                            _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                            _local_30 = (_local_35.addr + (_local_31 * 5));
                                                        };
                                                    };
                                                    si8(_local_26, _local_30);
                                                    si32(_local_27, (_local_30 + 1));
                                                };
                                            };
                                            _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                            _local_23 = (_local_16 + _local_21);
                                            _local_26 = 775236557;
                                            _local_27 = -862048943;
                                            _local_28 = 461845907;
                                            _local_29 = (li32(_local_23) * _local_27);
                                            _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                            _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                            _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                            _local_26 = ((_local_26 * 5) + -430675100);
                                            _local_30 = (_local_26 ^ 0x04);
                                            _local_30 = (_local_30 ^ (_local_30 >>> 16));
                                            _local_30 = (_local_30 * -2048144789);
                                            _local_30 = (_local_30 ^ (_local_30 >>> 13));
                                            _local_30 = (_local_30 * -1028477387);
                                            _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                                            _local_24 = (_local_35.addr + (_local_25 * 5));
                                            _local_25 = 3;
                                            _local_26 = -1;
                                            _local_28 = li32(_local_24 + 1);
                                            if ((((_local_28 >= (0)) && (li32(_local_23) == li32(_local_28))) && ((_local_23 - _local_28) <= _local_35.windowSize)))
                                            {
                                                _local_29 = (_local_23 + 4);
                                                _local_27 = 4;
                                                _local_28 = (_local_28 + 4);
                                                while (((li32(_local_28) == (li32(_local_29))) && ((_local_27 + 4) <= _local_35.maxMatchLength)))
                                                {
                                                    _local_27 = (_local_27 + 4);
                                                    _local_28 = (_local_28 + 4);
                                                    _local_29 = (_local_29 + 4);
                                                };
                                                while (((li8(_local_28) == (li8(_local_29))) && (_local_27 < _local_35.maxMatchLength)))
                                                {
                                                    _local_27++;
                                                    _local_28++;
                                                    _local_29++;
                                                };
                                                _local_25 = _local_27;
                                                _local_26 = _local_28;
                                            };
                                            _local_30 = 5;
                                            _local_31 = 9;
                                            while (_local_30 < _local_31)
                                            {
                                                _local_36 = _local_30++;
                                                _local_39 = li32(_local_23);
                                                si32(_local_39, _local_35.hashScratchAddr);
                                                _local_39 = li32(_local_23 + 4);
                                                si32(_local_39, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_36));
                                                _local_39 = 775236557;
                                                _local_40 = -862048943;
                                                _local_41 = 461845907;
                                                _local_42 = (li32(_local_35.hashScratchAddr) * _local_40);
                                                _local_42 = ((_local_42 << 15) | (_local_42 >>> 17));
                                                _local_39 = (_local_39 ^ (_local_42 * _local_41));
                                                _local_39 = ((_local_39 << 13) | (_local_39 >>> 19));
                                                _local_39 = ((_local_39 * 5) + -430675100);
                                                _local_42 = (li32(_local_35.hashScratchAddr + 4) * _local_40);
                                                _local_42 = ((_local_42 << 15) | (_local_42 >>> 17));
                                                _local_39 = (_local_39 ^ (_local_42 * _local_41));
                                                _local_39 = ((_local_39 << 13) | (_local_39 >>> 19));
                                                _local_39 = ((_local_39 * 5) + -430675100);
                                                _local_43 = (_local_39 ^ _local_36);
                                                _local_43 = (_local_43 ^ (_local_43 >>> 16));
                                                _local_43 = (_local_43 * -2048144789);
                                                _local_43 = (_local_43 ^ (_local_43 >>> 13));
                                                _local_43 = (_local_43 * -1028477387);
                                                _local_38 = ((_local_43 ^ (_local_43 >>> 16)) & 0xFFFF);
                                                _local_37 = ((_local_35.addr + (_local_38 * 5)) + 1);
                                                _local_28 = li32(_local_37);
                                                if (((((_local_28 >= (0)) && (li32((_local_28 + _local_25) - 3) == li32((_local_23 + _local_25) - 3))) && (li32(_local_23) == li32(_local_28))) && ((_local_23 - _local_28) <= _local_35.windowSize)))
                                                {
                                                    _local_29 = (_local_23 + 4);
                                                    _local_27 = 4;
                                                    _local_28 = (_local_28 + 4);
                                                    while (((li32(_local_28) == (li32(_local_29))) && ((_local_27 + 4) <= _local_35.maxMatchLength)))
                                                    {
                                                        _local_27 = (_local_27 + 4);
                                                        _local_28 = (_local_28 + 4);
                                                        _local_29 = (_local_29 + 4);
                                                    };
                                                    while (((li8(_local_28) == (li8(_local_29))) && (_local_27 < _local_35.maxMatchLength)))
                                                    {
                                                        _local_27++;
                                                        _local_28++;
                                                        _local_29++;
                                                    };
                                                    if (_local_27 > _local_25)
                                                    {
                                                        _local_25 = _local_27;
                                                        _local_26 = _local_28;
                                                    };
                                                };
                                            };
                                            si32((((_local_23 - (_local_26 - _local_25)) << 16) | _local_25), _local_35.resultAddr);
                                            _local_25 = _local_24;
                                            _local_26 = 4;
                                            _local_27 = _local_23;
                                            _local_28 = li8(_local_25);
                                            if (((_local_28 < (8)) && (_local_28 >= 0)))
                                            {
                                                _local_29 = li32(_local_25 + 1);
                                                si8(_local_26, _local_25);
                                                si32(_local_27, (_local_25 + 1));
                                                _local_26 = (_local_28 + 1);
                                                _local_27 = _local_29;
                                                _local_31 = li32(_local_27);
                                                si32(_local_31, _local_35.hashScratchAddr);
                                                _local_31 = li32(_local_27 + 4);
                                                si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_26));
                                                _local_31 = 775236557;
                                                _local_36 = -862048943;
                                                _local_37 = 461845907;
                                                _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                _local_31 = ((_local_31 * 5) + -430675100);
                                                _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                _local_31 = ((_local_31 * 5) + -430675100);
                                                _local_39 = (_local_31 ^ _local_26);
                                                _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                _local_39 = (_local_39 * -2048144789);
                                                _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                _local_39 = (_local_39 * -1028477387);
                                                _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                _local_25 = (_local_35.addr + (_local_30 * 5));
                                                _local_28 = li8(_local_25);
                                                if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                {
                                                    _local_29 = li32(_local_25 + 1);
                                                    si8(_local_26, _local_25);
                                                    si32(_local_27, (_local_25 + 1));
                                                    _local_26 = (_local_28 + 1);
                                                    _local_27 = _local_29;
                                                    _local_31 = li32(_local_27);
                                                    si32(_local_31, _local_35.hashScratchAddr);
                                                    _local_31 = li32(_local_27 + 4);
                                                    si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_26));
                                                    _local_31 = 775236557;
                                                    _local_36 = -862048943;
                                                    _local_37 = 461845907;
                                                    _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                    _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                    _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                    _local_31 = ((_local_31 * 5) + -430675100);
                                                    _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                    _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                    _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                    _local_31 = ((_local_31 * 5) + -430675100);
                                                    _local_39 = (_local_31 ^ _local_26);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                    _local_39 = (_local_39 * -2048144789);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                    _local_39 = (_local_39 * -1028477387);
                                                    _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                    _local_25 = (_local_35.addr + (_local_30 * 5));
                                                    _local_28 = li8(_local_25);
                                                    if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                    {
                                                        _local_29 = li32(_local_25 + 1);
                                                        si8(_local_26, _local_25);
                                                        si32(_local_27, (_local_25 + 1));
                                                        _local_26 = (_local_28 + 1);
                                                        _local_27 = _local_29;
                                                        _local_31 = li32(_local_27);
                                                        si32(_local_31, _local_35.hashScratchAddr);
                                                        _local_31 = li32(_local_27 + 4);
                                                        si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                        si32(0, (_local_35.hashScratchAddr + _local_26));
                                                        _local_31 = 775236557;
                                                        _local_36 = -862048943;
                                                        _local_37 = 461845907;
                                                        _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                        _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                        _local_31 = ((_local_31 * 5) + -430675100);
                                                        _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                        _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                        _local_31 = ((_local_31 * 5) + -430675100);
                                                        _local_39 = (_local_31 ^ _local_26);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                        _local_39 = (_local_39 * -2048144789);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                        _local_39 = (_local_39 * -1028477387);
                                                        _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                        _local_25 = (_local_35.addr + (_local_30 * 5));
                                                        _local_28 = li8(_local_25);
                                                        if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                        {
                                                            _local_29 = li32(_local_25 + 1);
                                                            si8(_local_26, _local_25);
                                                            si32(_local_27, (_local_25 + 1));
                                                            _local_26 = (_local_28 + 1);
                                                            _local_27 = _local_29;
                                                            _local_31 = li32(_local_27);
                                                            si32(_local_31, _local_35.hashScratchAddr);
                                                            _local_31 = li32(_local_27 + 4);
                                                            si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                            si32(0, (_local_35.hashScratchAddr + _local_26));
                                                            _local_31 = 775236557;
                                                            _local_36 = -862048943;
                                                            _local_37 = 461845907;
                                                            _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                            _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                            _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                            _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                            _local_31 = ((_local_31 * 5) + -430675100);
                                                            _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                            _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                            _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                            _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                            _local_31 = ((_local_31 * 5) + -430675100);
                                                            _local_39 = (_local_31 ^ _local_26);
                                                            _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                            _local_39 = (_local_39 * -2048144789);
                                                            _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                            _local_39 = (_local_39 * -1028477387);
                                                            _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                            _local_25 = (_local_35.addr + (_local_30 * 5));
                                                        };
                                                    };
                                                };
                                            };
                                            si8(_local_26, _local_25);
                                            si32(_local_27, (_local_25 + 1));
                                            _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                        };
                                    };
                                    if (li16(_local_35.resultAddr) >= 4)
                                    {
                                        _local_14 = li16(_local_35.resultAddr);
                                        _local_21 = li16(((scratchAddr + 2492) + (_local_14 << 2)) + 2);
                                        _local_22 = 0;
                                        _local_23 = ((scratchAddr + _local_22) + (_local_21 << 2));
                                        _local_24 = (li32(_local_23) + 1);
                                        si32(_local_24, _local_23);
                                        _local_21 = li16(_local_35.resultAddr + 2);
                                        _local_15 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                        _local_21 = ((scratchAddr + 1144) + ((_local_15 >>> 24) << 2));
                                        _local_22 = (li32(_local_21) + 1);
                                        si32(_local_22, _local_21);
                                        _local_21 = (li32(_local_35.resultAddr) | 0x0200);
                                        si32(_local_21, _local_20);
                                        _local_20 = (_local_20 + 4);
                                        _local_16 = (_local_16 + _local_14);
                                    }
                                    else
                                    {
                                        _local_13 = li8(_local_16);
                                        si16(_local_13, _local_20);
                                        _local_21 = 0;
                                        _local_22 = ((scratchAddr + _local_21) + (_local_13 << 2));
                                        _local_23 = (li32(_local_22) + 1);
                                        si32(_local_23, _local_22);
                                        _local_20 = (_local_20 + 2);
                                        _local_16++;
                                    };
                                };
                                while (_local_16 < _local_10)
                                {
                                    _local_24 = 775236557;
                                    _local_25 = -862048943;
                                    _local_26 = 461845907;
                                    _local_27 = (li32(_local_16 + 1) * _local_25);
                                    _local_27 = ((_local_27 << 15) | (_local_27 >>> 17));
                                    _local_24 = (_local_24 ^ (_local_27 * _local_26));
                                    _local_24 = ((_local_24 << 13) | (_local_24 >>> 19));
                                    _local_24 = ((_local_24 * 5) + -430675100);
                                    _local_28 = (_local_24 ^ 0x04);
                                    _local_28 = (_local_28 ^ (_local_28 >>> 16));
                                    _local_28 = (_local_28 * -2048144789);
                                    _local_28 = (_local_28 ^ (_local_28 >>> 13));
                                    _local_28 = (_local_28 * -1028477387);
                                    _local_23 = ((_local_28 ^ (_local_28 >>> 16)) & 0xFFFF);
                                    _local_22 = (_local_35.addr + (_local_23 * 5));
                                    if (li16(_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07)) < (_local_35.avgMatchLength + 4))
                                    {
                                        _local_23 = (_local_16 + 1);
                                        _local_24 = 3;
                                        _local_25 = -1;
                                        _local_27 = li32(_local_22 + 1);
                                        if ((((_local_27 >= (0)) && (li32(_local_23) == li32(_local_27))) && ((_local_23 - _local_27) <= _local_35.windowSize)))
                                        {
                                            _local_28 = (_local_23 + 4);
                                            _local_26 = 4;
                                            _local_27 = (_local_27 + 4);
                                            while (((((_local_28 + 4) <= (_local_5)) && (li32(_local_27) == li32(_local_28))) && ((_local_26 + 4) <= _local_35.maxMatchLength)))
                                            {
                                                _local_26 = (_local_26 + 4);
                                                _local_27 = (_local_27 + 4);
                                                _local_28 = (_local_28 + 4);
                                            };
                                            while ((((_local_28 < (_local_5)) && (li8(_local_27) == li8(_local_28))) && (_local_26 < _local_35.maxMatchLength)))
                                            {
                                                _local_26++;
                                                _local_27++;
                                                _local_28++;
                                            };
                                            _local_24 = _local_26;
                                            _local_25 = _local_27;
                                        };
                                        _local_29 = 5;
                                        _local_30 = 9;
                                        while (_local_29 < _local_30)
                                        {
                                            _local_31 = _local_29++;
                                            _local_38 = li32(_local_23);
                                            si32(_local_38, _local_35.hashScratchAddr);
                                            _local_38 = li32(_local_23 + 4);
                                            si32(_local_38, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_31));
                                            _local_38 = 775236557;
                                            _local_39 = -862048943;
                                            _local_40 = 461845907;
                                            _local_41 = (li32(_local_35.hashScratchAddr) * _local_39);
                                            _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                            _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                            _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                            _local_38 = ((_local_38 * 5) + -430675100);
                                            _local_41 = (li32(_local_35.hashScratchAddr + 4) * _local_39);
                                            _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                            _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                            _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                            _local_38 = ((_local_38 * 5) + -430675100);
                                            _local_42 = (_local_38 ^ _local_31);
                                            _local_42 = (_local_42 ^ (_local_42 >>> 16));
                                            _local_42 = (_local_42 * -2048144789);
                                            _local_42 = (_local_42 ^ (_local_42 >>> 13));
                                            _local_42 = (_local_42 * -1028477387);
                                            _local_37 = ((_local_42 ^ (_local_42 >>> 16)) & 0xFFFF);
                                            _local_36 = ((_local_35.addr + (_local_37 * 5)) + 1);
                                            _local_27 = li32(_local_36);
                                            if ((((_local_27 >= (0)) && (li32(_local_23) == li32(_local_27))) && ((_local_23 - _local_27) <= _local_35.windowSize)))
                                            {
                                                _local_28 = (_local_23 + 4);
                                                _local_26 = 4;
                                                _local_27 = (_local_27 + 4);
                                                while (((((_local_28 + 4) <= (_local_5)) && (li32(_local_27) == li32(_local_28))) && ((_local_26 + 4) <= _local_35.maxMatchLength)))
                                                {
                                                    _local_26 = (_local_26 + 4);
                                                    _local_27 = (_local_27 + 4);
                                                    _local_28 = (_local_28 + 4);
                                                };
                                                while ((((_local_28 < (_local_5)) && (li8(_local_27) == li8(_local_28))) && (_local_26 < _local_35.maxMatchLength)))
                                                {
                                                    _local_26++;
                                                    _local_27++;
                                                    _local_28++;
                                                };
                                                if (_local_26 > _local_24)
                                                {
                                                    _local_24 = _local_26;
                                                    _local_25 = _local_27;
                                                };
                                            };
                                        };
                                        si32((((_local_23 - (_local_25 - _local_24)) << 16) | _local_24), _local_35.resultAddr);
                                    }
                                    else
                                    {
                                        si32(0, _local_35.resultAddr);
                                    };
                                    _local_23 = _local_22;
                                    _local_24 = 4;
                                    _local_25 = (_local_16 + 1);
                                    _local_26 = li8(_local_23);
                                    if (((_local_26 < (8)) && (_local_26 >= 0)))
                                    {
                                        _local_27 = li32(_local_23 + 1);
                                        si8(_local_24, _local_23);
                                        si32(_local_25, (_local_23 + 1));
                                        _local_24 = (_local_26 + 1);
                                        _local_25 = _local_27;
                                        _local_29 = li32(_local_25);
                                        si32(_local_29, _local_35.hashScratchAddr);
                                        _local_29 = li32(_local_25 + 4);
                                        si32(_local_29, (_local_35.hashScratchAddr + 4));
                                        si32(0, (_local_35.hashScratchAddr + _local_24));
                                        _local_29 = 775236557;
                                        _local_30 = -862048943;
                                        _local_31 = 461845907;
                                        _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                        _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                        _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_37 = (_local_29 ^ _local_24);
                                        _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                        _local_37 = (_local_37 * -2048144789);
                                        _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                        _local_37 = (_local_37 * -1028477387);
                                        _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                        _local_23 = (_local_35.addr + (_local_28 * 5));
                                        _local_26 = li8(_local_23);
                                        if (((_local_26 < (8)) && (_local_26 >= 0)))
                                        {
                                            _local_27 = li32(_local_23 + 1);
                                            si8(_local_24, _local_23);
                                            si32(_local_25, (_local_23 + 1));
                                            _local_24 = (_local_26 + 1);
                                            _local_25 = _local_27;
                                            _local_29 = li32(_local_25);
                                            si32(_local_29, _local_35.hashScratchAddr);
                                            _local_29 = li32(_local_25 + 4);
                                            si32(_local_29, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_24));
                                            _local_29 = 775236557;
                                            _local_30 = -862048943;
                                            _local_31 = 461845907;
                                            _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                            _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                            _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_37 = (_local_29 ^ _local_24);
                                            _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                            _local_37 = (_local_37 * -2048144789);
                                            _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                            _local_37 = (_local_37 * -1028477387);
                                            _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                            _local_23 = (_local_35.addr + (_local_28 * 5));
                                            _local_26 = li8(_local_23);
                                            if (((_local_26 < (8)) && (_local_26 >= 0)))
                                            {
                                                _local_27 = li32(_local_23 + 1);
                                                si8(_local_24, _local_23);
                                                si32(_local_25, (_local_23 + 1));
                                                _local_24 = (_local_26 + 1);
                                                _local_25 = _local_27;
                                                _local_29 = li32(_local_25);
                                                si32(_local_29, _local_35.hashScratchAddr);
                                                _local_29 = li32(_local_25 + 4);
                                                si32(_local_29, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_24));
                                                _local_29 = 775236557;
                                                _local_30 = -862048943;
                                                _local_31 = 461845907;
                                                _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                                _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                _local_29 = ((_local_29 * 5) + -430675100);
                                                _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                                _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                _local_29 = ((_local_29 * 5) + -430675100);
                                                _local_37 = (_local_29 ^ _local_24);
                                                _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                                _local_37 = (_local_37 * -2048144789);
                                                _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                                _local_37 = (_local_37 * -1028477387);
                                                _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                                _local_23 = (_local_35.addr + (_local_28 * 5));
                                                _local_26 = li8(_local_23);
                                                if (((_local_26 < (8)) && (_local_26 >= 0)))
                                                {
                                                    _local_27 = li32(_local_23 + 1);
                                                    si8(_local_24, _local_23);
                                                    si32(_local_25, (_local_23 + 1));
                                                    _local_24 = (_local_26 + 1);
                                                    _local_25 = _local_27;
                                                    _local_29 = li32(_local_25);
                                                    si32(_local_29, _local_35.hashScratchAddr);
                                                    _local_29 = li32(_local_25 + 4);
                                                    si32(_local_29, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_24));
                                                    _local_29 = 775236557;
                                                    _local_30 = -862048943;
                                                    _local_31 = 461845907;
                                                    _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                                    _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                    _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                    _local_29 = ((_local_29 * 5) + -430675100);
                                                    _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                                    _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                    _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                    _local_29 = ((_local_29 * 5) + -430675100);
                                                    _local_37 = (_local_29 ^ _local_24);
                                                    _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                                    _local_37 = (_local_37 * -2048144789);
                                                    _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                                    _local_37 = (_local_37 * -1028477387);
                                                    _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                                    _local_23 = (_local_35.addr + (_local_28 * 5));
                                                };
                                            };
                                        };
                                    };
                                    si8(_local_24, _local_23);
                                    si32(_local_25, (_local_23 + 1));
                                    _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                    if (li16(_local_35.resultAddr) >= 4)
                                    {
                                        _local_21 = li16(_local_35.resultAddr);
                                        if (li16(_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07)) > _local_21)
                                        {
                                            si32(0, _local_35.resultAddr);
                                        }
                                        else
                                        {
                                            if (((_local_16 + _local_21) + 9) < _local_5)
                                            {
                                                if (_local_21 < (_local_35.avgMatchLength + 4))
                                                {
                                                    _local_23 = ((_local_16 + 1) + 1);
                                                    _local_24 = (_local_16 + _local_21);
                                                    while (_local_23 < _local_24)
                                                    {
                                                        _local_25 = _local_23++;
                                                        _local_26 = 4;
                                                        _local_27 = _local_25;
                                                        _local_36 = 775236557;
                                                        _local_37 = -862048943;
                                                        _local_38 = 461845907;
                                                        _local_39 = (li32(_local_25) * _local_37);
                                                        _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                        _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                        _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                        _local_36 = ((_local_36 * 5) + -430675100);
                                                        _local_40 = (_local_36 ^ 0x04);
                                                        _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                        _local_40 = (_local_40 * -2048144789);
                                                        _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                        _local_40 = (_local_40 * -1028477387);
                                                        _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                        _local_30 = (_local_35.addr + (_local_31 * 5));
                                                        _local_28 = li8(_local_30);
                                                        if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                        {
                                                            _local_29 = li32(_local_30 + 1);
                                                            si8(_local_26, _local_30);
                                                            si32(_local_27, (_local_30 + 1));
                                                            _local_26 = (_local_28 + 1);
                                                            _local_27 = _local_29;
                                                            _local_36 = li32(_local_27);
                                                            si32(_local_36, _local_35.hashScratchAddr);
                                                            _local_36 = li32(_local_27 + 4);
                                                            si32(_local_36, (_local_35.hashScratchAddr + 4));
                                                            si32(0, (_local_35.hashScratchAddr + _local_26));
                                                            _local_36 = 775236557;
                                                            _local_37 = -862048943;
                                                            _local_38 = 461845907;
                                                            _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                            _local_36 = ((_local_36 * 5) + -430675100);
                                                            _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                            _local_36 = ((_local_36 * 5) + -430675100);
                                                            _local_40 = (_local_36 ^ _local_26);
                                                            _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                            _local_40 = (_local_40 * -2048144789);
                                                            _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                            _local_40 = (_local_40 * -1028477387);
                                                            _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                            _local_30 = (_local_35.addr + (_local_31 * 5));
                                                            _local_28 = li8(_local_30);
                                                            if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                            {
                                                                _local_29 = li32(_local_30 + 1);
                                                                si8(_local_26, _local_30);
                                                                si32(_local_27, (_local_30 + 1));
                                                                _local_26 = (_local_28 + 1);
                                                                _local_27 = _local_29;
                                                                _local_36 = li32(_local_27);
                                                                si32(_local_36, _local_35.hashScratchAddr);
                                                                _local_36 = li32(_local_27 + 4);
                                                                si32(_local_36, (_local_35.hashScratchAddr + 4));
                                                                si32(0, (_local_35.hashScratchAddr + _local_26));
                                                                _local_36 = 775236557;
                                                                _local_37 = -862048943;
                                                                _local_38 = 461845907;
                                                                _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                                                _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                                _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                                _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                                _local_36 = ((_local_36 * 5) + -430675100);
                                                                _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                                                _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                                _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                                _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                                _local_36 = ((_local_36 * 5) + -430675100);
                                                                _local_40 = (_local_36 ^ _local_26);
                                                                _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                                _local_40 = (_local_40 * -2048144789);
                                                                _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                                _local_40 = (_local_40 * -1028477387);
                                                                _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                                _local_30 = (_local_35.addr + (_local_31 * 5));
                                                            };
                                                        };
                                                        si8(_local_26, _local_30);
                                                        si32(_local_27, (_local_30 + 1));
                                                    };
                                                };
                                                _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                                _local_23 = (_local_16 + _local_21);
                                                _local_26 = 775236557;
                                                _local_27 = -862048943;
                                                _local_28 = 461845907;
                                                _local_29 = (li32(_local_23) * _local_27);
                                                _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                                _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                                _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                                _local_26 = ((_local_26 * 5) + -430675100);
                                                _local_30 = (_local_26 ^ 0x04);
                                                _local_30 = (_local_30 ^ (_local_30 >>> 16));
                                                _local_30 = (_local_30 * -2048144789);
                                                _local_30 = (_local_30 ^ (_local_30 >>> 13));
                                                _local_30 = (_local_30 * -1028477387);
                                                _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                                                _local_24 = (_local_35.addr + (_local_25 * 5));
                                                _local_25 = 3;
                                                _local_26 = -1;
                                                _local_28 = li32(_local_24 + 1);
                                                if ((((_local_28 >= (0)) && (li32(_local_23) == li32(_local_28))) && ((_local_23 - _local_28) <= _local_35.windowSize)))
                                                {
                                                    _local_29 = (_local_23 + 4);
                                                    _local_27 = 4;
                                                    _local_28 = (_local_28 + 4);
                                                    while (((((_local_29 + 4) <= (_local_5)) && (li32(_local_28) == li32(_local_29))) && ((_local_27 + 4) <= _local_35.maxMatchLength)))
                                                    {
                                                        _local_27 = (_local_27 + 4);
                                                        _local_28 = (_local_28 + 4);
                                                        _local_29 = (_local_29 + 4);
                                                    };
                                                    while ((((_local_29 < (_local_5)) && (li8(_local_28) == li8(_local_29))) && (_local_27 < _local_35.maxMatchLength)))
                                                    {
                                                        _local_27++;
                                                        _local_28++;
                                                        _local_29++;
                                                    };
                                                    _local_25 = _local_27;
                                                    _local_26 = _local_28;
                                                };
                                                _local_30 = 5;
                                                _local_31 = 9;
                                                while (_local_30 < _local_31)
                                                {
                                                    _local_36 = _local_30++;
                                                    _local_39 = li32(_local_23);
                                                    si32(_local_39, _local_35.hashScratchAddr);
                                                    _local_39 = li32(_local_23 + 4);
                                                    si32(_local_39, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_36));
                                                    _local_39 = 775236557;
                                                    _local_40 = -862048943;
                                                    _local_41 = 461845907;
                                                    _local_42 = (li32(_local_35.hashScratchAddr) * _local_40);
                                                    _local_42 = ((_local_42 << 15) | (_local_42 >>> 17));
                                                    _local_39 = (_local_39 ^ (_local_42 * _local_41));
                                                    _local_39 = ((_local_39 << 13) | (_local_39 >>> 19));
                                                    _local_39 = ((_local_39 * 5) + -430675100);
                                                    _local_42 = (li32(_local_35.hashScratchAddr + 4) * _local_40);
                                                    _local_42 = ((_local_42 << 15) | (_local_42 >>> 17));
                                                    _local_39 = (_local_39 ^ (_local_42 * _local_41));
                                                    _local_39 = ((_local_39 << 13) | (_local_39 >>> 19));
                                                    _local_39 = ((_local_39 * 5) + -430675100);
                                                    _local_43 = (_local_39 ^ _local_36);
                                                    _local_43 = (_local_43 ^ (_local_43 >>> 16));
                                                    _local_43 = (_local_43 * -2048144789);
                                                    _local_43 = (_local_43 ^ (_local_43 >>> 13));
                                                    _local_43 = (_local_43 * -1028477387);
                                                    _local_38 = ((_local_43 ^ (_local_43 >>> 16)) & 0xFFFF);
                                                    _local_37 = ((_local_35.addr + (_local_38 * 5)) + 1);
                                                    _local_28 = li32(_local_37);
                                                    if ((((_local_28 >= (0)) && (li32(_local_23) == li32(_local_28))) && ((_local_23 - _local_28) <= _local_35.windowSize)))
                                                    {
                                                        _local_29 = (_local_23 + 4);
                                                        _local_27 = 4;
                                                        _local_28 = (_local_28 + 4);
                                                        while (((((_local_29 + 4) <= (_local_5)) && (li32(_local_28) == li32(_local_29))) && ((_local_27 + 4) <= _local_35.maxMatchLength)))
                                                        {
                                                            _local_27 = (_local_27 + 4);
                                                            _local_28 = (_local_28 + 4);
                                                            _local_29 = (_local_29 + 4);
                                                        };
                                                        while ((((_local_29 < (_local_5)) && (li8(_local_28) == li8(_local_29))) && (_local_27 < _local_35.maxMatchLength)))
                                                        {
                                                            _local_27++;
                                                            _local_28++;
                                                            _local_29++;
                                                        };
                                                        if (_local_27 > _local_25)
                                                        {
                                                            _local_25 = _local_27;
                                                            _local_26 = _local_28;
                                                        };
                                                    };
                                                };
                                                si32((((_local_23 - (_local_26 - _local_25)) << 16) | _local_25), _local_35.resultAddr);
                                                _local_25 = _local_24;
                                                _local_26 = 4;
                                                _local_27 = _local_23;
                                                _local_28 = li8(_local_25);
                                                if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                {
                                                    _local_29 = li32(_local_25 + 1);
                                                    si8(_local_26, _local_25);
                                                    si32(_local_27, (_local_25 + 1));
                                                    _local_26 = (_local_28 + 1);
                                                    _local_27 = _local_29;
                                                    _local_31 = li32(_local_27);
                                                    si32(_local_31, _local_35.hashScratchAddr);
                                                    _local_31 = li32(_local_27 + 4);
                                                    si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_26));
                                                    _local_31 = 775236557;
                                                    _local_36 = -862048943;
                                                    _local_37 = 461845907;
                                                    _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                    _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                    _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                    _local_31 = ((_local_31 * 5) + -430675100);
                                                    _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                    _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                    _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                    _local_31 = ((_local_31 * 5) + -430675100);
                                                    _local_39 = (_local_31 ^ _local_26);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                    _local_39 = (_local_39 * -2048144789);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                    _local_39 = (_local_39 * -1028477387);
                                                    _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                    _local_25 = (_local_35.addr + (_local_30 * 5));
                                                    _local_28 = li8(_local_25);
                                                    if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                    {
                                                        _local_29 = li32(_local_25 + 1);
                                                        si8(_local_26, _local_25);
                                                        si32(_local_27, (_local_25 + 1));
                                                        _local_26 = (_local_28 + 1);
                                                        _local_27 = _local_29;
                                                        _local_31 = li32(_local_27);
                                                        si32(_local_31, _local_35.hashScratchAddr);
                                                        _local_31 = li32(_local_27 + 4);
                                                        si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                        si32(0, (_local_35.hashScratchAddr + _local_26));
                                                        _local_31 = 775236557;
                                                        _local_36 = -862048943;
                                                        _local_37 = 461845907;
                                                        _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                        _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                        _local_31 = ((_local_31 * 5) + -430675100);
                                                        _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                        _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                        _local_31 = ((_local_31 * 5) + -430675100);
                                                        _local_39 = (_local_31 ^ _local_26);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                        _local_39 = (_local_39 * -2048144789);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                        _local_39 = (_local_39 * -1028477387);
                                                        _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                        _local_25 = (_local_35.addr + (_local_30 * 5));
                                                        _local_28 = li8(_local_25);
                                                        if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                        {
                                                            _local_29 = li32(_local_25 + 1);
                                                            si8(_local_26, _local_25);
                                                            si32(_local_27, (_local_25 + 1));
                                                            _local_26 = (_local_28 + 1);
                                                            _local_27 = _local_29;
                                                            _local_31 = li32(_local_27);
                                                            si32(_local_31, _local_35.hashScratchAddr);
                                                            _local_31 = li32(_local_27 + 4);
                                                            si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                            si32(0, (_local_35.hashScratchAddr + _local_26));
                                                            _local_31 = 775236557;
                                                            _local_36 = -862048943;
                                                            _local_37 = 461845907;
                                                            _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                            _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                            _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                            _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                            _local_31 = ((_local_31 * 5) + -430675100);
                                                            _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                            _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                            _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                            _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                            _local_31 = ((_local_31 * 5) + -430675100);
                                                            _local_39 = (_local_31 ^ _local_26);
                                                            _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                            _local_39 = (_local_39 * -2048144789);
                                                            _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                            _local_39 = (_local_39 * -1028477387);
                                                            _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                            _local_25 = (_local_35.addr + (_local_30 * 5));
                                                            _local_28 = li8(_local_25);
                                                            if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                            {
                                                                _local_29 = li32(_local_25 + 1);
                                                                si8(_local_26, _local_25);
                                                                si32(_local_27, (_local_25 + 1));
                                                                _local_26 = (_local_28 + 1);
                                                                _local_27 = _local_29;
                                                                _local_31 = li32(_local_27);
                                                                si32(_local_31, _local_35.hashScratchAddr);
                                                                _local_31 = li32(_local_27 + 4);
                                                                si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                                si32(0, (_local_35.hashScratchAddr + _local_26));
                                                                _local_31 = 775236557;
                                                                _local_36 = -862048943;
                                                                _local_37 = 461845907;
                                                                _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                                _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                                _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                                _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                                _local_31 = ((_local_31 * 5) + -430675100);
                                                                _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                                _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                                _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                                _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                                _local_31 = ((_local_31 * 5) + -430675100);
                                                                _local_39 = (_local_31 ^ _local_26);
                                                                _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                                _local_39 = (_local_39 * -2048144789);
                                                                _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                                _local_39 = (_local_39 * -1028477387);
                                                                _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                                _local_25 = (_local_35.addr + (_local_30 * 5));
                                                            };
                                                        };
                                                    };
                                                };
                                                si8(_local_26, _local_25);
                                                si32(_local_27, (_local_25 + 1));
                                                _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                            };
                                        };
                                    };
                                    if (li16(_local_35.resultAddr) >= 4)
                                    {
                                        _local_14 = li16(_local_35.resultAddr);
                                        _local_21 = li16(((scratchAddr + 2492) + (_local_14 << 2)) + 2);
                                        _local_22 = 0;
                                        _local_23 = ((scratchAddr + _local_22) + (_local_21 << 2));
                                        _local_24 = (li32(_local_23) + 1);
                                        si32(_local_24, _local_23);
                                        _local_21 = li16(_local_35.resultAddr + 2);
                                        _local_15 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                        _local_21 = ((scratchAddr + 1144) + ((_local_15 >>> 24) << 2));
                                        _local_22 = (li32(_local_21) + 1);
                                        si32(_local_22, _local_21);
                                        _local_21 = (li32(_local_35.resultAddr) | 0x0200);
                                        si32(_local_21, _local_20);
                                        _local_20 = (_local_20 + 4);
                                        _local_16 = (_local_16 + _local_14);
                                    }
                                    else
                                    {
                                        _local_13 = li8(_local_16);
                                        si16(_local_13, _local_20);
                                        _local_21 = 0;
                                        _local_22 = ((scratchAddr + _local_21) + (_local_13 << 2));
                                        _local_23 = (li32(_local_22) + 1);
                                        si32(_local_23, _local_22);
                                        _local_20 = (_local_20 + 2);
                                        _local_16++;
                                    };
                                };
                                while (_local_16 < _local_5)
                                {
                                    _local_13 = li8(_local_16);
                                    si16(_local_13, _local_20);
                                    _local_21 = 0;
                                    _local_22 = ((scratchAddr + _local_21) + (_local_13 << 2));
                                    _local_23 = (li32(_local_22) + 1);
                                    si32(_local_23, _local_22);
                                    _local_20 = (_local_20 + 2);
                                    _local_16++;
                                };
                                _local_12 = false;
                                blockInProgress = true;
                                if (level == CompressionLevel.UNCOMPRESSED)
                                {
                                    if (bitOffset == 0)
                                    {
                                        si8(0, currentAddr);
                                    };
                                    _local_21 = li8(currentAddr);
                                    _local_21 = (_local_21 | (((_local_12) ? 1 : 0) << bitOffset));
                                    si32(_local_21, currentAddr);
                                    bitOffset = (bitOffset + 3);
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    if (bitOffset > 0)
                                    {
                                        _local_21 = li8(currentAddr);
                                        _local_21 = (_local_21 | (0 << bitOffset));
                                        si32(_local_21, currentAddr);
                                        bitOffset = (bitOffset + (8 - bitOffset));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                }
                                else
                                {
                                    _local_21 = li8(currentAddr);
                                    _local_21 = (_local_21 | ((0x04 | ((_local_12) ? 1 : 0)) << bitOffset));
                                    si32(_local_21, currentAddr);
                                    bitOffset = (bitOffset + 3);
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                blockStartAddr = currentAddr;
                                createAndWriteHuffmanTrees(_local_4, _local_5);
                                _local_16 = _local_18;
                                while ((_local_16 + 64) <= _local_20)
                                {
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                };
                                while (_local_16 < _local_20)
                                {
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                };
                                if (level != CompressionLevel.UNCOMPRESSED)
                                {
                                    _local_21 = 0;
                                    _local_22 = li32((scratchAddr + _local_21) + 0x0400);
                                    _local_23 = li8(currentAddr);
                                    _local_23 = (_local_23 | ((_local_22 >>> 16) << bitOffset));
                                    si32(_local_23, currentAddr);
                                    bitOffset = (bitOffset + (_local_22 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                blockInProgress = false;
                                _local_4 = _local_5;
                            };
                        }
                        else
                        {
                            throw (new Error("Compression level not supported"));
                        };
                    };
                };
            };
        }

        public function fastNew(_arg_1:CompressionLevel, _arg_2:Boolean, _arg_3:int, _arg_4:int):void
        {
            var _local_7:int;
            var _local_8:int;
            var _local_9:int;
            var _local_10:int;
            var _local_11:int;
            var _local_12:int;
            var _local_13:int;
            var _local_14:int;
            var _local_15:int;
            var _local_16:int;
            level = _arg_1;
            zlib = _arg_2;
            scratchAddr = _arg_3;
            startAddr = _arg_4;
            currentAddr = _arg_4;
            rangeResult = new MemoryRange(0, 0);
            HuffmanTree.scratchAddr = (_arg_3 + 1348);
            var _local_5:ByteArray = ApplicationDomain.currentDomain.domainMemory;
            var _local_6:uint = (_arg_4 + 15);
            if (_local_5.length < _local_6)
            {
                _local_5.length = _local_6;
                ApplicationDomain.currentDomain.domainMemory = _local_5;
            };
            distanceCodes = -1;
            blockInProgress = false;
            blockStartAddr = currentAddr;
            bitOffset = 0;
            s1 = 1;
            s2 = 0;
            if (zlib)
            {
                si8(120, currentAddr);
                currentAddr = (currentAddr + 1);
                si8(156, currentAddr);
                currentAddr = (currentAddr + 1);
            };
            if (((level == (CompressionLevel.NORMAL)) || (level == CompressionLevel.GOOD)))
            {
                _local_7 = (scratchAddr + 2492);
                si32(16842755, (_local_7 + 12));
                si32(16908292, (_local_7 + 16));
                si32(16973829, (_local_7 + 20));
                si32(17039366, (_local_7 + 24));
                si32(17104903, (_local_7 + 28));
                si32(17170440, (_local_7 + 32));
                si32(17235977, (_local_7 + 36));
                si32(17301514, (_local_7 + 40));
                _local_8 = 11;
                _local_9 = 265;
                _local_10 = 1;
                while (_local_10 < 6)
                {
                    _local_11 = _local_10++;
                    _local_12 = 0;
                    while (_local_12 < 4)
                    {
                        _local_13 = _local_12++;
                        _local_14 = _local_8;
                        _local_15 = (_local_8 + (1 << _local_11));
                        while (_local_14 < _local_15)
                        {
                            _local_16 = _local_14++;
                            si32((((_local_9 << 16) | (_local_11 << 13)) | _local_8), (_local_7 + (_local_16 * 4)));
                        };
                        _local_8 = (_local_8 + (1 << _local_11));
                        _local_9++;
                    };
                };
                si32(18678018, (_local_7 + 1032));
                _local_7 = (scratchAddr + 3528);
                si32(1, (_local_7 + 4));
                si32(16777218, (_local_7 + 8));
                si32(33554435, (_local_7 + 12));
                si32(50331652, (_local_7 + 16));
                _local_8 = 5;
                _local_9 = 4;
                _local_10 = 1;
                while (_local_10 < 7)
                {
                    _local_11 = _local_10++;
                    _local_12 = 0;
                    while (_local_12 < 2)
                    {
                        _local_13 = _local_12++;
                        _local_14 = _local_8;
                        _local_15 = (_local_8 + (1 << _local_11));
                        while (_local_14 < _local_15)
                        {
                            _local_16 = _local_14++;
                            si32((((_local_9 << 24) | (_local_11 << 16)) | _local_8), (_local_7 + (_local_16 * 4)));
                        };
                        _local_8 = (_local_8 + (1 << _local_11));
                        _local_9++;
                    };
                };
                _local_7 = (_local_7 + 0x0400);
                _local_10 = 7;
                while (_local_10 < 14)
                {
                    _local_11 = _local_10++;
                    _local_12 = 0;
                    while (_local_12 < 2)
                    {
                        _local_13 = _local_12++;
                        _local_14 = (_local_8 >>> 7);
                        _local_15 = ((_local_8 >>> 7) + (1 << (_local_11 - 7)));
                        while (_local_14 < _local_15)
                        {
                            _local_16 = _local_14++;
                            si32((((_local_9 << 24) | (_local_11 << 16)) | _local_8), (_local_7 + (_local_16 * 4)));
                        };
                        _local_8 = (_local_8 + (1 << _local_11));
                        _local_9++;
                    };
                };
            };
            si8(0, currentAddr);
        }

        public function fastFinalize():MemoryRange
        {
            var _local_1:int;
            var _local_2:int;
            var _local_3:int;
            if (blockInProgress)
            {
                if (level != CompressionLevel.UNCOMPRESSED)
                {
                    _local_1 = 0;
                    _local_2 = li32((scratchAddr + _local_1) + 0x0400);
                    _local_3 = li8(currentAddr);
                    _local_3 = (_local_3 | ((_local_2 >>> 16) << bitOffset));
                    si32(_local_3, currentAddr);
                    bitOffset = (bitOffset + (_local_2 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
                blockInProgress = false;
            };
            if (blockInProgress)
            {
                if (level != CompressionLevel.UNCOMPRESSED)
                {
                    _local_1 = 0;
                    _local_2 = li32((scratchAddr + _local_1) + 0x0400);
                    _local_3 = li8(currentAddr);
                    _local_3 = (_local_3 | ((_local_2 >>> 16) << bitOffset));
                    si32(_local_3, currentAddr);
                    bitOffset = (bitOffset + (_local_2 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
                blockInProgress = false;
            };
            var _local_4:CompressionLevel = level;
            level = CompressionLevel.UNCOMPRESSED;
            blockInProgress = true;
            if (level == CompressionLevel.UNCOMPRESSED)
            {
                if (bitOffset == 0)
                {
                    si8(0, currentAddr);
                };
                _local_1 = li8(currentAddr);
                _local_1 = (_local_1 | (1 << bitOffset));
                si32(_local_1, currentAddr);
                bitOffset = (bitOffset + 3);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
                if (bitOffset > 0)
                {
                    _local_1 = li8(currentAddr);
                    _local_1 = (_local_1 | (0 << bitOffset));
                    si32(_local_1, currentAddr);
                    bitOffset = (bitOffset + (8 - bitOffset));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
            }
            else
            {
                _local_1 = li8(currentAddr);
                _local_1 = (_local_1 | (5 << bitOffset));
                si32(_local_1, currentAddr);
                bitOffset = (bitOffset + 3);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            blockStartAddr = currentAddr;
            si16(0, currentAddr);
            currentAddr = (currentAddr + 2);
            si16(-1, currentAddr);
            currentAddr = (currentAddr + 2);
            if (level != CompressionLevel.UNCOMPRESSED)
            {
                _local_1 = 0;
                _local_2 = li32((scratchAddr + _local_1) + 0x0400);
                _local_3 = li8(currentAddr);
                _local_3 = (_local_3 | ((_local_2 >>> 16) << bitOffset));
                si32(_local_3, currentAddr);
                bitOffset = (bitOffset + (_local_2 & 0xFFFF));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            blockInProgress = false;
            level = _local_4;
            if (bitOffset > 0)
            {
                currentAddr = (currentAddr + 1);
            };
            if (zlib)
            {
                si8((s2 >>> 8), currentAddr);
                currentAddr = (currentAddr + 1);
                si8(s2, currentAddr);
                currentAddr = (currentAddr + 1);
                si8((s1 >>> 8), currentAddr);
                currentAddr = (currentAddr + 1);
                si8(s1, currentAddr);
                currentAddr = (currentAddr + 1);
            };
            rangeResult.offset = startAddr;
            rangeResult.end = currentAddr;
            return (rangeResult);
        }

        public function endBlock():void
        {
            var _local_1:int;
            var _local_2:int;
            var _local_3:int;
            if (level != CompressionLevel.UNCOMPRESSED)
            {
                _local_1 = 0;
                _local_2 = li32((scratchAddr + _local_1) + 0x0400);
                _local_3 = li8(currentAddr);
                _local_3 = (_local_3 | ((_local_2 >>> 16) << bitOffset));
                si32(_local_3, currentAddr);
                bitOffset = (bitOffset + (_local_2 & 0xFFFF));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            blockInProgress = false;
        }

        public function do16Adler(_arg_1:int, _arg_2:int):void
        {
            while (_arg_1 < _arg_2)
            {
                s2 = (s2 + (((((((((((((((((s1 << 4) + (li8(_arg_1) * 16)) + (li8(_arg_1 + 1) * 15)) + (li8(_arg_1 + 2) * 14)) + (li8(_arg_1 + 3) * 13)) + (li8(_arg_1 + 4) * 12)) + (li8(_arg_1 + 5) * 11)) + (li8(_arg_1 + 6) * 10)) + (li8(_arg_1 + 7) * 9)) + (li8(_arg_1 + 8) * 8)) + (li8(_arg_1 + 9) * 7)) + (li8(_arg_1 + 10) * 6)) + (li8(_arg_1 + 11) * 5)) + (li8(_arg_1 + 12) * 4)) + (li8(_arg_1 + 13) * 3)) + (li8(_arg_1 + 14) * 2)) + li8(_arg_1 + 15)));
                s1 = (s1 + (((((((((((((((li8(_arg_1) + li8(_arg_1 + 1)) + li8(_arg_1 + 2)) + li8(_arg_1 + 3)) + li8(_arg_1 + 4)) + li8(_arg_1 + 5)) + li8(_arg_1 + 6)) + li8(_arg_1 + 7)) + li8(_arg_1 + 8)) + li8(_arg_1 + 9)) + li8(_arg_1 + 10)) + li8(_arg_1 + 11)) + li8(_arg_1 + 12)) + li8(_arg_1 + 13)) + li8(_arg_1 + 14)) + li8(_arg_1 + 15)));
                _arg_1 = (_arg_1 + 16);
            };
        }

        public function currentBlockLength():int
        {
            if (blockInProgress)
            {
                return (currentAddr - blockStartAddr);
            };
            return (0);
        }

        public function createLiteralLengthTree(_arg_1:int, _arg_2:int):int
        {
            var _local_4:int;
            var _local_5:int;
            var _local_6:int;
            var _local_7:int;
            var _local_8:int;
            var _local_9:int;
            var _local_10:int;
            var _local_3:int;
            if (level == CompressionLevel.FAST)
            {
                _local_3 = 0x0101;
                _local_4 = 0;
                while (_local_4 < 0x0100)
                {
                    _local_5 = _local_4++;
                    si32(10, (scratchAddr + (_local_5 * 4)));
                };
                si32(1, (scratchAddr + 0x0400));
                _local_4 = (_arg_2 - _arg_1);
                if (_local_4 <= 0x4000)
                {
                    _local_5 = 1;
                }
                else
                {
                    if (_local_4 <= 102400)
                    {
                        _local_5 = 5;
                    }
                    else
                    {
                        _local_5 = 11;
                    };
                };
                _local_7 = int((_local_4 / _local_5));
                _local_8 = (_local_7 & 0xFFFFFFF0);
                _local_9 = 0;
                while (_local_9 < _local_8)
                {
                    _local_6 = li8(_arg_1 + (_local_9 * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 1) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 2) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 3) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 4) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 5) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 6) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 7) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 8) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 9) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 10) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 11) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 12) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 13) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 14) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 15) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_9 = (_local_9 + 16);
                };
                while (_local_9 < _local_7)
                {
                    _local_6 = li8(_arg_1 + (_local_9 * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_9++;
                };
            }
            else
            {
                if (((level == (CompressionLevel.NORMAL)) || (level == CompressionLevel.GOOD)))
                {
                    _local_3 = 0x0101;
                    _local_4 = 0x0101;
                    while (_local_4 < 286)
                    {
                        _local_5 = _local_4++;
                        if (li32(scratchAddr + (_local_5 * 4)) > 0)
                        {
                            _local_3 = (_local_5 + 1);
                        };
                    };
                    si32(1, (scratchAddr + 0x0400));
                    _local_4 = 0;
                    while (_local_4 < _local_3)
                    {
                        _local_5 = _local_4++;
                        if (((_local_5 != (0x0100)) && (li32(scratchAddr + (_local_5 * 4)) > 0)))
                        {
                            _local_6 = (li32(scratchAddr + (_local_5 * 4)) + 2);
                            si32(_local_6, (scratchAddr + (_local_5 * 4)));
                        };
                    };
                };
            };
            HuffmanTree.weightedAlphabetToCodes(scratchAddr, (scratchAddr + (_local_3 * 4)), 15);
            return (_local_3);
        }

        public function createDistanceTree(_arg_1:int, _arg_2:int):int
        {
            var _local_5:int;
            var _local_6:int;
            var _local_3:* = (scratchAddr + 1144);
            var _local_4:int;
            if (((level == (CompressionLevel.NORMAL)) || (level == CompressionLevel.GOOD)))
            {
                _local_5 = 0;
                while (_local_5 < 30)
                {
                    _local_6 = _local_5++;
                    if (li32(_local_3 + (_local_6 * 4)) > 0)
                    {
                        _local_4 = (_local_6 + 1);
                    };
                };
            };
            HuffmanTree.weightedAlphabetToCodes(_local_3, (_local_3 + (_local_4 * 4)), 15);
            return (_local_4);
        }

        public function createCodeLengthTree(_arg_1:int, _arg_2:int):int
        {
            var _local_3:int;
            var _local_4:int;
            var _local_5:int;
            var _local_6:int;
            _local_3 = 0;
            while (_local_3 < 19)
            {
                _local_4 = _local_3++;
                si32(1, ((scratchAddr + 1272) + (_local_4 * 4)));
            };
            _local_4 = 0;
            while (_local_4 < _arg_1)
            {
                _local_5 = _local_4++;
                _local_3 = ((scratchAddr + 1272) + (li16(scratchAddr + (_local_5 * 4)) * 4));
                _local_6 = (li32(_local_3) + 1);
                si32(_local_6, _local_3);
            };
            _local_4 = 0;
            while (_local_4 < _arg_2)
            {
                _local_5 = _local_4++;
                _local_3 = ((scratchAddr + 1272) + (li16((scratchAddr + 1144) + (_local_5 * 4)) * 4));
                _local_6 = (li32(_local_3) + 1);
                si32(_local_6, _local_3);
            };
            _local_4 = (scratchAddr + 1272);
            HuffmanTree.weightedAlphabetToCodes(_local_4, (_local_4 + 76), 7);
            return (19);
        }

        public function createAndWriteHuffmanTrees(_arg_1:int, _arg_2:int):void
        {
            var _local_4:int;
            var _local_5:int;
            var _local_6:int;
            var _local_7:int;
            var _local_8:int;
            var _local_9:int;
            var _local_10:int;
            var _local_3:int;
            if (level == CompressionLevel.FAST)
            {
                _local_3 = 0x0101;
                _local_4 = 0;
                while (_local_4 < 0x0100)
                {
                    _local_5 = _local_4++;
                    si32(10, (scratchAddr + (_local_5 * 4)));
                };
                si32(1, (scratchAddr + 0x0400));
                _local_4 = (_arg_2 - _arg_1);
                if (_local_4 <= 0x4000)
                {
                    _local_5 = 1;
                }
                else
                {
                    if (_local_4 <= 102400)
                    {
                        _local_5 = 5;
                    }
                    else
                    {
                        _local_5 = 11;
                    };
                };
                _local_7 = int((_local_4 / _local_5));
                _local_8 = (_local_7 & 0xFFFFFFF0);
                _local_9 = 0;
                while (_local_9 < _local_8)
                {
                    _local_6 = li8(_arg_1 + (_local_9 * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 1) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 2) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 3) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 4) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 5) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 6) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 7) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 8) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 9) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 10) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 11) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 12) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 13) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 14) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 15) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_9 = (_local_9 + 16);
                };
                while (_local_9 < _local_7)
                {
                    _local_6 = li8(_arg_1 + (_local_9 * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_9++;
                };
            }
            else
            {
                if (((level == (CompressionLevel.NORMAL)) || (level == CompressionLevel.GOOD)))
                {
                    _local_3 = 0x0101;
                    _local_4 = 0x0101;
                    while (_local_4 < 286)
                    {
                        _local_5 = _local_4++;
                        if (li32(scratchAddr + (_local_5 * 4)) > 0)
                        {
                            _local_3 = (_local_5 + 1);
                        };
                    };
                    si32(1, (scratchAddr + 0x0400));
                    _local_4 = 0;
                    while (_local_4 < _local_3)
                    {
                        _local_5 = _local_4++;
                        if (((_local_5 != (0x0100)) && (li32(scratchAddr + (_local_5 * 4)) > 0)))
                        {
                            _local_6 = (li32(scratchAddr + (_local_5 * 4)) + 2);
                            si32(_local_6, (scratchAddr + (_local_5 * 4)));
                        };
                    };
                };
            };
            HuffmanTree.weightedAlphabetToCodes(scratchAddr, (scratchAddr + (_local_3 * 4)), 15);
            literalLengthCodes = _local_3;
            _local_3 = (scratchAddr + 1144);
            _local_4 = 0;
            if (((level == (CompressionLevel.NORMAL)) || (level == CompressionLevel.GOOD)))
            {
                _local_5 = 0;
                while (_local_5 < 30)
                {
                    _local_6 = _local_5++;
                    if (li32(_local_3 + (_local_6 * 4)) > 0)
                    {
                        _local_4 = (_local_6 + 1);
                    };
                };
            };
            HuffmanTree.weightedAlphabetToCodes(_local_3, (_local_3 + (_local_4 * 4)), 15);
            distanceCodes = _local_4;
            _local_4 = 0;
            while (_local_4 < 19)
            {
                _local_5 = _local_4++;
                si32(1, ((scratchAddr + 1272) + (_local_5 * 4)));
            };
            _local_5 = 0;
            while (_local_5 < literalLengthCodes)
            {
                _local_6 = _local_5++;
                _local_4 = ((scratchAddr + 1272) + (li16(scratchAddr + (_local_6 * 4)) * 4));
                _local_7 = (li32(_local_4) + 1);
                si32(_local_7, _local_4);
            };
            _local_5 = 0;
            while (_local_5 < distanceCodes)
            {
                _local_6 = _local_5++;
                _local_4 = ((scratchAddr + 1272) + (li16((scratchAddr + 1144) + (_local_6 * 4)) * 4));
                _local_7 = (li32(_local_4) + 1);
                si32(_local_7, _local_4);
            };
            _local_5 = (scratchAddr + 1272);
            HuffmanTree.weightedAlphabetToCodes(_local_5, (_local_5 + 76), 7);
            _local_3 = 19;
            _local_4 = li8(currentAddr);
            _local_4 = (_local_4 | ((literalLengthCodes - 0x0101) << bitOffset));
            si32(_local_4, currentAddr);
            bitOffset = (bitOffset + 5);
            currentAddr = (currentAddr + (bitOffset >>> 3));
            bitOffset = (bitOffset & 0x07);
            if (distanceCodes == 0)
            {
                _local_4 = li8(currentAddr);
                _local_4 = (_local_4 | (0 << bitOffset));
                si32(_local_4, currentAddr);
                bitOffset = (bitOffset + 5);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            }
            else
            {
                _local_4 = li8(currentAddr);
                _local_4 = (_local_4 | ((distanceCodes - 1) << bitOffset));
                si32(_local_4, currentAddr);
                bitOffset = (bitOffset + 5);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            _local_4 = li8(currentAddr);
            _local_4 = (_local_4 | ((_local_3 - 4) << bitOffset));
            si32(_local_4, currentAddr);
            bitOffset = (bitOffset + 4);
            currentAddr = (currentAddr + (bitOffset >>> 3));
            bitOffset = (bitOffset & 0x07);
            _local_4 = 0;
            var _local_11:Array = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
            while (_local_4 < _local_11.length)
            {
                _local_5 = _local_11[_local_4];
                _local_4++;
                _local_6 = li16((scratchAddr + 1272) + (_local_5 * 4));
                _local_7 = li8(currentAddr);
                _local_7 = (_local_7 | (_local_6 << bitOffset));
                si32(_local_7, currentAddr);
                bitOffset = (bitOffset + 3);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            _local_4 = 0;
            _local_5 = literalLengthCodes;
            while (_local_4 < _local_5)
            {
                _local_6 = _local_4++;
                _local_7 = li16(scratchAddr + (_local_6 * 4));
                _local_8 = li32((scratchAddr + 1272) + (_local_7 * 4));
                _local_9 = li8(currentAddr);
                _local_9 = (_local_9 | ((_local_8 >>> 16) << bitOffset));
                si32(_local_9, currentAddr);
                bitOffset = (bitOffset + (_local_8 & 0xFFFF));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            if (distanceCodes == 0)
            {
                _local_4 = li32(scratchAddr + 1272);
                _local_5 = li8(currentAddr);
                _local_5 = (_local_5 | ((_local_4 >>> 16) << bitOffset));
                si32(_local_5, currentAddr);
                bitOffset = (bitOffset + (_local_4 & 0xFFFF));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            }
            else
            {
                _local_4 = 0;
                _local_5 = distanceCodes;
                while (_local_4 < _local_5)
                {
                    _local_6 = _local_4++;
                    _local_7 = li16((scratchAddr + 1144) + (_local_6 * 4));
                    _local_8 = li32((scratchAddr + 1272) + (_local_7 * 4));
                    _local_9 = li8(currentAddr);
                    _local_9 = (_local_9 | ((_local_8 >>> 16) << bitOffset));
                    si32(_local_9, currentAddr);
                    bitOffset = (bitOffset + (_local_8 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
            };
        }

        public function clearSymbolFrequencies():void
        {
            var _local_2:int;
            var _local_1:int;
            while (_local_1 < 286)
            {
                _local_2 = _local_1++;
                si32(0, (scratchAddr + (_local_2 << 2)));
            };
            _local_1 = 0;
            while (_local_1 < 30)
            {
                _local_2 = _local_1++;
                si32(0, ((scratchAddr + 1144) + (_local_2 << 2)));
            };
        }

        public function beginBlock(_arg_1:Boolean=false):void
        {
            var _local_2:int;
            blockInProgress = true;
            if (level == CompressionLevel.UNCOMPRESSED)
            {
                if (bitOffset == 0)
                {
                    si8(0, currentAddr);
                };
                _local_2 = li8(currentAddr);
                _local_2 = (_local_2 | (((_arg_1) ? 1 : 0) << bitOffset));
                si32(_local_2, currentAddr);
                bitOffset = (bitOffset + 3);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
                if (bitOffset > 0)
                {
                    _local_2 = li8(currentAddr);
                    _local_2 = (_local_2 | (0 << bitOffset));
                    si32(_local_2, currentAddr);
                    bitOffset = (bitOffset + (8 - bitOffset));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
            }
            else
            {
                _local_2 = li8(currentAddr);
                _local_2 = (_local_2 | ((0x04 | ((_arg_1) ? 1 : 0)) << bitOffset));
                si32(_local_2, currentAddr);
                bitOffset = (bitOffset + 3);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            blockStartAddr = currentAddr;
        }

        public function _new(_arg_1:CompressionLevel, _arg_2:Boolean, _arg_3:int, _arg_4:int):void
        {
            var _local_7:int;
            var _local_8:int;
            var _local_9:int;
            var _local_10:int;
            var _local_11:int;
            var _local_12:int;
            var _local_13:int;
            var _local_14:int;
            var _local_15:int;
            var _local_16:int;
            level = _arg_1;
            zlib = _arg_2;
            scratchAddr = _arg_3;
            startAddr = _arg_4;
            currentAddr = _arg_4;
            rangeResult = new MemoryRange(0, 0);
            HuffmanTree.scratchAddr = (_arg_3 + 1348);
            var _local_5:ByteArray = ApplicationDomain.currentDomain.domainMemory;
            var _local_6:uint = (_arg_4 + 15);
            if (_local_5.length < _local_6)
            {
                _local_5.length = _local_6;
                ApplicationDomain.currentDomain.domainMemory = _local_5;
            };
            distanceCodes = -1;
            blockInProgress = false;
            blockStartAddr = currentAddr;
            bitOffset = 0;
            s1 = 1;
            s2 = 0;
            if (zlib)
            {
                si8(120, currentAddr);
                currentAddr = (currentAddr + 1);
                si8(156, currentAddr);
                currentAddr = (currentAddr + 1);
            };
            if (((level == (CompressionLevel.NORMAL)) || (level == CompressionLevel.GOOD)))
            {
                _local_7 = (scratchAddr + 2492);
                si32(16842755, (_local_7 + 12));
                si32(16908292, (_local_7 + 16));
                si32(16973829, (_local_7 + 20));
                si32(17039366, (_local_7 + 24));
                si32(17104903, (_local_7 + 28));
                si32(17170440, (_local_7 + 32));
                si32(17235977, (_local_7 + 36));
                si32(17301514, (_local_7 + 40));
                _local_8 = 11;
                _local_9 = 265;
                _local_10 = 1;
                while (_local_10 < 6)
                {
                    _local_11 = _local_10++;
                    _local_12 = 0;
                    while (_local_12 < 4)
                    {
                        _local_13 = _local_12++;
                        _local_14 = _local_8;
                        _local_15 = (_local_8 + (1 << _local_11));
                        while (_local_14 < _local_15)
                        {
                            _local_16 = _local_14++;
                            si32((((_local_9 << 16) | (_local_11 << 13)) | _local_8), (_local_7 + (_local_16 * 4)));
                        };
                        _local_8 = (_local_8 + (1 << _local_11));
                        _local_9++;
                    };
                };
                si32(18678018, (_local_7 + 1032));
                _local_7 = (scratchAddr + 3528);
                si32(1, (_local_7 + 4));
                si32(16777218, (_local_7 + 8));
                si32(33554435, (_local_7 + 12));
                si32(50331652, (_local_7 + 16));
                _local_8 = 5;
                _local_9 = 4;
                _local_10 = 1;
                while (_local_10 < 7)
                {
                    _local_11 = _local_10++;
                    _local_12 = 0;
                    while (_local_12 < 2)
                    {
                        _local_13 = _local_12++;
                        _local_14 = _local_8;
                        _local_15 = (_local_8 + (1 << _local_11));
                        while (_local_14 < _local_15)
                        {
                            _local_16 = _local_14++;
                            si32((((_local_9 << 24) | (_local_11 << 16)) | _local_8), (_local_7 + (_local_16 * 4)));
                        };
                        _local_8 = (_local_8 + (1 << _local_11));
                        _local_9++;
                    };
                };
                _local_7 = (_local_7 + 0x0400);
                _local_10 = 7;
                while (_local_10 < 14)
                {
                    _local_11 = _local_10++;
                    _local_12 = 0;
                    while (_local_12 < 2)
                    {
                        _local_13 = _local_12++;
                        _local_14 = (_local_8 >>> 7);
                        _local_15 = ((_local_8 >>> 7) + (1 << (_local_11 - 7)));
                        while (_local_14 < _local_15)
                        {
                            _local_16 = _local_14++;
                            si32((((_local_9 << 24) | (_local_11 << 16)) | _local_8), (_local_7 + (_local_16 * 4)));
                        };
                        _local_8 = (_local_8 + (1 << _local_11));
                        _local_9++;
                    };
                };
            };
            si8(0, currentAddr);
        }

        public function _maxOutputBufferSize(_arg_1:int):int
        {
            var _local_2:int;
            var _local_3:int;
            var _local_4:int = 1;
            var _local_5:int;
            if (level == CompressionLevel.UNCOMPRESSED)
            {
                _local_3 = 8;
                _local_2 = int(Math.ceil((_arg_1 / 0xFFFF)));
            }
            else
            {
                if (level == CompressionLevel.FAST)
                {
                    _local_2 = int(Math.ceil(((_arg_1 * 2) / 0xC000)));
                }
                else
                {
                    _local_2 = int(Math.ceil((_arg_1 / 98304)));
                    if (level == CompressionLevel.NORMAL)
                    {
                        _local_5 = 0x70000;
                    }
                    else
                    {
                        if (level == CompressionLevel.GOOD)
                        {
                            _local_5 = 524308;
                        };
                    };
                };
                _local_4 = 2;
                _local_3 = 300;
            };
            return (((_arg_1 * _local_4) + (_local_3 * (_local_2 + 1))) + _local_5);
        }

        public function _fastWriteUncompressed(_arg_1:int, _arg_2:int):void
        {
            var _local_3:int;
            var _local_4:int;
            var _local_5:int;
            var _local_9:int;
            var _local_10:Number;
            var _local_11:Boolean;
            var _local_12:int;
            var _local_13:int;
            var _local_14:int;
            var _local_15:int;
            var _local_16:int;
            var _local_17:int;
            if (zlib)
            {
                _local_3 = _arg_1;
                while ((_local_3 + 5552) <= _arg_2)
                {
                    _local_4 = _local_3;
                    while (_local_4 < (_local_3 + 5552))
                    {
                        s2 = (s2 + (((((((((((((((((s1 << 4) + (li8(_local_4) * 16)) + (li8(_local_4 + 1) * 15)) + (li8(_local_4 + 2) * 14)) + (li8(_local_4 + 3) * 13)) + (li8(_local_4 + 4) * 12)) + (li8(_local_4 + 5) * 11)) + (li8(_local_4 + 6) * 10)) + (li8(_local_4 + 7) * 9)) + (li8(_local_4 + 8) * 8)) + (li8(_local_4 + 9) * 7)) + (li8(_local_4 + 10) * 6)) + (li8(_local_4 + 11) * 5)) + (li8(_local_4 + 12) * 4)) + (li8(_local_4 + 13) * 3)) + (li8(_local_4 + 14) * 2)) + li8(_local_4 + 15)));
                        s1 = (s1 + (((((((((((((((li8(_local_4) + li8(_local_4 + 1)) + li8(_local_4 + 2)) + li8(_local_4 + 3)) + li8(_local_4 + 4)) + li8(_local_4 + 5)) + li8(_local_4 + 6)) + li8(_local_4 + 7)) + li8(_local_4 + 8)) + li8(_local_4 + 9)) + li8(_local_4 + 10)) + li8(_local_4 + 11)) + li8(_local_4 + 12)) + li8(_local_4 + 13)) + li8(_local_4 + 14)) + li8(_local_4 + 15)));
                        _local_4 = (_local_4 + 16);
                    };
                    s1 = (s1 % 65521);
                    s2 = (s2 % 65521);
                    _local_3 = (_local_3 + 5552);
                };
                if (_local_3 != _arg_2)
                {
                    _local_4 = _local_3;
                    while (_local_4 < _arg_2)
                    {
                        _local_5 = _local_4++;
                        s1 = (s1 + li8(_local_5));
                        s2 = (s2 + s1);
                    };
                    s1 = (s1 % 65521);
                    s2 = (s2 % 65521);
                };
            };
            _local_3 = 8;
            _local_4 = (_arg_2 - _arg_1);
            _local_5 = int(Math.ceil((_local_4 / 0xFFFF)));
            var _local_6:uint = (_local_4 + (_local_3 * _local_5));
            var _local_7:ByteArray = ApplicationDomain.currentDomain.domainMemory;
            var _local_8:uint = (_local_7.length - currentAddr);
            if (_local_8 < _local_6)
            {
                _local_7.length = (currentAddr + _local_6);
                ApplicationDomain.currentDomain.domainMemory = _local_7;
            };
            while ((_arg_2 - _arg_1) > 0)
            {
                _local_10 = Math.min((_arg_2 - _arg_1), 0xFFFF);
                _local_9 = _local_10;
                _local_11 = false;
                blockInProgress = true;
                if (level == CompressionLevel.UNCOMPRESSED)
                {
                    if (bitOffset == 0)
                    {
                        si8(0, currentAddr);
                    };
                    _local_12 = li8(currentAddr);
                    _local_12 = (_local_12 | (((_local_11) ? 1 : 0) << bitOffset));
                    si32(_local_12, currentAddr);
                    bitOffset = (bitOffset + 3);
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    if (bitOffset > 0)
                    {
                        _local_12 = li8(currentAddr);
                        _local_12 = (_local_12 | (0 << bitOffset));
                        si32(_local_12, currentAddr);
                        bitOffset = (bitOffset + (8 - bitOffset));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                }
                else
                {
                    _local_12 = li8(currentAddr);
                    _local_12 = (_local_12 | ((0x04 | ((_local_11) ? 1 : 0)) << bitOffset));
                    si32(_local_12, currentAddr);
                    bitOffset = (bitOffset + 3);
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
                blockStartAddr = currentAddr;
                si16(_local_9, currentAddr);
                currentAddr = (currentAddr + 2);
                si16((~(_local_9)), currentAddr);
                currentAddr = (currentAddr + 2);
                _local_12 = (_arg_1 + _local_9);
                _local_13 = (_arg_1 + (_local_9 & 0xFFFFFFE0));
                _local_14 = _arg_1;
                while (_local_14 < _local_13)
                {
                    _local_15 = li32(_local_14);
                    si32(_local_15, currentAddr);
                    _local_15 = li32(_local_14 + 4);
                    si32(_local_15, (currentAddr + 4));
                    _local_15 = li32(_local_14 + 8);
                    si32(_local_15, (currentAddr + 8));
                    _local_15 = li32(_local_14 + 12);
                    si32(_local_15, (currentAddr + 12));
                    _local_15 = li32(_local_14 + 16);
                    si32(_local_15, (currentAddr + 16));
                    _local_15 = li32(_local_14 + 20);
                    si32(_local_15, (currentAddr + 20));
                    _local_15 = li32(_local_14 + 24);
                    si32(_local_15, (currentAddr + 24));
                    _local_15 = li32(_local_14 + 28);
                    si32(_local_15, (currentAddr + 28));
                    currentAddr = (currentAddr + 32);
                    _local_14 = (_local_14 + 32);
                };
                while (_local_14 < _local_12)
                {
                    _local_15 = li8(_local_14);
                    si8(_local_15, currentAddr);
                    currentAddr = (currentAddr + 1);
                    _local_14++;
                };
                if (level != CompressionLevel.UNCOMPRESSED)
                {
                    _local_15 = 0;
                    _local_16 = li32((scratchAddr + _local_15) + 0x0400);
                    _local_17 = li8(currentAddr);
                    _local_17 = (_local_17 | ((_local_16 >>> 16) << bitOffset));
                    si32(_local_17, currentAddr);
                    bitOffset = (bitOffset + (_local_16 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
                blockInProgress = false;
                _arg_1 = (_arg_1 + _local_9);
            };
        }

        public function _fastWriteNormal(_arg_1:int, _arg_2:int):void
        {
            var _local_3:int;
            var _local_4:int;
            var _local_5:int;
            var _local_6:int;
            var _local_8:int;
            var _local_9:int;
            var _local_10:int;
            var _local_12:int;
            var _local_13:int;
            var _local_16:int;
            var _local_17:int;
            var _local_18:int;
            var _local_19:int;
            var _local_20:Number;
            var _local_21:int;
            var _local_22:int;
            var _local_23:int;
            var _local_24:Boolean;
            var _local_25:int;
            var _local_26:int;
            var _local_15:* = (_arg_2 - _arg_1);
            _local_18 = 1;
            _local_19 = 0;
            if (level == CompressionLevel.UNCOMPRESSED)
            {
                _local_17 = 8;
                _local_16 = int(Math.ceil((_local_15 / 0xFFFF)));
            }
            else
            {
                if (level == CompressionLevel.FAST)
                {
                    _local_16 = int(Math.ceil(((_local_15 * 2) / 0xC000)));
                }
                else
                {
                    _local_16 = int(Math.ceil((_local_15 / 98304)));
                    if (level == CompressionLevel.NORMAL)
                    {
                        _local_19 = 0x70000;
                    }
                    else
                    {
                        if (level == CompressionLevel.GOOD)
                        {
                            _local_19 = 524308;
                        };
                    };
                };
                _local_18 = 2;
                _local_17 = 300;
            };
            var _local_14:* = ((currentAddr + (((_local_15 * _local_18) + (_local_17 * (_local_16 + 1))) + _local_19)) - 0x40000);
            _local_15 = (_local_14 - 0x30000);
            var _local_11:* = ((_local_14 + 0x40000) - 32);
            while (_local_11 >= _local_14)
            {
                si32(-1, _local_11);
                si32(-1, (_local_11 + 4));
                si32(-1, (_local_11 + 8));
                si32(-1, (_local_11 + 12));
                si32(-1, (_local_11 + 16));
                si32(-1, (_local_11 + 20));
                si32(-1, (_local_11 + 24));
                si32(-1, (_local_11 + 28));
                _local_11 = (_local_11 - 32);
            };
            while ((_arg_2 - _arg_1) > 0)
            {
                _local_20 = Math.min(_arg_2, (_arg_1 + 98304));
                _local_3 = _local_20;
                _local_4 = (_local_3 - 4);
                _local_17 = 0;
                while (_local_17 < 286)
                {
                    _local_18 = _local_17++;
                    si32(0, (scratchAddr + (_local_18 << 2)));
                };
                _local_17 = 0;
                while (_local_17 < 30)
                {
                    _local_18 = _local_17++;
                    si32(0, ((scratchAddr + 1144) + (_local_18 << 2)));
                };
                _local_16 = _local_15;
                _local_11 = _arg_1;
                while (_local_11 < _local_4)
                {
                    _local_17 = 775236557;
                    _local_18 = -862048943;
                    _local_19 = 461845907;
                    _local_21 = (li32(_local_11) * _local_18);
                    _local_21 = ((_local_21 << 15) | (_local_21 >>> 17));
                    _local_17 = (_local_17 ^ (_local_21 * _local_19));
                    _local_17 = ((_local_17 << 13) | (_local_17 >>> 19));
                    _local_17 = ((_local_17 * 5) + -430675100);
                    _local_22 = (_local_17 ^ 0x04);
                    _local_22 = (_local_22 ^ (_local_22 >>> 16));
                    _local_22 = (_local_22 * -2048144789);
                    _local_22 = (_local_22 ^ (_local_22 >>> 13));
                    _local_22 = (_local_22 * -1028477387);
                    _local_10 = (((_local_22 ^ (_local_22 >>> 16)) & 0xFFFF) << 2);
                    _local_12 = li32(_local_14 + _local_10);
                    if (((_local_12 >= (0)) && (li32(_local_12) == li32(_local_11))))
                    {
                        _local_6 = 4;
                        _local_12 = (_local_12 + 4);
                        _local_13 = (_local_11 + 4);
                        while ((((_local_13 < (_local_3)) && (li8(_local_12) == li8(_local_13))) && (_local_6 < 258)))
                        {
                            _local_12++;
                            _local_13++;
                            _local_6++;
                        };
                        si32(_local_11, (_local_14 + _local_10));
                        _local_8 = (_local_13 - _local_12);
                        if (_local_8 <= 0x8000)
                        {
                            _local_17 = li16(((scratchAddr + 2492) + (_local_6 << 2)) + 2);
                            _local_18 = 0;
                            _local_19 = ((scratchAddr + _local_18) + (_local_17 << 2));
                            _local_21 = (li32(_local_19) + 1);
                            si32(_local_21, _local_19);
                            _local_9 = li32((scratchAddr + 3528) + (((_local_8 <= 0x0100) ? _local_8 : (0x0100 + ((_local_8 - 1) >>> 7))) << 2));
                            _local_17 = ((scratchAddr + 1144) + ((_local_9 >>> 24) << 2));
                            _local_18 = (li32(_local_17) + 1);
                            si32(_local_18, _local_17);
                            si32(((_local_6 | 0x0200) | (_local_8 << 16)), _local_16);
                            _local_16 = (_local_16 + 4);
                            _local_11 = (_local_11 + _local_6);
                            if (_local_11 < _local_4)
                            {
                                var _temp_1:* = _local_14;
                                _local_18 = 775236557;
                                _local_19 = -862048943;
                                _local_21 = 461845907;
                                _local_22 = (li32(_local_11 - 1) * _local_19);
                                _local_22 = ((_local_22 << 15) | (_local_22 >>> 17));
                                _local_18 = (_local_18 ^ (_local_22 * _local_21));
                                _local_18 = ((_local_18 << 13) | (_local_18 >>> 19));
                                _local_18 = ((_local_18 * 5) + -430675100);
                                _local_23 = (_local_18 ^ 0x04);
                                _local_23 = (_local_23 ^ (_local_23 >>> 16));
                                _local_23 = (_local_23 * -2048144789);
                                _local_23 = (_local_23 ^ (_local_23 >>> 13));
                                _local_23 = (_local_23 * -1028477387);
                                _local_17 = (_temp_1 + (((_local_23 ^ (_local_23 >>> 16)) & 0xFFFF) << 2));
                                si32((_local_11 - 1), _local_17);
                            };
                        }
                        else
                        {
                            _local_5 = li8(_local_11);
                            si16(_local_5, _local_16);
                            _local_17 = 0;
                            _local_18 = ((scratchAddr + _local_17) + (_local_5 << 2));
                            _local_19 = (li32(_local_18) + 1);
                            si32(_local_19, _local_18);
                            _local_16 = (_local_16 + 2);
                            _local_11++;
                        };
                    }
                    else
                    {
                        _local_5 = li8(_local_11);
                        si16(_local_5, _local_16);
                        _local_17 = 0;
                        _local_18 = ((scratchAddr + _local_17) + (_local_5 << 2));
                        _local_19 = (li32(_local_18) + 1);
                        si32(_local_19, _local_18);
                        si32(_local_11, (_local_14 + _local_10));
                        _local_16 = (_local_16 + 2);
                        _local_11++;
                    };
                };
                while (_local_11 < _local_3)
                {
                    _local_5 = li8(_local_11);
                    si16(_local_5, _local_16);
                    _local_17 = 0;
                    _local_18 = ((scratchAddr + _local_17) + (_local_5 << 2));
                    _local_19 = (li32(_local_18) + 1);
                    si32(_local_19, _local_18);
                    _local_16 = (_local_16 + 2);
                    _local_11++;
                };
                _local_24 = false;
                blockInProgress = true;
                if (level == CompressionLevel.UNCOMPRESSED)
                {
                    if (bitOffset == 0)
                    {
                        si8(0, currentAddr);
                    };
                    _local_17 = li8(currentAddr);
                    _local_17 = (_local_17 | (((_local_24) ? 1 : 0) << bitOffset));
                    si32(_local_17, currentAddr);
                    bitOffset = (bitOffset + 3);
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    if (bitOffset > 0)
                    {
                        _local_17 = li8(currentAddr);
                        _local_17 = (_local_17 | (0 << bitOffset));
                        si32(_local_17, currentAddr);
                        bitOffset = (bitOffset + (8 - bitOffset));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                }
                else
                {
                    _local_17 = li8(currentAddr);
                    _local_17 = (_local_17 | ((0x04 | ((_local_24) ? 1 : 0)) << bitOffset));
                    si32(_local_17, currentAddr);
                    bitOffset = (bitOffset + 3);
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
                blockStartAddr = currentAddr;
                createAndWriteHuffmanTrees(_arg_1, _local_3);
                _local_11 = _local_15;
                while ((_local_11 + 64) <= _local_16)
                {
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                };
                while (_local_11 < _local_16)
                {
                    _local_22 = li16(_local_11);
                    if ((_local_22 & 0x0200) != 0)
                    {
                        _local_17 = (_local_22 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_21 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_23 = li32((scratchAddr + 1144) + ((_local_21 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_23 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_23 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_23 = li8(currentAddr);
                        _local_23 = (_local_23 | ((_local_18 - (_local_21 & 0xFFFF)) << bitOffset));
                        si32(_local_23, currentAddr);
                        bitOffset = (bitOffset + ((_local_21 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_23 = 0;
                        _local_25 = li32((scratchAddr + _local_23) + (_local_22 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_5 = _local_22;
                    _local_11 = (_local_11 + (2 + ((_local_5 & 0x0200) >>> 8)));
                };
                if (level != CompressionLevel.UNCOMPRESSED)
                {
                    _local_17 = 0;
                    _local_18 = li32((scratchAddr + _local_17) + 0x0400);
                    _local_19 = li8(currentAddr);
                    _local_19 = (_local_19 | ((_local_18 >>> 16) << bitOffset));
                    si32(_local_19, currentAddr);
                    bitOffset = (bitOffset + (_local_18 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
                blockInProgress = false;
                _arg_1 = _local_3;
            };
        }

        public function _fastWriteGood(_arg_1:int, _arg_2:int):void
        {
            var _local_3:int;
            var _local_4:int;
            var _local_5:int;
            var _local_6:int;
            var _local_7:int;
            var _local_9:int;
            var _local_11:int;
            var _local_16:int;
            var _local_17:int;
            var _local_18:int;
            var _local_19:int;
            var _local_21:Number;
            var _local_22:int;
            var _local_23:int;
            var _local_24:int;
            var _local_25:int;
            var _local_26:int;
            var _local_27:int;
            var _local_28:int;
            var _local_29:int;
            var _local_30:int;
            var _local_31:int;
            var _local_32:int;
            var _local_33:int;
            var _local_34:int;
            var _local_35:int;
            var _local_36:int;
            var _local_37:int;
            var _local_38:Boolean;
            var _local_15:* = (_arg_2 - _arg_1);
            _local_18 = 1;
            _local_19 = 0;
            if (level == CompressionLevel.UNCOMPRESSED)
            {
                _local_17 = 8;
                _local_16 = int(Math.ceil((_local_15 / 0xFFFF)));
            }
            else
            {
                if (level == CompressionLevel.FAST)
                {
                    _local_16 = int(Math.ceil(((_local_15 * 2) / 0xC000)));
                }
                else
                {
                    _local_16 = int(Math.ceil((_local_15 / 98304)));
                    if (level == CompressionLevel.NORMAL)
                    {
                        _local_19 = 0x70000;
                    }
                    else
                    {
                        if (level == CompressionLevel.GOOD)
                        {
                            _local_19 = 524308;
                        };
                    };
                };
                _local_18 = 2;
                _local_17 = 300;
            };
            var _local_14:* = ((currentAddr + (((_local_15 * _local_18) + (_local_17 * (_local_16 + 1))) + _local_19)) - 327700);
            _local_15 = (_local_14 - 0x30000);
            var _local_20:LZHash = new LZHash(_local_14, 258, 0x8000);
            while ((_arg_2 - _arg_1) > 0)
            {
                _local_21 = Math.min(_arg_2, (_arg_1 + 98304));
                _local_3 = _local_21;
                _local_5 = (_local_3 - 9);
                _local_4 = ((_local_5 - 516) - 1);
                _local_17 = 0;
                while (_local_17 < 286)
                {
                    _local_18 = _local_17++;
                    si32(0, (scratchAddr + (_local_18 << 2)));
                };
                _local_17 = 0;
                while (_local_17 < 30)
                {
                    _local_18 = _local_17++;
                    si32(0, ((scratchAddr + 1144) + (_local_18 << 2)));
                };
                _local_16 = _local_15;
                _local_11 = _arg_1;
                if (_local_11 < _local_4)
                {
                    _local_19 = 775236557;
                    _local_22 = -862048943;
                    _local_23 = 461845907;
                    _local_24 = (li32(_arg_1) * _local_22);
                    _local_24 = ((_local_24 << 15) | (_local_24 >>> 17));
                    _local_19 = (_local_19 ^ (_local_24 * _local_23));
                    _local_19 = ((_local_19 << 13) | (_local_19 >>> 19));
                    _local_19 = ((_local_19 * 5) + -430675100);
                    _local_25 = (_local_19 ^ 0x04);
                    _local_25 = (_local_25 ^ (_local_25 >>> 16));
                    _local_25 = (_local_25 * -2048144789);
                    _local_25 = (_local_25 ^ (_local_25 >>> 13));
                    _local_25 = (_local_25 * -1028477387);
                    _local_18 = ((_local_25 ^ (_local_25 >>> 16)) & 0xFFFF);
                    _local_17 = (_local_20.addr + (_local_18 * 5));
                    _local_18 = 3;
                    _local_19 = -1;
                    _local_23 = li32(_local_17 + 1);
                    if ((((_local_23 >= (0)) && (li32(_arg_1) == li32(_local_23))) && ((_arg_1 - _local_23) <= _local_20.windowSize)))
                    {
                        _local_24 = (_arg_1 + 4);
                        _local_22 = 4;
                        _local_23 = (_local_23 + 4);
                        while (((li32(_local_23) == (li32(_local_24))) && ((_local_22 + 4) <= _local_20.maxMatchLength)))
                        {
                            _local_22 = (_local_22 + 4);
                            _local_23 = (_local_23 + 4);
                            _local_24 = (_local_24 + 4);
                        };
                        while (((li8(_local_23) == (li8(_local_24))) && (_local_22 < _local_20.maxMatchLength)))
                        {
                            _local_22++;
                            _local_23++;
                            _local_24++;
                        };
                        _local_18 = _local_22;
                        _local_19 = _local_23;
                    };
                    _local_25 = 5;
                    _local_26 = 9;
                    while (_local_25 < _local_26)
                    {
                        _local_27 = _local_25++;
                        _local_30 = li32(_arg_1);
                        si32(_local_30, _local_20.hashScratchAddr);
                        _local_30 = li32(_arg_1 + 4);
                        si32(_local_30, (_local_20.hashScratchAddr + 4));
                        si32(0, (_local_20.hashScratchAddr + _local_27));
                        _local_30 = 775236557;
                        _local_31 = -862048943;
                        _local_32 = 461845907;
                        _local_33 = (li32(_local_20.hashScratchAddr) * _local_31);
                        _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                        _local_30 = (_local_30 ^ (_local_33 * _local_32));
                        _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                        _local_30 = ((_local_30 * 5) + -430675100);
                        _local_33 = (li32(_local_20.hashScratchAddr + 4) * _local_31);
                        _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                        _local_30 = (_local_30 ^ (_local_33 * _local_32));
                        _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                        _local_30 = ((_local_30 * 5) + -430675100);
                        _local_34 = (_local_30 ^ _local_27);
                        _local_34 = (_local_34 ^ (_local_34 >>> 16));
                        _local_34 = (_local_34 * -2048144789);
                        _local_34 = (_local_34 ^ (_local_34 >>> 13));
                        _local_34 = (_local_34 * -1028477387);
                        _local_29 = ((_local_34 ^ (_local_34 >>> 16)) & 0xFFFF);
                        _local_28 = ((_local_20.addr + (_local_29 * 5)) + 1);
                        _local_23 = li32(_local_28);
                        if (((((_local_23 >= (0)) && (li32((_local_23 + _local_18) - 3) == li32((_arg_1 + _local_18) - 3))) && (li32(_arg_1) == li32(_local_23))) && ((_arg_1 - _local_23) <= _local_20.windowSize)))
                        {
                            _local_24 = (_arg_1 + 4);
                            _local_22 = 4;
                            _local_23 = (_local_23 + 4);
                            while (((li32(_local_23) == (li32(_local_24))) && ((_local_22 + 4) <= _local_20.maxMatchLength)))
                            {
                                _local_22 = (_local_22 + 4);
                                _local_23 = (_local_23 + 4);
                                _local_24 = (_local_24 + 4);
                            };
                            while (((li8(_local_23) == (li8(_local_24))) && (_local_22 < _local_20.maxMatchLength)))
                            {
                                _local_22++;
                                _local_23++;
                                _local_24++;
                            };
                            if (_local_22 > _local_18)
                            {
                                _local_18 = _local_22;
                                _local_19 = _local_23;
                            };
                        };
                    };
                    si32((((_arg_1 - (_local_19 - _local_18)) << 16) | _local_18), _local_20.resultAddr);
                    _local_18 = _local_17;
                    _local_19 = 4;
                    _local_22 = _arg_1;
                    _local_23 = li8(_local_18);
                    if (((_local_23 < (8)) && (_local_23 >= 0)))
                    {
                        _local_24 = li32(_local_18 + 1);
                        si8(_local_19, _local_18);
                        si32(_local_22, (_local_18 + 1));
                        _local_19 = (_local_23 + 1);
                        _local_22 = _local_24;
                        _local_26 = li32(_local_22);
                        si32(_local_26, _local_20.hashScratchAddr);
                        _local_26 = li32(_local_22 + 4);
                        si32(_local_26, (_local_20.hashScratchAddr + 4));
                        si32(0, (_local_20.hashScratchAddr + _local_19));
                        _local_26 = 775236557;
                        _local_27 = -862048943;
                        _local_28 = 461845907;
                        _local_29 = (li32(_local_20.hashScratchAddr) * _local_27);
                        _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                        _local_26 = (_local_26 ^ (_local_29 * _local_28));
                        _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                        _local_26 = ((_local_26 * 5) + -430675100);
                        _local_29 = (li32(_local_20.hashScratchAddr + 4) * _local_27);
                        _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                        _local_26 = (_local_26 ^ (_local_29 * _local_28));
                        _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                        _local_26 = ((_local_26 * 5) + -430675100);
                        _local_30 = (_local_26 ^ _local_19);
                        _local_30 = (_local_30 ^ (_local_30 >>> 16));
                        _local_30 = (_local_30 * -2048144789);
                        _local_30 = (_local_30 ^ (_local_30 >>> 13));
                        _local_30 = (_local_30 * -1028477387);
                        _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                        _local_18 = (_local_20.addr + (_local_25 * 5));
                        _local_23 = li8(_local_18);
                        if (((_local_23 < (8)) && (_local_23 >= 0)))
                        {
                            _local_24 = li32(_local_18 + 1);
                            si8(_local_19, _local_18);
                            si32(_local_22, (_local_18 + 1));
                            _local_19 = (_local_23 + 1);
                            _local_22 = _local_24;
                            _local_26 = li32(_local_22);
                            si32(_local_26, _local_20.hashScratchAddr);
                            _local_26 = li32(_local_22 + 4);
                            si32(_local_26, (_local_20.hashScratchAddr + 4));
                            si32(0, (_local_20.hashScratchAddr + _local_19));
                            _local_26 = 775236557;
                            _local_27 = -862048943;
                            _local_28 = 461845907;
                            _local_29 = (li32(_local_20.hashScratchAddr) * _local_27);
                            _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                            _local_26 = (_local_26 ^ (_local_29 * _local_28));
                            _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                            _local_26 = ((_local_26 * 5) + -430675100);
                            _local_29 = (li32(_local_20.hashScratchAddr + 4) * _local_27);
                            _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                            _local_26 = (_local_26 ^ (_local_29 * _local_28));
                            _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                            _local_26 = ((_local_26 * 5) + -430675100);
                            _local_30 = (_local_26 ^ _local_19);
                            _local_30 = (_local_30 ^ (_local_30 >>> 16));
                            _local_30 = (_local_30 * -2048144789);
                            _local_30 = (_local_30 ^ (_local_30 >>> 13));
                            _local_30 = (_local_30 * -1028477387);
                            _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                            _local_18 = (_local_20.addr + (_local_25 * 5));
                            _local_23 = li8(_local_18);
                            if (((_local_23 < (8)) && (_local_23 >= 0)))
                            {
                                _local_24 = li32(_local_18 + 1);
                                si8(_local_19, _local_18);
                                si32(_local_22, (_local_18 + 1));
                                _local_19 = (_local_23 + 1);
                                _local_22 = _local_24;
                                _local_26 = li32(_local_22);
                                si32(_local_26, _local_20.hashScratchAddr);
                                _local_26 = li32(_local_22 + 4);
                                si32(_local_26, (_local_20.hashScratchAddr + 4));
                                si32(0, (_local_20.hashScratchAddr + _local_19));
                                _local_26 = 775236557;
                                _local_27 = -862048943;
                                _local_28 = 461845907;
                                _local_29 = (li32(_local_20.hashScratchAddr) * _local_27);
                                _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                _local_26 = ((_local_26 * 5) + -430675100);
                                _local_29 = (li32(_local_20.hashScratchAddr + 4) * _local_27);
                                _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                _local_26 = ((_local_26 * 5) + -430675100);
                                _local_30 = (_local_26 ^ _local_19);
                                _local_30 = (_local_30 ^ (_local_30 >>> 16));
                                _local_30 = (_local_30 * -2048144789);
                                _local_30 = (_local_30 ^ (_local_30 >>> 13));
                                _local_30 = (_local_30 * -1028477387);
                                _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                                _local_18 = (_local_20.addr + (_local_25 * 5));
                                _local_23 = li8(_local_18);
                                if (((_local_23 < (8)) && (_local_23 >= 0)))
                                {
                                    _local_24 = li32(_local_18 + 1);
                                    si8(_local_19, _local_18);
                                    si32(_local_22, (_local_18 + 1));
                                    _local_19 = (_local_23 + 1);
                                    _local_22 = _local_24;
                                    _local_26 = li32(_local_22);
                                    si32(_local_26, _local_20.hashScratchAddr);
                                    _local_26 = li32(_local_22 + 4);
                                    si32(_local_26, (_local_20.hashScratchAddr + 4));
                                    si32(0, (_local_20.hashScratchAddr + _local_19));
                                    _local_26 = 775236557;
                                    _local_27 = -862048943;
                                    _local_28 = 461845907;
                                    _local_29 = (li32(_local_20.hashScratchAddr) * _local_27);
                                    _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                    _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                    _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                    _local_26 = ((_local_26 * 5) + -430675100);
                                    _local_29 = (li32(_local_20.hashScratchAddr + 4) * _local_27);
                                    _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                    _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                    _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                    _local_26 = ((_local_26 * 5) + -430675100);
                                    _local_30 = (_local_26 ^ _local_19);
                                    _local_30 = (_local_30 ^ (_local_30 >>> 16));
                                    _local_30 = (_local_30 * -2048144789);
                                    _local_30 = (_local_30 ^ (_local_30 >>> 13));
                                    _local_30 = (_local_30 * -1028477387);
                                    _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                                    _local_18 = (_local_20.addr + (_local_25 * 5));
                                };
                            };
                        };
                    };
                    si8(_local_19, _local_18);
                    si32(_local_22, (_local_18 + 1));
                    _local_20.resultAddr = (_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07));
                }
                else
                {
                    if (_local_11 < _local_5)
                    {
                        _local_19 = 775236557;
                        _local_22 = -862048943;
                        _local_23 = 461845907;
                        _local_24 = (li32(_arg_1) * _local_22);
                        _local_24 = ((_local_24 << 15) | (_local_24 >>> 17));
                        _local_19 = (_local_19 ^ (_local_24 * _local_23));
                        _local_19 = ((_local_19 << 13) | (_local_19 >>> 19));
                        _local_19 = ((_local_19 * 5) + -430675100);
                        _local_25 = (_local_19 ^ 0x04);
                        _local_25 = (_local_25 ^ (_local_25 >>> 16));
                        _local_25 = (_local_25 * -2048144789);
                        _local_25 = (_local_25 ^ (_local_25 >>> 13));
                        _local_25 = (_local_25 * -1028477387);
                        _local_18 = ((_local_25 ^ (_local_25 >>> 16)) & 0xFFFF);
                        _local_17 = (_local_20.addr + (_local_18 * 5));
                        _local_18 = 3;
                        _local_19 = -1;
                        _local_23 = li32(_local_17 + 1);
                        if ((((_local_23 >= (0)) && (li32(_arg_1) == li32(_local_23))) && ((_arg_1 - _local_23) <= _local_20.windowSize)))
                        {
                            _local_24 = (_arg_1 + 4);
                            _local_22 = 4;
                            _local_23 = (_local_23 + 4);
                            while (((((_local_24 + 4) <= (_local_3)) && (li32(_local_23) == li32(_local_24))) && ((_local_22 + 4) <= _local_20.maxMatchLength)))
                            {
                                _local_22 = (_local_22 + 4);
                                _local_23 = (_local_23 + 4);
                                _local_24 = (_local_24 + 4);
                            };
                            while ((((_local_24 < (_local_3)) && (li8(_local_23) == li8(_local_24))) && (_local_22 < _local_20.maxMatchLength)))
                            {
                                _local_22++;
                                _local_23++;
                                _local_24++;
                            };
                            _local_18 = _local_22;
                            _local_19 = _local_23;
                        };
                        _local_25 = 5;
                        _local_26 = 9;
                        while (_local_25 < _local_26)
                        {
                            _local_27 = _local_25++;
                            _local_30 = li32(_arg_1);
                            si32(_local_30, _local_20.hashScratchAddr);
                            _local_30 = li32(_arg_1 + 4);
                            si32(_local_30, (_local_20.hashScratchAddr + 4));
                            si32(0, (_local_20.hashScratchAddr + _local_27));
                            _local_30 = 775236557;
                            _local_31 = -862048943;
                            _local_32 = 461845907;
                            _local_33 = (li32(_local_20.hashScratchAddr) * _local_31);
                            _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                            _local_30 = (_local_30 ^ (_local_33 * _local_32));
                            _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                            _local_30 = ((_local_30 * 5) + -430675100);
                            _local_33 = (li32(_local_20.hashScratchAddr + 4) * _local_31);
                            _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                            _local_30 = (_local_30 ^ (_local_33 * _local_32));
                            _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                            _local_30 = ((_local_30 * 5) + -430675100);
                            _local_34 = (_local_30 ^ _local_27);
                            _local_34 = (_local_34 ^ (_local_34 >>> 16));
                            _local_34 = (_local_34 * -2048144789);
                            _local_34 = (_local_34 ^ (_local_34 >>> 13));
                            _local_34 = (_local_34 * -1028477387);
                            _local_29 = ((_local_34 ^ (_local_34 >>> 16)) & 0xFFFF);
                            _local_28 = ((_local_20.addr + (_local_29 * 5)) + 1);
                            _local_23 = li32(_local_28);
                            if ((((_local_23 >= (0)) && (li32(_arg_1) == li32(_local_23))) && ((_arg_1 - _local_23) <= _local_20.windowSize)))
                            {
                                _local_24 = (_arg_1 + 4);
                                _local_22 = 4;
                                _local_23 = (_local_23 + 4);
                                while (((((_local_24 + 4) <= (_local_3)) && (li32(_local_23) == li32(_local_24))) && ((_local_22 + 4) <= _local_20.maxMatchLength)))
                                {
                                    _local_22 = (_local_22 + 4);
                                    _local_23 = (_local_23 + 4);
                                    _local_24 = (_local_24 + 4);
                                };
                                while ((((_local_24 < (_local_3)) && (li8(_local_23) == li8(_local_24))) && (_local_22 < _local_20.maxMatchLength)))
                                {
                                    _local_22++;
                                    _local_23++;
                                    _local_24++;
                                };
                                if (_local_22 > _local_18)
                                {
                                    _local_18 = _local_22;
                                    _local_19 = _local_23;
                                };
                            };
                        };
                        si32((((_arg_1 - (_local_19 - _local_18)) << 16) | _local_18), _local_20.resultAddr);
                        _local_18 = _local_17;
                        _local_19 = 4;
                        _local_22 = _arg_1;
                        _local_23 = li8(_local_18);
                        if (((_local_23 < (8)) && (_local_23 >= 0)))
                        {
                            _local_24 = li32(_local_18 + 1);
                            si8(_local_19, _local_18);
                            si32(_local_22, (_local_18 + 1));
                            _local_19 = (_local_23 + 1);
                            _local_22 = _local_24;
                            _local_26 = li32(_local_22);
                            si32(_local_26, _local_20.hashScratchAddr);
                            _local_26 = li32(_local_22 + 4);
                            si32(_local_26, (_local_20.hashScratchAddr + 4));
                            si32(0, (_local_20.hashScratchAddr + _local_19));
                            _local_26 = 775236557;
                            _local_27 = -862048943;
                            _local_28 = 461845907;
                            _local_29 = (li32(_local_20.hashScratchAddr) * _local_27);
                            _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                            _local_26 = (_local_26 ^ (_local_29 * _local_28));
                            _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                            _local_26 = ((_local_26 * 5) + -430675100);
                            _local_29 = (li32(_local_20.hashScratchAddr + 4) * _local_27);
                            _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                            _local_26 = (_local_26 ^ (_local_29 * _local_28));
                            _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                            _local_26 = ((_local_26 * 5) + -430675100);
                            _local_30 = (_local_26 ^ _local_19);
                            _local_30 = (_local_30 ^ (_local_30 >>> 16));
                            _local_30 = (_local_30 * -2048144789);
                            _local_30 = (_local_30 ^ (_local_30 >>> 13));
                            _local_30 = (_local_30 * -1028477387);
                            _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                            _local_18 = (_local_20.addr + (_local_25 * 5));
                            _local_23 = li8(_local_18);
                            if (((_local_23 < (8)) && (_local_23 >= 0)))
                            {
                                _local_24 = li32(_local_18 + 1);
                                si8(_local_19, _local_18);
                                si32(_local_22, (_local_18 + 1));
                                _local_19 = (_local_23 + 1);
                                _local_22 = _local_24;
                                _local_26 = li32(_local_22);
                                si32(_local_26, _local_20.hashScratchAddr);
                                _local_26 = li32(_local_22 + 4);
                                si32(_local_26, (_local_20.hashScratchAddr + 4));
                                si32(0, (_local_20.hashScratchAddr + _local_19));
                                _local_26 = 775236557;
                                _local_27 = -862048943;
                                _local_28 = 461845907;
                                _local_29 = (li32(_local_20.hashScratchAddr) * _local_27);
                                _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                _local_26 = ((_local_26 * 5) + -430675100);
                                _local_29 = (li32(_local_20.hashScratchAddr + 4) * _local_27);
                                _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                _local_26 = ((_local_26 * 5) + -430675100);
                                _local_30 = (_local_26 ^ _local_19);
                                _local_30 = (_local_30 ^ (_local_30 >>> 16));
                                _local_30 = (_local_30 * -2048144789);
                                _local_30 = (_local_30 ^ (_local_30 >>> 13));
                                _local_30 = (_local_30 * -1028477387);
                                _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                                _local_18 = (_local_20.addr + (_local_25 * 5));
                                _local_23 = li8(_local_18);
                                if (((_local_23 < (8)) && (_local_23 >= 0)))
                                {
                                    _local_24 = li32(_local_18 + 1);
                                    si8(_local_19, _local_18);
                                    si32(_local_22, (_local_18 + 1));
                                    _local_19 = (_local_23 + 1);
                                    _local_22 = _local_24;
                                    _local_26 = li32(_local_22);
                                    si32(_local_26, _local_20.hashScratchAddr);
                                    _local_26 = li32(_local_22 + 4);
                                    si32(_local_26, (_local_20.hashScratchAddr + 4));
                                    si32(0, (_local_20.hashScratchAddr + _local_19));
                                    _local_26 = 775236557;
                                    _local_27 = -862048943;
                                    _local_28 = 461845907;
                                    _local_29 = (li32(_local_20.hashScratchAddr) * _local_27);
                                    _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                    _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                    _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                    _local_26 = ((_local_26 * 5) + -430675100);
                                    _local_29 = (li32(_local_20.hashScratchAddr + 4) * _local_27);
                                    _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                    _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                    _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                    _local_26 = ((_local_26 * 5) + -430675100);
                                    _local_30 = (_local_26 ^ _local_19);
                                    _local_30 = (_local_30 ^ (_local_30 >>> 16));
                                    _local_30 = (_local_30 * -2048144789);
                                    _local_30 = (_local_30 ^ (_local_30 >>> 13));
                                    _local_30 = (_local_30 * -1028477387);
                                    _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                                    _local_18 = (_local_20.addr + (_local_25 * 5));
                                    _local_23 = li8(_local_18);
                                    if (((_local_23 < (8)) && (_local_23 >= 0)))
                                    {
                                        _local_24 = li32(_local_18 + 1);
                                        si8(_local_19, _local_18);
                                        si32(_local_22, (_local_18 + 1));
                                        _local_19 = (_local_23 + 1);
                                        _local_22 = _local_24;
                                        _local_26 = li32(_local_22);
                                        si32(_local_26, _local_20.hashScratchAddr);
                                        _local_26 = li32(_local_22 + 4);
                                        si32(_local_26, (_local_20.hashScratchAddr + 4));
                                        si32(0, (_local_20.hashScratchAddr + _local_19));
                                        _local_26 = 775236557;
                                        _local_27 = -862048943;
                                        _local_28 = 461845907;
                                        _local_29 = (li32(_local_20.hashScratchAddr) * _local_27);
                                        _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                        _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                        _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                        _local_26 = ((_local_26 * 5) + -430675100);
                                        _local_29 = (li32(_local_20.hashScratchAddr + 4) * _local_27);
                                        _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                        _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                        _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                        _local_26 = ((_local_26 * 5) + -430675100);
                                        _local_30 = (_local_26 ^ _local_19);
                                        _local_30 = (_local_30 ^ (_local_30 >>> 16));
                                        _local_30 = (_local_30 * -2048144789);
                                        _local_30 = (_local_30 ^ (_local_30 >>> 13));
                                        _local_30 = (_local_30 * -1028477387);
                                        _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                                        _local_18 = (_local_20.addr + (_local_25 * 5));
                                    };
                                };
                            };
                        };
                        si8(_local_19, _local_18);
                        si32(_local_22, (_local_18 + 1));
                        _local_20.resultAddr = (_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07));
                    };
                };
                while (_local_11 < _local_4)
                {
                    _local_22 = 775236557;
                    _local_23 = -862048943;
                    _local_24 = 461845907;
                    _local_25 = (li32(_local_11 + 1) * _local_23);
                    _local_25 = ((_local_25 << 15) | (_local_25 >>> 17));
                    _local_22 = (_local_22 ^ (_local_25 * _local_24));
                    _local_22 = ((_local_22 << 13) | (_local_22 >>> 19));
                    _local_22 = ((_local_22 * 5) + -430675100);
                    _local_26 = (_local_22 ^ 0x04);
                    _local_26 = (_local_26 ^ (_local_26 >>> 16));
                    _local_26 = (_local_26 * -2048144789);
                    _local_26 = (_local_26 ^ (_local_26 >>> 13));
                    _local_26 = (_local_26 * -1028477387);
                    _local_19 = ((_local_26 ^ (_local_26 >>> 16)) & 0xFFFF);
                    _local_18 = (_local_20.addr + (_local_19 * 5));
                    if (li16(_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07)) < (_local_20.avgMatchLength + 4))
                    {
                        _local_19 = (_local_11 + 1);
                        _local_22 = 3;
                        _local_23 = -1;
                        _local_25 = li32(_local_18 + 1);
                        if ((((_local_25 >= (0)) && (li32(_local_19) == li32(_local_25))) && ((_local_19 - _local_25) <= _local_20.windowSize)))
                        {
                            _local_26 = (_local_19 + 4);
                            _local_24 = 4;
                            _local_25 = (_local_25 + 4);
                            while (((li32(_local_25) == (li32(_local_26))) && ((_local_24 + 4) <= _local_20.maxMatchLength)))
                            {
                                _local_24 = (_local_24 + 4);
                                _local_25 = (_local_25 + 4);
                                _local_26 = (_local_26 + 4);
                            };
                            while (((li8(_local_25) == (li8(_local_26))) && (_local_24 < _local_20.maxMatchLength)))
                            {
                                _local_24++;
                                _local_25++;
                                _local_26++;
                            };
                            _local_22 = _local_24;
                            _local_23 = _local_25;
                        };
                        _local_27 = 5;
                        _local_28 = 9;
                        while (_local_27 < _local_28)
                        {
                            _local_29 = _local_27++;
                            _local_32 = li32(_local_19);
                            si32(_local_32, _local_20.hashScratchAddr);
                            _local_32 = li32(_local_19 + 4);
                            si32(_local_32, (_local_20.hashScratchAddr + 4));
                            si32(0, (_local_20.hashScratchAddr + _local_29));
                            _local_32 = 775236557;
                            _local_33 = -862048943;
                            _local_34 = 461845907;
                            _local_35 = (li32(_local_20.hashScratchAddr) * _local_33);
                            _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                            _local_32 = (_local_32 ^ (_local_35 * _local_34));
                            _local_32 = ((_local_32 << 13) | (_local_32 >>> 19));
                            _local_32 = ((_local_32 * 5) + -430675100);
                            _local_35 = (li32(_local_20.hashScratchAddr + 4) * _local_33);
                            _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                            _local_32 = (_local_32 ^ (_local_35 * _local_34));
                            _local_32 = ((_local_32 << 13) | (_local_32 >>> 19));
                            _local_32 = ((_local_32 * 5) + -430675100);
                            _local_36 = (_local_32 ^ _local_29);
                            _local_36 = (_local_36 ^ (_local_36 >>> 16));
                            _local_36 = (_local_36 * -2048144789);
                            _local_36 = (_local_36 ^ (_local_36 >>> 13));
                            _local_36 = (_local_36 * -1028477387);
                            _local_31 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                            _local_30 = ((_local_20.addr + (_local_31 * 5)) + 1);
                            _local_25 = li32(_local_30);
                            if (((((_local_25 >= (0)) && (li32((_local_25 + _local_22) - 3) == li32((_local_19 + _local_22) - 3))) && (li32(_local_19) == li32(_local_25))) && ((_local_19 - _local_25) <= _local_20.windowSize)))
                            {
                                _local_26 = (_local_19 + 4);
                                _local_24 = 4;
                                _local_25 = (_local_25 + 4);
                                while (((li32(_local_25) == (li32(_local_26))) && ((_local_24 + 4) <= _local_20.maxMatchLength)))
                                {
                                    _local_24 = (_local_24 + 4);
                                    _local_25 = (_local_25 + 4);
                                    _local_26 = (_local_26 + 4);
                                };
                                while (((li8(_local_25) == (li8(_local_26))) && (_local_24 < _local_20.maxMatchLength)))
                                {
                                    _local_24++;
                                    _local_25++;
                                    _local_26++;
                                };
                                if (_local_24 > _local_22)
                                {
                                    _local_22 = _local_24;
                                    _local_23 = _local_25;
                                };
                            };
                        };
                        si32((((_local_19 - (_local_23 - _local_22)) << 16) | _local_22), _local_20.resultAddr);
                    }
                    else
                    {
                        si32(0, _local_20.resultAddr);
                    };
                    _local_19 = _local_18;
                    _local_22 = 4;
                    _local_23 = (_local_11 + 1);
                    _local_24 = li8(_local_19);
                    if (((_local_24 < (8)) && (_local_24 >= 0)))
                    {
                        _local_25 = li32(_local_19 + 1);
                        si8(_local_22, _local_19);
                        si32(_local_23, (_local_19 + 1));
                        _local_22 = (_local_24 + 1);
                        _local_23 = _local_25;
                        _local_27 = li32(_local_23);
                        si32(_local_27, _local_20.hashScratchAddr);
                        _local_27 = li32(_local_23 + 4);
                        si32(_local_27, (_local_20.hashScratchAddr + 4));
                        si32(0, (_local_20.hashScratchAddr + _local_22));
                        _local_27 = 775236557;
                        _local_28 = -862048943;
                        _local_29 = 461845907;
                        _local_30 = (li32(_local_20.hashScratchAddr) * _local_28);
                        _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                        _local_27 = (_local_27 ^ (_local_30 * _local_29));
                        _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                        _local_27 = ((_local_27 * 5) + -430675100);
                        _local_30 = (li32(_local_20.hashScratchAddr + 4) * _local_28);
                        _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                        _local_27 = (_local_27 ^ (_local_30 * _local_29));
                        _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                        _local_27 = ((_local_27 * 5) + -430675100);
                        _local_31 = (_local_27 ^ _local_22);
                        _local_31 = (_local_31 ^ (_local_31 >>> 16));
                        _local_31 = (_local_31 * -2048144789);
                        _local_31 = (_local_31 ^ (_local_31 >>> 13));
                        _local_31 = (_local_31 * -1028477387);
                        _local_26 = ((_local_31 ^ (_local_31 >>> 16)) & 0xFFFF);
                        _local_19 = (_local_20.addr + (_local_26 * 5));
                        _local_24 = li8(_local_19);
                        if (((_local_24 < (8)) && (_local_24 >= 0)))
                        {
                            _local_25 = li32(_local_19 + 1);
                            si8(_local_22, _local_19);
                            si32(_local_23, (_local_19 + 1));
                            _local_22 = (_local_24 + 1);
                            _local_23 = _local_25;
                            _local_27 = li32(_local_23);
                            si32(_local_27, _local_20.hashScratchAddr);
                            _local_27 = li32(_local_23 + 4);
                            si32(_local_27, (_local_20.hashScratchAddr + 4));
                            si32(0, (_local_20.hashScratchAddr + _local_22));
                            _local_27 = 775236557;
                            _local_28 = -862048943;
                            _local_29 = 461845907;
                            _local_30 = (li32(_local_20.hashScratchAddr) * _local_28);
                            _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                            _local_27 = (_local_27 ^ (_local_30 * _local_29));
                            _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                            _local_27 = ((_local_27 * 5) + -430675100);
                            _local_30 = (li32(_local_20.hashScratchAddr + 4) * _local_28);
                            _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                            _local_27 = (_local_27 ^ (_local_30 * _local_29));
                            _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                            _local_27 = ((_local_27 * 5) + -430675100);
                            _local_31 = (_local_27 ^ _local_22);
                            _local_31 = (_local_31 ^ (_local_31 >>> 16));
                            _local_31 = (_local_31 * -2048144789);
                            _local_31 = (_local_31 ^ (_local_31 >>> 13));
                            _local_31 = (_local_31 * -1028477387);
                            _local_26 = ((_local_31 ^ (_local_31 >>> 16)) & 0xFFFF);
                            _local_19 = (_local_20.addr + (_local_26 * 5));
                            _local_24 = li8(_local_19);
                            if (((_local_24 < (8)) && (_local_24 >= 0)))
                            {
                                _local_25 = li32(_local_19 + 1);
                                si8(_local_22, _local_19);
                                si32(_local_23, (_local_19 + 1));
                                _local_22 = (_local_24 + 1);
                                _local_23 = _local_25;
                                _local_27 = li32(_local_23);
                                si32(_local_27, _local_20.hashScratchAddr);
                                _local_27 = li32(_local_23 + 4);
                                si32(_local_27, (_local_20.hashScratchAddr + 4));
                                si32(0, (_local_20.hashScratchAddr + _local_22));
                                _local_27 = 775236557;
                                _local_28 = -862048943;
                                _local_29 = 461845907;
                                _local_30 = (li32(_local_20.hashScratchAddr) * _local_28);
                                _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                _local_27 = ((_local_27 * 5) + -430675100);
                                _local_30 = (li32(_local_20.hashScratchAddr + 4) * _local_28);
                                _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                _local_27 = ((_local_27 * 5) + -430675100);
                                _local_31 = (_local_27 ^ _local_22);
                                _local_31 = (_local_31 ^ (_local_31 >>> 16));
                                _local_31 = (_local_31 * -2048144789);
                                _local_31 = (_local_31 ^ (_local_31 >>> 13));
                                _local_31 = (_local_31 * -1028477387);
                                _local_26 = ((_local_31 ^ (_local_31 >>> 16)) & 0xFFFF);
                                _local_19 = (_local_20.addr + (_local_26 * 5));
                                _local_24 = li8(_local_19);
                                if (((_local_24 < (8)) && (_local_24 >= 0)))
                                {
                                    _local_25 = li32(_local_19 + 1);
                                    si8(_local_22, _local_19);
                                    si32(_local_23, (_local_19 + 1));
                                    _local_22 = (_local_24 + 1);
                                    _local_23 = _local_25;
                                    _local_27 = li32(_local_23);
                                    si32(_local_27, _local_20.hashScratchAddr);
                                    _local_27 = li32(_local_23 + 4);
                                    si32(_local_27, (_local_20.hashScratchAddr + 4));
                                    si32(0, (_local_20.hashScratchAddr + _local_22));
                                    _local_27 = 775236557;
                                    _local_28 = -862048943;
                                    _local_29 = 461845907;
                                    _local_30 = (li32(_local_20.hashScratchAddr) * _local_28);
                                    _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                    _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                    _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                    _local_27 = ((_local_27 * 5) + -430675100);
                                    _local_30 = (li32(_local_20.hashScratchAddr + 4) * _local_28);
                                    _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                    _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                    _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                    _local_27 = ((_local_27 * 5) + -430675100);
                                    _local_31 = (_local_27 ^ _local_22);
                                    _local_31 = (_local_31 ^ (_local_31 >>> 16));
                                    _local_31 = (_local_31 * -2048144789);
                                    _local_31 = (_local_31 ^ (_local_31 >>> 13));
                                    _local_31 = (_local_31 * -1028477387);
                                    _local_26 = ((_local_31 ^ (_local_31 >>> 16)) & 0xFFFF);
                                    _local_19 = (_local_20.addr + (_local_26 * 5));
                                };
                            };
                        };
                    };
                    si8(_local_22, _local_19);
                    si32(_local_23, (_local_19 + 1));
                    _local_20.resultAddr = (_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07));
                    if (li16(_local_20.resultAddr) >= 4)
                    {
                        _local_17 = li16(_local_20.resultAddr);
                        if (li16(_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07)) > _local_17)
                        {
                            si32(0, _local_20.resultAddr);
                        }
                        else
                        {
                            _local_20.avgMatchLength = ((((_local_20.avgMatchLength << 1) + (_local_20.avgMatchLength << 2)) + (_local_17 << 1)) >>> 3);
                            if (_local_17 < (_local_20.avgMatchLength + 4))
                            {
                                _local_19 = ((_local_11 + 1) + 1);
                                _local_22 = (_local_11 + _local_17);
                                while (_local_19 < _local_22)
                                {
                                    _local_23 = _local_19++;
                                    _local_24 = 4;
                                    _local_25 = _local_23;
                                    _local_30 = 775236557;
                                    _local_31 = -862048943;
                                    _local_32 = 461845907;
                                    _local_33 = (li32(_local_23) * _local_31);
                                    _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                                    _local_30 = (_local_30 ^ (_local_33 * _local_32));
                                    _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                    _local_30 = ((_local_30 * 5) + -430675100);
                                    _local_34 = (_local_30 ^ 0x04);
                                    _local_34 = (_local_34 ^ (_local_34 >>> 16));
                                    _local_34 = (_local_34 * -2048144789);
                                    _local_34 = (_local_34 ^ (_local_34 >>> 13));
                                    _local_34 = (_local_34 * -1028477387);
                                    _local_29 = ((_local_34 ^ (_local_34 >>> 16)) & 0xFFFF);
                                    _local_28 = (_local_20.addr + (_local_29 * 5));
                                    _local_26 = li8(_local_28);
                                    if (((_local_26 < (8)) && (_local_26 >= 0)))
                                    {
                                        _local_27 = li32(_local_28 + 1);
                                        si8(_local_24, _local_28);
                                        si32(_local_25, (_local_28 + 1));
                                        _local_24 = (_local_26 + 1);
                                        _local_25 = _local_27;
                                        _local_30 = li32(_local_25);
                                        si32(_local_30, _local_20.hashScratchAddr);
                                        _local_30 = li32(_local_25 + 4);
                                        si32(_local_30, (_local_20.hashScratchAddr + 4));
                                        si32(0, (_local_20.hashScratchAddr + _local_24));
                                        _local_30 = 775236557;
                                        _local_31 = -862048943;
                                        _local_32 = 461845907;
                                        _local_33 = (li32(_local_20.hashScratchAddr) * _local_31);
                                        _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                                        _local_30 = (_local_30 ^ (_local_33 * _local_32));
                                        _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                        _local_30 = ((_local_30 * 5) + -430675100);
                                        _local_33 = (li32(_local_20.hashScratchAddr + 4) * _local_31);
                                        _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                                        _local_30 = (_local_30 ^ (_local_33 * _local_32));
                                        _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                        _local_30 = ((_local_30 * 5) + -430675100);
                                        _local_34 = (_local_30 ^ _local_24);
                                        _local_34 = (_local_34 ^ (_local_34 >>> 16));
                                        _local_34 = (_local_34 * -2048144789);
                                        _local_34 = (_local_34 ^ (_local_34 >>> 13));
                                        _local_34 = (_local_34 * -1028477387);
                                        _local_29 = ((_local_34 ^ (_local_34 >>> 16)) & 0xFFFF);
                                        _local_28 = (_local_20.addr + (_local_29 * 5));
                                        _local_26 = li8(_local_28);
                                        if (((_local_26 < (8)) && (_local_26 >= 0)))
                                        {
                                            _local_27 = li32(_local_28 + 1);
                                            si8(_local_24, _local_28);
                                            si32(_local_25, (_local_28 + 1));
                                            _local_24 = (_local_26 + 1);
                                            _local_25 = _local_27;
                                            _local_30 = li32(_local_25);
                                            si32(_local_30, _local_20.hashScratchAddr);
                                            _local_30 = li32(_local_25 + 4);
                                            si32(_local_30, (_local_20.hashScratchAddr + 4));
                                            si32(0, (_local_20.hashScratchAddr + _local_24));
                                            _local_30 = 775236557;
                                            _local_31 = -862048943;
                                            _local_32 = 461845907;
                                            _local_33 = (li32(_local_20.hashScratchAddr) * _local_31);
                                            _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                                            _local_30 = (_local_30 ^ (_local_33 * _local_32));
                                            _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                            _local_30 = ((_local_30 * 5) + -430675100);
                                            _local_33 = (li32(_local_20.hashScratchAddr + 4) * _local_31);
                                            _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                                            _local_30 = (_local_30 ^ (_local_33 * _local_32));
                                            _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                            _local_30 = ((_local_30 * 5) + -430675100);
                                            _local_34 = (_local_30 ^ _local_24);
                                            _local_34 = (_local_34 ^ (_local_34 >>> 16));
                                            _local_34 = (_local_34 * -2048144789);
                                            _local_34 = (_local_34 ^ (_local_34 >>> 13));
                                            _local_34 = (_local_34 * -1028477387);
                                            _local_29 = ((_local_34 ^ (_local_34 >>> 16)) & 0xFFFF);
                                            _local_28 = (_local_20.addr + (_local_29 * 5));
                                        };
                                    };
                                    si8(_local_24, _local_28);
                                    si32(_local_25, (_local_28 + 1));
                                };
                            };
                            _local_20.resultAddr = (_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07));
                            _local_19 = (_local_11 + _local_17);
                            _local_24 = 775236557;
                            _local_25 = -862048943;
                            _local_26 = 461845907;
                            _local_27 = (li32(_local_19) * _local_25);
                            _local_27 = ((_local_27 << 15) | (_local_27 >>> 17));
                            _local_24 = (_local_24 ^ (_local_27 * _local_26));
                            _local_24 = ((_local_24 << 13) | (_local_24 >>> 19));
                            _local_24 = ((_local_24 * 5) + -430675100);
                            _local_28 = (_local_24 ^ 0x04);
                            _local_28 = (_local_28 ^ (_local_28 >>> 16));
                            _local_28 = (_local_28 * -2048144789);
                            _local_28 = (_local_28 ^ (_local_28 >>> 13));
                            _local_28 = (_local_28 * -1028477387);
                            _local_23 = ((_local_28 ^ (_local_28 >>> 16)) & 0xFFFF);
                            _local_22 = (_local_20.addr + (_local_23 * 5));
                            _local_23 = 3;
                            _local_24 = -1;
                            _local_26 = li32(_local_22 + 1);
                            if ((((_local_26 >= (0)) && (li32(_local_19) == li32(_local_26))) && ((_local_19 - _local_26) <= _local_20.windowSize)))
                            {
                                _local_27 = (_local_19 + 4);
                                _local_25 = 4;
                                _local_26 = (_local_26 + 4);
                                while (((li32(_local_26) == (li32(_local_27))) && ((_local_25 + 4) <= _local_20.maxMatchLength)))
                                {
                                    _local_25 = (_local_25 + 4);
                                    _local_26 = (_local_26 + 4);
                                    _local_27 = (_local_27 + 4);
                                };
                                while (((li8(_local_26) == (li8(_local_27))) && (_local_25 < _local_20.maxMatchLength)))
                                {
                                    _local_25++;
                                    _local_26++;
                                    _local_27++;
                                };
                                _local_23 = _local_25;
                                _local_24 = _local_26;
                            };
                            _local_28 = 5;
                            _local_29 = 9;
                            while (_local_28 < _local_29)
                            {
                                _local_30 = _local_28++;
                                _local_33 = li32(_local_19);
                                si32(_local_33, _local_20.hashScratchAddr);
                                _local_33 = li32(_local_19 + 4);
                                si32(_local_33, (_local_20.hashScratchAddr + 4));
                                si32(0, (_local_20.hashScratchAddr + _local_30));
                                _local_33 = 775236557;
                                _local_34 = -862048943;
                                _local_35 = 461845907;
                                _local_36 = (li32(_local_20.hashScratchAddr) * _local_34);
                                _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                _local_33 = (_local_33 ^ (_local_36 * _local_35));
                                _local_33 = ((_local_33 << 13) | (_local_33 >>> 19));
                                _local_33 = ((_local_33 * 5) + -430675100);
                                _local_36 = (li32(_local_20.hashScratchAddr + 4) * _local_34);
                                _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                _local_33 = (_local_33 ^ (_local_36 * _local_35));
                                _local_33 = ((_local_33 << 13) | (_local_33 >>> 19));
                                _local_33 = ((_local_33 * 5) + -430675100);
                                _local_37 = (_local_33 ^ _local_30);
                                _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                _local_37 = (_local_37 * -2048144789);
                                _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                _local_37 = (_local_37 * -1028477387);
                                _local_32 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                _local_31 = ((_local_20.addr + (_local_32 * 5)) + 1);
                                _local_26 = li32(_local_31);
                                if (((((_local_26 >= (0)) && (li32((_local_26 + _local_23) - 3) == li32((_local_19 + _local_23) - 3))) && (li32(_local_19) == li32(_local_26))) && ((_local_19 - _local_26) <= _local_20.windowSize)))
                                {
                                    _local_27 = (_local_19 + 4);
                                    _local_25 = 4;
                                    _local_26 = (_local_26 + 4);
                                    while (((li32(_local_26) == (li32(_local_27))) && ((_local_25 + 4) <= _local_20.maxMatchLength)))
                                    {
                                        _local_25 = (_local_25 + 4);
                                        _local_26 = (_local_26 + 4);
                                        _local_27 = (_local_27 + 4);
                                    };
                                    while (((li8(_local_26) == (li8(_local_27))) && (_local_25 < _local_20.maxMatchLength)))
                                    {
                                        _local_25++;
                                        _local_26++;
                                        _local_27++;
                                    };
                                    if (_local_25 > _local_23)
                                    {
                                        _local_23 = _local_25;
                                        _local_24 = _local_26;
                                    };
                                };
                            };
                            si32((((_local_19 - (_local_24 - _local_23)) << 16) | _local_23), _local_20.resultAddr);
                            _local_23 = _local_22;
                            _local_24 = 4;
                            _local_25 = _local_19;
                            _local_26 = li8(_local_23);
                            if (((_local_26 < (8)) && (_local_26 >= 0)))
                            {
                                _local_27 = li32(_local_23 + 1);
                                si8(_local_24, _local_23);
                                si32(_local_25, (_local_23 + 1));
                                _local_24 = (_local_26 + 1);
                                _local_25 = _local_27;
                                _local_29 = li32(_local_25);
                                si32(_local_29, _local_20.hashScratchAddr);
                                _local_29 = li32(_local_25 + 4);
                                si32(_local_29, (_local_20.hashScratchAddr + 4));
                                si32(0, (_local_20.hashScratchAddr + _local_24));
                                _local_29 = 775236557;
                                _local_30 = -862048943;
                                _local_31 = 461845907;
                                _local_32 = (li32(_local_20.hashScratchAddr) * _local_30);
                                _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                _local_29 = ((_local_29 * 5) + -430675100);
                                _local_32 = (li32(_local_20.hashScratchAddr + 4) * _local_30);
                                _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                _local_29 = ((_local_29 * 5) + -430675100);
                                _local_33 = (_local_29 ^ _local_24);
                                _local_33 = (_local_33 ^ (_local_33 >>> 16));
                                _local_33 = (_local_33 * -2048144789);
                                _local_33 = (_local_33 ^ (_local_33 >>> 13));
                                _local_33 = (_local_33 * -1028477387);
                                _local_28 = ((_local_33 ^ (_local_33 >>> 16)) & 0xFFFF);
                                _local_23 = (_local_20.addr + (_local_28 * 5));
                                _local_26 = li8(_local_23);
                                if (((_local_26 < (8)) && (_local_26 >= 0)))
                                {
                                    _local_27 = li32(_local_23 + 1);
                                    si8(_local_24, _local_23);
                                    si32(_local_25, (_local_23 + 1));
                                    _local_24 = (_local_26 + 1);
                                    _local_25 = _local_27;
                                    _local_29 = li32(_local_25);
                                    si32(_local_29, _local_20.hashScratchAddr);
                                    _local_29 = li32(_local_25 + 4);
                                    si32(_local_29, (_local_20.hashScratchAddr + 4));
                                    si32(0, (_local_20.hashScratchAddr + _local_24));
                                    _local_29 = 775236557;
                                    _local_30 = -862048943;
                                    _local_31 = 461845907;
                                    _local_32 = (li32(_local_20.hashScratchAddr) * _local_30);
                                    _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                    _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                    _local_29 = ((_local_29 * 5) + -430675100);
                                    _local_32 = (li32(_local_20.hashScratchAddr + 4) * _local_30);
                                    _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                    _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                    _local_29 = ((_local_29 * 5) + -430675100);
                                    _local_33 = (_local_29 ^ _local_24);
                                    _local_33 = (_local_33 ^ (_local_33 >>> 16));
                                    _local_33 = (_local_33 * -2048144789);
                                    _local_33 = (_local_33 ^ (_local_33 >>> 13));
                                    _local_33 = (_local_33 * -1028477387);
                                    _local_28 = ((_local_33 ^ (_local_33 >>> 16)) & 0xFFFF);
                                    _local_23 = (_local_20.addr + (_local_28 * 5));
                                    _local_26 = li8(_local_23);
                                    if (((_local_26 < (8)) && (_local_26 >= 0)))
                                    {
                                        _local_27 = li32(_local_23 + 1);
                                        si8(_local_24, _local_23);
                                        si32(_local_25, (_local_23 + 1));
                                        _local_24 = (_local_26 + 1);
                                        _local_25 = _local_27;
                                        _local_29 = li32(_local_25);
                                        si32(_local_29, _local_20.hashScratchAddr);
                                        _local_29 = li32(_local_25 + 4);
                                        si32(_local_29, (_local_20.hashScratchAddr + 4));
                                        si32(0, (_local_20.hashScratchAddr + _local_24));
                                        _local_29 = 775236557;
                                        _local_30 = -862048943;
                                        _local_31 = 461845907;
                                        _local_32 = (li32(_local_20.hashScratchAddr) * _local_30);
                                        _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_32 = (li32(_local_20.hashScratchAddr + 4) * _local_30);
                                        _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_33 = (_local_29 ^ _local_24);
                                        _local_33 = (_local_33 ^ (_local_33 >>> 16));
                                        _local_33 = (_local_33 * -2048144789);
                                        _local_33 = (_local_33 ^ (_local_33 >>> 13));
                                        _local_33 = (_local_33 * -1028477387);
                                        _local_28 = ((_local_33 ^ (_local_33 >>> 16)) & 0xFFFF);
                                        _local_23 = (_local_20.addr + (_local_28 * 5));
                                        _local_26 = li8(_local_23);
                                        if (((_local_26 < (8)) && (_local_26 >= 0)))
                                        {
                                            _local_27 = li32(_local_23 + 1);
                                            si8(_local_24, _local_23);
                                            si32(_local_25, (_local_23 + 1));
                                            _local_24 = (_local_26 + 1);
                                            _local_25 = _local_27;
                                            _local_29 = li32(_local_25);
                                            si32(_local_29, _local_20.hashScratchAddr);
                                            _local_29 = li32(_local_25 + 4);
                                            si32(_local_29, (_local_20.hashScratchAddr + 4));
                                            si32(0, (_local_20.hashScratchAddr + _local_24));
                                            _local_29 = 775236557;
                                            _local_30 = -862048943;
                                            _local_31 = 461845907;
                                            _local_32 = (li32(_local_20.hashScratchAddr) * _local_30);
                                            _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_32 = (li32(_local_20.hashScratchAddr + 4) * _local_30);
                                            _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_33 = (_local_29 ^ _local_24);
                                            _local_33 = (_local_33 ^ (_local_33 >>> 16));
                                            _local_33 = (_local_33 * -2048144789);
                                            _local_33 = (_local_33 ^ (_local_33 >>> 13));
                                            _local_33 = (_local_33 * -1028477387);
                                            _local_28 = ((_local_33 ^ (_local_33 >>> 16)) & 0xFFFF);
                                            _local_23 = (_local_20.addr + (_local_28 * 5));
                                        };
                                    };
                                };
                            };
                            si8(_local_24, _local_23);
                            si32(_local_25, (_local_23 + 1));
                            _local_20.resultAddr = (_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07));
                        };
                    };
                    if (li16(_local_20.resultAddr) >= 4)
                    {
                        _local_7 = li16(_local_20.resultAddr);
                        _local_17 = li16(((scratchAddr + 2492) + (_local_7 << 2)) + 2);
                        _local_18 = 0;
                        _local_19 = ((scratchAddr + _local_18) + (_local_17 << 2));
                        _local_22 = (li32(_local_19) + 1);
                        si32(_local_22, _local_19);
                        _local_17 = li16(_local_20.resultAddr + 2);
                        _local_9 = li32((scratchAddr + 3528) + (((_local_17 <= 0x0100) ? _local_17 : (0x0100 + ((_local_17 - 1) >>> 7))) << 2));
                        _local_17 = ((scratchAddr + 1144) + ((_local_9 >>> 24) << 2));
                        _local_18 = (li32(_local_17) + 1);
                        si32(_local_18, _local_17);
                        _local_17 = (li32(_local_20.resultAddr) | 0x0200);
                        si32(_local_17, _local_16);
                        _local_16 = (_local_16 + 4);
                        _local_11 = (_local_11 + _local_7);
                    }
                    else
                    {
                        _local_6 = li8(_local_11);
                        si16(_local_6, _local_16);
                        _local_17 = 0;
                        _local_18 = ((scratchAddr + _local_17) + (_local_6 << 2));
                        _local_19 = (li32(_local_18) + 1);
                        si32(_local_19, _local_18);
                        _local_16 = (_local_16 + 2);
                        _local_11++;
                    };
                };
                while (_local_11 < _local_5)
                {
                    _local_22 = 775236557;
                    _local_23 = -862048943;
                    _local_24 = 461845907;
                    _local_25 = (li32(_local_11 + 1) * _local_23);
                    _local_25 = ((_local_25 << 15) | (_local_25 >>> 17));
                    _local_22 = (_local_22 ^ (_local_25 * _local_24));
                    _local_22 = ((_local_22 << 13) | (_local_22 >>> 19));
                    _local_22 = ((_local_22 * 5) + -430675100);
                    _local_26 = (_local_22 ^ 0x04);
                    _local_26 = (_local_26 ^ (_local_26 >>> 16));
                    _local_26 = (_local_26 * -2048144789);
                    _local_26 = (_local_26 ^ (_local_26 >>> 13));
                    _local_26 = (_local_26 * -1028477387);
                    _local_19 = ((_local_26 ^ (_local_26 >>> 16)) & 0xFFFF);
                    _local_18 = (_local_20.addr + (_local_19 * 5));
                    if (li16(_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07)) < (_local_20.avgMatchLength + 4))
                    {
                        _local_19 = (_local_11 + 1);
                        _local_22 = 3;
                        _local_23 = -1;
                        _local_25 = li32(_local_18 + 1);
                        if ((((_local_25 >= (0)) && (li32(_local_19) == li32(_local_25))) && ((_local_19 - _local_25) <= _local_20.windowSize)))
                        {
                            _local_26 = (_local_19 + 4);
                            _local_24 = 4;
                            _local_25 = (_local_25 + 4);
                            while (((((_local_26 + 4) <= (_local_3)) && (li32(_local_25) == li32(_local_26))) && ((_local_24 + 4) <= _local_20.maxMatchLength)))
                            {
                                _local_24 = (_local_24 + 4);
                                _local_25 = (_local_25 + 4);
                                _local_26 = (_local_26 + 4);
                            };
                            while ((((_local_26 < (_local_3)) && (li8(_local_25) == li8(_local_26))) && (_local_24 < _local_20.maxMatchLength)))
                            {
                                _local_24++;
                                _local_25++;
                                _local_26++;
                            };
                            _local_22 = _local_24;
                            _local_23 = _local_25;
                        };
                        _local_27 = 5;
                        _local_28 = 9;
                        while (_local_27 < _local_28)
                        {
                            _local_29 = _local_27++;
                            _local_32 = li32(_local_19);
                            si32(_local_32, _local_20.hashScratchAddr);
                            _local_32 = li32(_local_19 + 4);
                            si32(_local_32, (_local_20.hashScratchAddr + 4));
                            si32(0, (_local_20.hashScratchAddr + _local_29));
                            _local_32 = 775236557;
                            _local_33 = -862048943;
                            _local_34 = 461845907;
                            _local_35 = (li32(_local_20.hashScratchAddr) * _local_33);
                            _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                            _local_32 = (_local_32 ^ (_local_35 * _local_34));
                            _local_32 = ((_local_32 << 13) | (_local_32 >>> 19));
                            _local_32 = ((_local_32 * 5) + -430675100);
                            _local_35 = (li32(_local_20.hashScratchAddr + 4) * _local_33);
                            _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                            _local_32 = (_local_32 ^ (_local_35 * _local_34));
                            _local_32 = ((_local_32 << 13) | (_local_32 >>> 19));
                            _local_32 = ((_local_32 * 5) + -430675100);
                            _local_36 = (_local_32 ^ _local_29);
                            _local_36 = (_local_36 ^ (_local_36 >>> 16));
                            _local_36 = (_local_36 * -2048144789);
                            _local_36 = (_local_36 ^ (_local_36 >>> 13));
                            _local_36 = (_local_36 * -1028477387);
                            _local_31 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                            _local_30 = ((_local_20.addr + (_local_31 * 5)) + 1);
                            _local_25 = li32(_local_30);
                            if ((((_local_25 >= (0)) && (li32(_local_19) == li32(_local_25))) && ((_local_19 - _local_25) <= _local_20.windowSize)))
                            {
                                _local_26 = (_local_19 + 4);
                                _local_24 = 4;
                                _local_25 = (_local_25 + 4);
                                while (((((_local_26 + 4) <= (_local_3)) && (li32(_local_25) == li32(_local_26))) && ((_local_24 + 4) <= _local_20.maxMatchLength)))
                                {
                                    _local_24 = (_local_24 + 4);
                                    _local_25 = (_local_25 + 4);
                                    _local_26 = (_local_26 + 4);
                                };
                                while ((((_local_26 < (_local_3)) && (li8(_local_25) == li8(_local_26))) && (_local_24 < _local_20.maxMatchLength)))
                                {
                                    _local_24++;
                                    _local_25++;
                                    _local_26++;
                                };
                                if (_local_24 > _local_22)
                                {
                                    _local_22 = _local_24;
                                    _local_23 = _local_25;
                                };
                            };
                        };
                        si32((((_local_19 - (_local_23 - _local_22)) << 16) | _local_22), _local_20.resultAddr);
                    }
                    else
                    {
                        si32(0, _local_20.resultAddr);
                    };
                    _local_19 = _local_18;
                    _local_22 = 4;
                    _local_23 = (_local_11 + 1);
                    _local_24 = li8(_local_19);
                    if (((_local_24 < (8)) && (_local_24 >= 0)))
                    {
                        _local_25 = li32(_local_19 + 1);
                        si8(_local_22, _local_19);
                        si32(_local_23, (_local_19 + 1));
                        _local_22 = (_local_24 + 1);
                        _local_23 = _local_25;
                        _local_27 = li32(_local_23);
                        si32(_local_27, _local_20.hashScratchAddr);
                        _local_27 = li32(_local_23 + 4);
                        si32(_local_27, (_local_20.hashScratchAddr + 4));
                        si32(0, (_local_20.hashScratchAddr + _local_22));
                        _local_27 = 775236557;
                        _local_28 = -862048943;
                        _local_29 = 461845907;
                        _local_30 = (li32(_local_20.hashScratchAddr) * _local_28);
                        _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                        _local_27 = (_local_27 ^ (_local_30 * _local_29));
                        _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                        _local_27 = ((_local_27 * 5) + -430675100);
                        _local_30 = (li32(_local_20.hashScratchAddr + 4) * _local_28);
                        _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                        _local_27 = (_local_27 ^ (_local_30 * _local_29));
                        _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                        _local_27 = ((_local_27 * 5) + -430675100);
                        _local_31 = (_local_27 ^ _local_22);
                        _local_31 = (_local_31 ^ (_local_31 >>> 16));
                        _local_31 = (_local_31 * -2048144789);
                        _local_31 = (_local_31 ^ (_local_31 >>> 13));
                        _local_31 = (_local_31 * -1028477387);
                        _local_26 = ((_local_31 ^ (_local_31 >>> 16)) & 0xFFFF);
                        _local_19 = (_local_20.addr + (_local_26 * 5));
                        _local_24 = li8(_local_19);
                        if (((_local_24 < (8)) && (_local_24 >= 0)))
                        {
                            _local_25 = li32(_local_19 + 1);
                            si8(_local_22, _local_19);
                            si32(_local_23, (_local_19 + 1));
                            _local_22 = (_local_24 + 1);
                            _local_23 = _local_25;
                            _local_27 = li32(_local_23);
                            si32(_local_27, _local_20.hashScratchAddr);
                            _local_27 = li32(_local_23 + 4);
                            si32(_local_27, (_local_20.hashScratchAddr + 4));
                            si32(0, (_local_20.hashScratchAddr + _local_22));
                            _local_27 = 775236557;
                            _local_28 = -862048943;
                            _local_29 = 461845907;
                            _local_30 = (li32(_local_20.hashScratchAddr) * _local_28);
                            _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                            _local_27 = (_local_27 ^ (_local_30 * _local_29));
                            _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                            _local_27 = ((_local_27 * 5) + -430675100);
                            _local_30 = (li32(_local_20.hashScratchAddr + 4) * _local_28);
                            _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                            _local_27 = (_local_27 ^ (_local_30 * _local_29));
                            _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                            _local_27 = ((_local_27 * 5) + -430675100);
                            _local_31 = (_local_27 ^ _local_22);
                            _local_31 = (_local_31 ^ (_local_31 >>> 16));
                            _local_31 = (_local_31 * -2048144789);
                            _local_31 = (_local_31 ^ (_local_31 >>> 13));
                            _local_31 = (_local_31 * -1028477387);
                            _local_26 = ((_local_31 ^ (_local_31 >>> 16)) & 0xFFFF);
                            _local_19 = (_local_20.addr + (_local_26 * 5));
                            _local_24 = li8(_local_19);
                            if (((_local_24 < (8)) && (_local_24 >= 0)))
                            {
                                _local_25 = li32(_local_19 + 1);
                                si8(_local_22, _local_19);
                                si32(_local_23, (_local_19 + 1));
                                _local_22 = (_local_24 + 1);
                                _local_23 = _local_25;
                                _local_27 = li32(_local_23);
                                si32(_local_27, _local_20.hashScratchAddr);
                                _local_27 = li32(_local_23 + 4);
                                si32(_local_27, (_local_20.hashScratchAddr + 4));
                                si32(0, (_local_20.hashScratchAddr + _local_22));
                                _local_27 = 775236557;
                                _local_28 = -862048943;
                                _local_29 = 461845907;
                                _local_30 = (li32(_local_20.hashScratchAddr) * _local_28);
                                _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                _local_27 = ((_local_27 * 5) + -430675100);
                                _local_30 = (li32(_local_20.hashScratchAddr + 4) * _local_28);
                                _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                _local_27 = ((_local_27 * 5) + -430675100);
                                _local_31 = (_local_27 ^ _local_22);
                                _local_31 = (_local_31 ^ (_local_31 >>> 16));
                                _local_31 = (_local_31 * -2048144789);
                                _local_31 = (_local_31 ^ (_local_31 >>> 13));
                                _local_31 = (_local_31 * -1028477387);
                                _local_26 = ((_local_31 ^ (_local_31 >>> 16)) & 0xFFFF);
                                _local_19 = (_local_20.addr + (_local_26 * 5));
                                _local_24 = li8(_local_19);
                                if (((_local_24 < (8)) && (_local_24 >= 0)))
                                {
                                    _local_25 = li32(_local_19 + 1);
                                    si8(_local_22, _local_19);
                                    si32(_local_23, (_local_19 + 1));
                                    _local_22 = (_local_24 + 1);
                                    _local_23 = _local_25;
                                    _local_27 = li32(_local_23);
                                    si32(_local_27, _local_20.hashScratchAddr);
                                    _local_27 = li32(_local_23 + 4);
                                    si32(_local_27, (_local_20.hashScratchAddr + 4));
                                    si32(0, (_local_20.hashScratchAddr + _local_22));
                                    _local_27 = 775236557;
                                    _local_28 = -862048943;
                                    _local_29 = 461845907;
                                    _local_30 = (li32(_local_20.hashScratchAddr) * _local_28);
                                    _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                    _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                    _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                    _local_27 = ((_local_27 * 5) + -430675100);
                                    _local_30 = (li32(_local_20.hashScratchAddr + 4) * _local_28);
                                    _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                    _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                    _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                    _local_27 = ((_local_27 * 5) + -430675100);
                                    _local_31 = (_local_27 ^ _local_22);
                                    _local_31 = (_local_31 ^ (_local_31 >>> 16));
                                    _local_31 = (_local_31 * -2048144789);
                                    _local_31 = (_local_31 ^ (_local_31 >>> 13));
                                    _local_31 = (_local_31 * -1028477387);
                                    _local_26 = ((_local_31 ^ (_local_31 >>> 16)) & 0xFFFF);
                                    _local_19 = (_local_20.addr + (_local_26 * 5));
                                };
                            };
                        };
                    };
                    si8(_local_22, _local_19);
                    si32(_local_23, (_local_19 + 1));
                    _local_20.resultAddr = (_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07));
                    if (li16(_local_20.resultAddr) >= 4)
                    {
                        _local_17 = li16(_local_20.resultAddr);
                        if (li16(_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07)) > _local_17)
                        {
                            si32(0, _local_20.resultAddr);
                        }
                        else
                        {
                            if (((_local_11 + _local_17) + 9) < _local_3)
                            {
                                if (_local_17 < (_local_20.avgMatchLength + 4))
                                {
                                    _local_19 = ((_local_11 + 1) + 1);
                                    _local_22 = (_local_11 + _local_17);
                                    while (_local_19 < _local_22)
                                    {
                                        _local_23 = _local_19++;
                                        _local_24 = 4;
                                        _local_25 = _local_23;
                                        _local_30 = 775236557;
                                        _local_31 = -862048943;
                                        _local_32 = 461845907;
                                        _local_33 = (li32(_local_23) * _local_31);
                                        _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                                        _local_30 = (_local_30 ^ (_local_33 * _local_32));
                                        _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                        _local_30 = ((_local_30 * 5) + -430675100);
                                        _local_34 = (_local_30 ^ 0x04);
                                        _local_34 = (_local_34 ^ (_local_34 >>> 16));
                                        _local_34 = (_local_34 * -2048144789);
                                        _local_34 = (_local_34 ^ (_local_34 >>> 13));
                                        _local_34 = (_local_34 * -1028477387);
                                        _local_29 = ((_local_34 ^ (_local_34 >>> 16)) & 0xFFFF);
                                        _local_28 = (_local_20.addr + (_local_29 * 5));
                                        _local_26 = li8(_local_28);
                                        if (((_local_26 < (8)) && (_local_26 >= 0)))
                                        {
                                            _local_27 = li32(_local_28 + 1);
                                            si8(_local_24, _local_28);
                                            si32(_local_25, (_local_28 + 1));
                                            _local_24 = (_local_26 + 1);
                                            _local_25 = _local_27;
                                            _local_30 = li32(_local_25);
                                            si32(_local_30, _local_20.hashScratchAddr);
                                            _local_30 = li32(_local_25 + 4);
                                            si32(_local_30, (_local_20.hashScratchAddr + 4));
                                            si32(0, (_local_20.hashScratchAddr + _local_24));
                                            _local_30 = 775236557;
                                            _local_31 = -862048943;
                                            _local_32 = 461845907;
                                            _local_33 = (li32(_local_20.hashScratchAddr) * _local_31);
                                            _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                                            _local_30 = (_local_30 ^ (_local_33 * _local_32));
                                            _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                            _local_30 = ((_local_30 * 5) + -430675100);
                                            _local_33 = (li32(_local_20.hashScratchAddr + 4) * _local_31);
                                            _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                                            _local_30 = (_local_30 ^ (_local_33 * _local_32));
                                            _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                            _local_30 = ((_local_30 * 5) + -430675100);
                                            _local_34 = (_local_30 ^ _local_24);
                                            _local_34 = (_local_34 ^ (_local_34 >>> 16));
                                            _local_34 = (_local_34 * -2048144789);
                                            _local_34 = (_local_34 ^ (_local_34 >>> 13));
                                            _local_34 = (_local_34 * -1028477387);
                                            _local_29 = ((_local_34 ^ (_local_34 >>> 16)) & 0xFFFF);
                                            _local_28 = (_local_20.addr + (_local_29 * 5));
                                            _local_26 = li8(_local_28);
                                            if (((_local_26 < (8)) && (_local_26 >= 0)))
                                            {
                                                _local_27 = li32(_local_28 + 1);
                                                si8(_local_24, _local_28);
                                                si32(_local_25, (_local_28 + 1));
                                                _local_24 = (_local_26 + 1);
                                                _local_25 = _local_27;
                                                _local_30 = li32(_local_25);
                                                si32(_local_30, _local_20.hashScratchAddr);
                                                _local_30 = li32(_local_25 + 4);
                                                si32(_local_30, (_local_20.hashScratchAddr + 4));
                                                si32(0, (_local_20.hashScratchAddr + _local_24));
                                                _local_30 = 775236557;
                                                _local_31 = -862048943;
                                                _local_32 = 461845907;
                                                _local_33 = (li32(_local_20.hashScratchAddr) * _local_31);
                                                _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                                                _local_30 = (_local_30 ^ (_local_33 * _local_32));
                                                _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                _local_30 = ((_local_30 * 5) + -430675100);
                                                _local_33 = (li32(_local_20.hashScratchAddr + 4) * _local_31);
                                                _local_33 = ((_local_33 << 15) | (_local_33 >>> 17));
                                                _local_30 = (_local_30 ^ (_local_33 * _local_32));
                                                _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                _local_30 = ((_local_30 * 5) + -430675100);
                                                _local_34 = (_local_30 ^ _local_24);
                                                _local_34 = (_local_34 ^ (_local_34 >>> 16));
                                                _local_34 = (_local_34 * -2048144789);
                                                _local_34 = (_local_34 ^ (_local_34 >>> 13));
                                                _local_34 = (_local_34 * -1028477387);
                                                _local_29 = ((_local_34 ^ (_local_34 >>> 16)) & 0xFFFF);
                                                _local_28 = (_local_20.addr + (_local_29 * 5));
                                            };
                                        };
                                        si8(_local_24, _local_28);
                                        si32(_local_25, (_local_28 + 1));
                                    };
                                };
                                _local_20.resultAddr = (_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07));
                                _local_19 = (_local_11 + _local_17);
                                _local_24 = 775236557;
                                _local_25 = -862048943;
                                _local_26 = 461845907;
                                _local_27 = (li32(_local_19) * _local_25);
                                _local_27 = ((_local_27 << 15) | (_local_27 >>> 17));
                                _local_24 = (_local_24 ^ (_local_27 * _local_26));
                                _local_24 = ((_local_24 << 13) | (_local_24 >>> 19));
                                _local_24 = ((_local_24 * 5) + -430675100);
                                _local_28 = (_local_24 ^ 0x04);
                                _local_28 = (_local_28 ^ (_local_28 >>> 16));
                                _local_28 = (_local_28 * -2048144789);
                                _local_28 = (_local_28 ^ (_local_28 >>> 13));
                                _local_28 = (_local_28 * -1028477387);
                                _local_23 = ((_local_28 ^ (_local_28 >>> 16)) & 0xFFFF);
                                _local_22 = (_local_20.addr + (_local_23 * 5));
                                _local_23 = 3;
                                _local_24 = -1;
                                _local_26 = li32(_local_22 + 1);
                                if ((((_local_26 >= (0)) && (li32(_local_19) == li32(_local_26))) && ((_local_19 - _local_26) <= _local_20.windowSize)))
                                {
                                    _local_27 = (_local_19 + 4);
                                    _local_25 = 4;
                                    _local_26 = (_local_26 + 4);
                                    while (((((_local_27 + 4) <= (_local_3)) && (li32(_local_26) == li32(_local_27))) && ((_local_25 + 4) <= _local_20.maxMatchLength)))
                                    {
                                        _local_25 = (_local_25 + 4);
                                        _local_26 = (_local_26 + 4);
                                        _local_27 = (_local_27 + 4);
                                    };
                                    while ((((_local_27 < (_local_3)) && (li8(_local_26) == li8(_local_27))) && (_local_25 < _local_20.maxMatchLength)))
                                    {
                                        _local_25++;
                                        _local_26++;
                                        _local_27++;
                                    };
                                    _local_23 = _local_25;
                                    _local_24 = _local_26;
                                };
                                _local_28 = 5;
                                _local_29 = 9;
                                while (_local_28 < _local_29)
                                {
                                    _local_30 = _local_28++;
                                    _local_33 = li32(_local_19);
                                    si32(_local_33, _local_20.hashScratchAddr);
                                    _local_33 = li32(_local_19 + 4);
                                    si32(_local_33, (_local_20.hashScratchAddr + 4));
                                    si32(0, (_local_20.hashScratchAddr + _local_30));
                                    _local_33 = 775236557;
                                    _local_34 = -862048943;
                                    _local_35 = 461845907;
                                    _local_36 = (li32(_local_20.hashScratchAddr) * _local_34);
                                    _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                    _local_33 = (_local_33 ^ (_local_36 * _local_35));
                                    _local_33 = ((_local_33 << 13) | (_local_33 >>> 19));
                                    _local_33 = ((_local_33 * 5) + -430675100);
                                    _local_36 = (li32(_local_20.hashScratchAddr + 4) * _local_34);
                                    _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                    _local_33 = (_local_33 ^ (_local_36 * _local_35));
                                    _local_33 = ((_local_33 << 13) | (_local_33 >>> 19));
                                    _local_33 = ((_local_33 * 5) + -430675100);
                                    _local_37 = (_local_33 ^ _local_30);
                                    _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                    _local_37 = (_local_37 * -2048144789);
                                    _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                    _local_37 = (_local_37 * -1028477387);
                                    _local_32 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                    _local_31 = ((_local_20.addr + (_local_32 * 5)) + 1);
                                    _local_26 = li32(_local_31);
                                    if ((((_local_26 >= (0)) && (li32(_local_19) == li32(_local_26))) && ((_local_19 - _local_26) <= _local_20.windowSize)))
                                    {
                                        _local_27 = (_local_19 + 4);
                                        _local_25 = 4;
                                        _local_26 = (_local_26 + 4);
                                        while (((((_local_27 + 4) <= (_local_3)) && (li32(_local_26) == li32(_local_27))) && ((_local_25 + 4) <= _local_20.maxMatchLength)))
                                        {
                                            _local_25 = (_local_25 + 4);
                                            _local_26 = (_local_26 + 4);
                                            _local_27 = (_local_27 + 4);
                                        };
                                        while ((((_local_27 < (_local_3)) && (li8(_local_26) == li8(_local_27))) && (_local_25 < _local_20.maxMatchLength)))
                                        {
                                            _local_25++;
                                            _local_26++;
                                            _local_27++;
                                        };
                                        if (_local_25 > _local_23)
                                        {
                                            _local_23 = _local_25;
                                            _local_24 = _local_26;
                                        };
                                    };
                                };
                                si32((((_local_19 - (_local_24 - _local_23)) << 16) | _local_23), _local_20.resultAddr);
                                _local_23 = _local_22;
                                _local_24 = 4;
                                _local_25 = _local_19;
                                _local_26 = li8(_local_23);
                                if (((_local_26 < (8)) && (_local_26 >= 0)))
                                {
                                    _local_27 = li32(_local_23 + 1);
                                    si8(_local_24, _local_23);
                                    si32(_local_25, (_local_23 + 1));
                                    _local_24 = (_local_26 + 1);
                                    _local_25 = _local_27;
                                    _local_29 = li32(_local_25);
                                    si32(_local_29, _local_20.hashScratchAddr);
                                    _local_29 = li32(_local_25 + 4);
                                    si32(_local_29, (_local_20.hashScratchAddr + 4));
                                    si32(0, (_local_20.hashScratchAddr + _local_24));
                                    _local_29 = 775236557;
                                    _local_30 = -862048943;
                                    _local_31 = 461845907;
                                    _local_32 = (li32(_local_20.hashScratchAddr) * _local_30);
                                    _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                    _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                    _local_29 = ((_local_29 * 5) + -430675100);
                                    _local_32 = (li32(_local_20.hashScratchAddr + 4) * _local_30);
                                    _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                    _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                    _local_29 = ((_local_29 * 5) + -430675100);
                                    _local_33 = (_local_29 ^ _local_24);
                                    _local_33 = (_local_33 ^ (_local_33 >>> 16));
                                    _local_33 = (_local_33 * -2048144789);
                                    _local_33 = (_local_33 ^ (_local_33 >>> 13));
                                    _local_33 = (_local_33 * -1028477387);
                                    _local_28 = ((_local_33 ^ (_local_33 >>> 16)) & 0xFFFF);
                                    _local_23 = (_local_20.addr + (_local_28 * 5));
                                    _local_26 = li8(_local_23);
                                    if (((_local_26 < (8)) && (_local_26 >= 0)))
                                    {
                                        _local_27 = li32(_local_23 + 1);
                                        si8(_local_24, _local_23);
                                        si32(_local_25, (_local_23 + 1));
                                        _local_24 = (_local_26 + 1);
                                        _local_25 = _local_27;
                                        _local_29 = li32(_local_25);
                                        si32(_local_29, _local_20.hashScratchAddr);
                                        _local_29 = li32(_local_25 + 4);
                                        si32(_local_29, (_local_20.hashScratchAddr + 4));
                                        si32(0, (_local_20.hashScratchAddr + _local_24));
                                        _local_29 = 775236557;
                                        _local_30 = -862048943;
                                        _local_31 = 461845907;
                                        _local_32 = (li32(_local_20.hashScratchAddr) * _local_30);
                                        _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_32 = (li32(_local_20.hashScratchAddr + 4) * _local_30);
                                        _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_33 = (_local_29 ^ _local_24);
                                        _local_33 = (_local_33 ^ (_local_33 >>> 16));
                                        _local_33 = (_local_33 * -2048144789);
                                        _local_33 = (_local_33 ^ (_local_33 >>> 13));
                                        _local_33 = (_local_33 * -1028477387);
                                        _local_28 = ((_local_33 ^ (_local_33 >>> 16)) & 0xFFFF);
                                        _local_23 = (_local_20.addr + (_local_28 * 5));
                                        _local_26 = li8(_local_23);
                                        if (((_local_26 < (8)) && (_local_26 >= 0)))
                                        {
                                            _local_27 = li32(_local_23 + 1);
                                            si8(_local_24, _local_23);
                                            si32(_local_25, (_local_23 + 1));
                                            _local_24 = (_local_26 + 1);
                                            _local_25 = _local_27;
                                            _local_29 = li32(_local_25);
                                            si32(_local_29, _local_20.hashScratchAddr);
                                            _local_29 = li32(_local_25 + 4);
                                            si32(_local_29, (_local_20.hashScratchAddr + 4));
                                            si32(0, (_local_20.hashScratchAddr + _local_24));
                                            _local_29 = 775236557;
                                            _local_30 = -862048943;
                                            _local_31 = 461845907;
                                            _local_32 = (li32(_local_20.hashScratchAddr) * _local_30);
                                            _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_32 = (li32(_local_20.hashScratchAddr + 4) * _local_30);
                                            _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_33 = (_local_29 ^ _local_24);
                                            _local_33 = (_local_33 ^ (_local_33 >>> 16));
                                            _local_33 = (_local_33 * -2048144789);
                                            _local_33 = (_local_33 ^ (_local_33 >>> 13));
                                            _local_33 = (_local_33 * -1028477387);
                                            _local_28 = ((_local_33 ^ (_local_33 >>> 16)) & 0xFFFF);
                                            _local_23 = (_local_20.addr + (_local_28 * 5));
                                            _local_26 = li8(_local_23);
                                            if (((_local_26 < (8)) && (_local_26 >= 0)))
                                            {
                                                _local_27 = li32(_local_23 + 1);
                                                si8(_local_24, _local_23);
                                                si32(_local_25, (_local_23 + 1));
                                                _local_24 = (_local_26 + 1);
                                                _local_25 = _local_27;
                                                _local_29 = li32(_local_25);
                                                si32(_local_29, _local_20.hashScratchAddr);
                                                _local_29 = li32(_local_25 + 4);
                                                si32(_local_29, (_local_20.hashScratchAddr + 4));
                                                si32(0, (_local_20.hashScratchAddr + _local_24));
                                                _local_29 = 775236557;
                                                _local_30 = -862048943;
                                                _local_31 = 461845907;
                                                _local_32 = (li32(_local_20.hashScratchAddr) * _local_30);
                                                _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                                _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                _local_29 = ((_local_29 * 5) + -430675100);
                                                _local_32 = (li32(_local_20.hashScratchAddr + 4) * _local_30);
                                                _local_32 = ((_local_32 << 15) | (_local_32 >>> 17));
                                                _local_29 = (_local_29 ^ (_local_32 * _local_31));
                                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                _local_29 = ((_local_29 * 5) + -430675100);
                                                _local_33 = (_local_29 ^ _local_24);
                                                _local_33 = (_local_33 ^ (_local_33 >>> 16));
                                                _local_33 = (_local_33 * -2048144789);
                                                _local_33 = (_local_33 ^ (_local_33 >>> 13));
                                                _local_33 = (_local_33 * -1028477387);
                                                _local_28 = ((_local_33 ^ (_local_33 >>> 16)) & 0xFFFF);
                                                _local_23 = (_local_20.addr + (_local_28 * 5));
                                            };
                                        };
                                    };
                                };
                                si8(_local_24, _local_23);
                                si32(_local_25, (_local_23 + 1));
                                _local_20.resultAddr = (_local_20.baseResultAddr + (((_local_20.resultAddr - _local_20.baseResultAddr) + 4) & 0x07));
                            };
                        };
                    };
                    if (li16(_local_20.resultAddr) >= 4)
                    {
                        _local_7 = li16(_local_20.resultAddr);
                        _local_17 = li16(((scratchAddr + 2492) + (_local_7 << 2)) + 2);
                        _local_18 = 0;
                        _local_19 = ((scratchAddr + _local_18) + (_local_17 << 2));
                        _local_22 = (li32(_local_19) + 1);
                        si32(_local_22, _local_19);
                        _local_17 = li16(_local_20.resultAddr + 2);
                        _local_9 = li32((scratchAddr + 3528) + (((_local_17 <= 0x0100) ? _local_17 : (0x0100 + ((_local_17 - 1) >>> 7))) << 2));
                        _local_17 = ((scratchAddr + 1144) + ((_local_9 >>> 24) << 2));
                        _local_18 = (li32(_local_17) + 1);
                        si32(_local_18, _local_17);
                        _local_17 = (li32(_local_20.resultAddr) | 0x0200);
                        si32(_local_17, _local_16);
                        _local_16 = (_local_16 + 4);
                        _local_11 = (_local_11 + _local_7);
                    }
                    else
                    {
                        _local_6 = li8(_local_11);
                        si16(_local_6, _local_16);
                        _local_17 = 0;
                        _local_18 = ((scratchAddr + _local_17) + (_local_6 << 2));
                        _local_19 = (li32(_local_18) + 1);
                        si32(_local_19, _local_18);
                        _local_16 = (_local_16 + 2);
                        _local_11++;
                    };
                };
                while (_local_11 < _local_3)
                {
                    _local_6 = li8(_local_11);
                    si16(_local_6, _local_16);
                    _local_17 = 0;
                    _local_18 = ((scratchAddr + _local_17) + (_local_6 << 2));
                    _local_19 = (li32(_local_18) + 1);
                    si32(_local_19, _local_18);
                    _local_16 = (_local_16 + 2);
                    _local_11++;
                };
                _local_38 = false;
                blockInProgress = true;
                if (level == CompressionLevel.UNCOMPRESSED)
                {
                    if (bitOffset == 0)
                    {
                        si8(0, currentAddr);
                    };
                    _local_17 = li8(currentAddr);
                    _local_17 = (_local_17 | (((_local_38) ? 1 : 0) << bitOffset));
                    si32(_local_17, currentAddr);
                    bitOffset = (bitOffset + 3);
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    if (bitOffset > 0)
                    {
                        _local_17 = li8(currentAddr);
                        _local_17 = (_local_17 | (0 << bitOffset));
                        si32(_local_17, currentAddr);
                        bitOffset = (bitOffset + (8 - bitOffset));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                }
                else
                {
                    _local_17 = li8(currentAddr);
                    _local_17 = (_local_17 | ((0x04 | ((_local_38) ? 1 : 0)) << bitOffset));
                    si32(_local_17, currentAddr);
                    bitOffset = (bitOffset + 3);
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
                blockStartAddr = currentAddr;
                createAndWriteHuffmanTrees(_arg_1, _local_3);
                _local_11 = _local_15;
                while ((_local_11 + 64) <= _local_16)
                {
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                };
                while (_local_11 < _local_16)
                {
                    _local_23 = li16(_local_11);
                    if ((_local_23 & 0x0200) != 0)
                    {
                        _local_17 = (_local_23 ^ 0x0200);
                        _local_19 = li32((scratchAddr + 2492) + (_local_17 << 2));
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + ((_local_19 >>> 16) * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_17 - (_local_19 & 0x1FFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_19 & 0xFF00) >>> 13));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_18 = li16(_local_11 + 2);
                        _local_22 = li32((scratchAddr + 3528) + (((_local_18 <= 0x0100) ? _local_18 : (0x0100 + ((_local_18 - 1) >>> 7))) << 2));
                        _local_24 = li32((scratchAddr + 1144) + ((_local_22 >>> 24) * 4));
                        _local_25 = li8(currentAddr);
                        _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                        si32(_local_25, currentAddr);
                        bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_24 = li8(currentAddr);
                        _local_24 = (_local_24 | ((_local_18 - (_local_22 & 0xFFFF)) << bitOffset));
                        si32(_local_24, currentAddr);
                        bitOffset = (bitOffset + ((_local_22 & 0xFF0000) >>> 16));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    }
                    else
                    {
                        _local_24 = 0;
                        _local_25 = li32((scratchAddr + _local_24) + (_local_23 * 4));
                        _local_26 = li8(currentAddr);
                        _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                        si32(_local_26, currentAddr);
                        bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    _local_6 = _local_23;
                    _local_11 = (_local_11 + (2 + ((_local_6 & 0x0200) >>> 8)));
                };
                if (level != CompressionLevel.UNCOMPRESSED)
                {
                    _local_17 = 0;
                    _local_18 = li32((scratchAddr + _local_17) + 0x0400);
                    _local_19 = li8(currentAddr);
                    _local_19 = (_local_19 | ((_local_18 >>> 16) << bitOffset));
                    si32(_local_19, currentAddr);
                    bitOffset = (bitOffset + (_local_18 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
                blockInProgress = false;
                _arg_1 = _local_3;
            };
        }

        public function _fastWriteFast(_arg_1:int, _arg_2:int):void
        {
            var _local_5:int;
            var _local_6:Boolean;
            var _local_7:int;
            var _local_8:Number;
            var _local_9:int;
            var _local_10:int;
            var _local_11:int;
            var _local_3:* = 0x0800;
            var _local_4:int = _arg_1;
            while ((_arg_2 - _arg_1) > _local_3)
            {
                _local_5 = (_arg_1 + _local_3);
                if (!blockInProgress)
                {
                    _local_6 = false;
                    blockInProgress = true;
                    if (level == CompressionLevel.UNCOMPRESSED)
                    {
                        if (bitOffset == 0)
                        {
                            si8(0, currentAddr);
                        };
                        _local_7 = li8(currentAddr);
                        _local_7 = (_local_7 | (((_local_6) ? 1 : 0) << bitOffset));
                        si32(_local_7, currentAddr);
                        bitOffset = (bitOffset + 3);
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        if (bitOffset > 0)
                        {
                            _local_7 = li8(currentAddr);
                            _local_7 = (_local_7 | (0 << bitOffset));
                            si32(_local_7, currentAddr);
                            bitOffset = (bitOffset + (8 - bitOffset));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                        };
                    }
                    else
                    {
                        _local_7 = li8(currentAddr);
                        _local_7 = (_local_7 | ((0x04 | ((_local_6) ? 1 : 0)) << bitOffset));
                        si32(_local_7, currentAddr);
                        bitOffset = (bitOffset + 3);
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    blockStartAddr = currentAddr;
                    _local_8 = Math.min(_arg_2, (_arg_1 + 98304));
                    createAndWriteHuffmanTrees(_arg_1, _local_8);
                };
                while (_local_4 < _local_5)
                {
                    _local_7 = li8(_local_4);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_9 = ++_local_4;
                    _local_7 = li8(_local_9);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_4++;
                };
                _arg_1 = (_arg_1 + _local_3);
                if (((blockInProgress) ? (currentAddr - blockStartAddr) : 0) > 0xC000)
                {
                    if (level != CompressionLevel.UNCOMPRESSED)
                    {
                        _local_7 = 0;
                        _local_9 = li32((scratchAddr + _local_7) + 0x0400);
                        _local_10 = li8(currentAddr);
                        _local_10 = (_local_10 | ((_local_9 >>> 16) << bitOffset));
                        si32(_local_10, currentAddr);
                        bitOffset = (bitOffset + (_local_9 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    blockInProgress = false;
                };
            };
            if (_local_4 < _arg_2)
            {
                if (!blockInProgress)
                {
                    _local_6 = false;
                    blockInProgress = true;
                    if (level == CompressionLevel.UNCOMPRESSED)
                    {
                        if (bitOffset == 0)
                        {
                            si8(0, currentAddr);
                        };
                        _local_7 = li8(currentAddr);
                        _local_7 = (_local_7 | (((_local_6) ? 1 : 0) << bitOffset));
                        si32(_local_7, currentAddr);
                        bitOffset = (bitOffset + 3);
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        if (bitOffset > 0)
                        {
                            _local_7 = li8(currentAddr);
                            _local_7 = (_local_7 | (0 << bitOffset));
                            si32(_local_7, currentAddr);
                            bitOffset = (bitOffset + (8 - bitOffset));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                        };
                    }
                    else
                    {
                        _local_7 = li8(currentAddr);
                        _local_7 = (_local_7 | ((0x04 | ((_local_6) ? 1 : 0)) << bitOffset));
                        si32(_local_7, currentAddr);
                        bitOffset = (bitOffset + 3);
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    blockStartAddr = currentAddr;
                    createAndWriteHuffmanTrees(_arg_1, _arg_2);
                };
                while (_local_4 < _arg_2)
                {
                    _local_7 = li8(_local_4);
                    _local_9 = 0;
                    _local_10 = li32((scratchAddr + _local_9) + (_local_7 * 4));
                    _local_11 = li8(currentAddr);
                    _local_11 = (_local_11 | ((_local_10 >>> 16) << bitOffset));
                    si32(_local_11, currentAddr);
                    bitOffset = (bitOffset + (_local_10 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                    _local_4++;
                };
                if (((blockInProgress) ? (currentAddr - blockStartAddr) : 0) > 0xC000)
                {
                    if (level != CompressionLevel.UNCOMPRESSED)
                    {
                        _local_7 = 0;
                        _local_9 = li32((scratchAddr + _local_7) + 0x0400);
                        _local_10 = li8(currentAddr);
                        _local_10 = (_local_10 | ((_local_9 >>> 16) << bitOffset));
                        si32(_local_10, currentAddr);
                        bitOffset = (bitOffset + (_local_9 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    blockInProgress = false;
                };
            };
        }

        public function _fastWriteCompressed(_arg_1:int, _arg_2:int):void
        {
            var _local_6:int;
            var _local_7:int;
            var _local_8:int;
            var _local_9:int;
            var _local_10:Boolean;
            var _local_11:int;
            var _local_12:Number;
            var _local_13:int;
            var _local_14:int;
            var _local_15:int;
            var _local_17:int;
            var _local_18:int;
            var _local_19:int;
            var _local_20:int;
            var _local_21:int;
            var _local_22:int;
            var _local_23:int;
            var _local_24:int;
            var _local_25:int;
            var _local_26:int;
            var _local_27:int;
            var _local_28:int;
            var _local_29:int;
            var _local_30:int;
            var _local_34:* = (null as LZHash);
            var _local_35:int;
            var _local_36:int;
            var _local_37:int;
            var _local_38:int;
            var _local_39:int;
            var _local_40:int;
            var _local_41:int;
            var _local_42:int;
            var _local_3:* = (_arg_2 - _arg_1);
            var _local_4:ByteArray = ApplicationDomain.currentDomain.domainMemory;
            _local_8 = 1;
            _local_9 = 0;
            if (level == CompressionLevel.UNCOMPRESSED)
            {
                _local_7 = 8;
                _local_6 = int(Math.ceil((_local_3 / 0xFFFF)));
            }
            else
            {
                if (level == CompressionLevel.FAST)
                {
                    _local_6 = int(Math.ceil(((_local_3 * 2) / 0xC000)));
                }
                else
                {
                    _local_6 = int(Math.ceil((_local_3 / 98304)));
                    if (level == CompressionLevel.NORMAL)
                    {
                        _local_9 = 0x70000;
                    }
                    else
                    {
                        if (level == CompressionLevel.GOOD)
                        {
                            _local_9 = 524308;
                        };
                    };
                };
                _local_8 = 2;
                _local_7 = 300;
            };
            var _local_5:uint = ((((_local_3 * _local_8) + (_local_7 * (_local_6 + 1))) + _local_9) + currentAddr);
            if (_local_5 > _local_4.length)
            {
                _local_8 = 1;
                _local_9 = 0;
                if (level == CompressionLevel.UNCOMPRESSED)
                {
                    _local_7 = 8;
                    _local_6 = int(Math.ceil((_local_3 / 0xFFFF)));
                }
                else
                {
                    if (level == CompressionLevel.FAST)
                    {
                        _local_6 = int(Math.ceil(((_local_3 * 2) / 0xC000)));
                    }
                    else
                    {
                        _local_6 = int(Math.ceil((_local_3 / 98304)));
                        if (level == CompressionLevel.NORMAL)
                        {
                            _local_9 = 0x70000;
                        }
                        else
                        {
                            if (level == CompressionLevel.GOOD)
                            {
                                _local_9 = 524308;
                            };
                        };
                    };
                    _local_8 = 2;
                    _local_7 = 300;
                };
                _local_4.length = ((((_local_3 * _local_8) + (_local_7 * (_local_6 + 1))) + _local_9) + currentAddr);
                ApplicationDomain.currentDomain.domainMemory = _local_4;
            };
            if (zlib)
            {
                _local_6 = _arg_1;
                while ((_local_6 + 5552) <= _arg_2)
                {
                    _local_7 = _local_6;
                    while (_local_7 < (_local_6 + 5552))
                    {
                        s2 = (s2 + (((((((((((((((((s1 << 4) + (li8(_local_7) * 16)) + (li8(_local_7 + 1) * 15)) + (li8(_local_7 + 2) * 14)) + (li8(_local_7 + 3) * 13)) + (li8(_local_7 + 4) * 12)) + (li8(_local_7 + 5) * 11)) + (li8(_local_7 + 6) * 10)) + (li8(_local_7 + 7) * 9)) + (li8(_local_7 + 8) * 8)) + (li8(_local_7 + 9) * 7)) + (li8(_local_7 + 10) * 6)) + (li8(_local_7 + 11) * 5)) + (li8(_local_7 + 12) * 4)) + (li8(_local_7 + 13) * 3)) + (li8(_local_7 + 14) * 2)) + li8(_local_7 + 15)));
                        s1 = (s1 + (((((((((((((((li8(_local_7) + li8(_local_7 + 1)) + li8(_local_7 + 2)) + li8(_local_7 + 3)) + li8(_local_7 + 4)) + li8(_local_7 + 5)) + li8(_local_7 + 6)) + li8(_local_7 + 7)) + li8(_local_7 + 8)) + li8(_local_7 + 9)) + li8(_local_7 + 10)) + li8(_local_7 + 11)) + li8(_local_7 + 12)) + li8(_local_7 + 13)) + li8(_local_7 + 14)) + li8(_local_7 + 15)));
                        _local_7 = (_local_7 + 16);
                    };
                    s1 = (s1 % 65521);
                    s2 = (s2 % 65521);
                    _local_6 = (_local_6 + 5552);
                };
                if (_local_6 != _arg_2)
                {
                    _local_7 = _local_6;
                    while (_local_7 < _arg_2)
                    {
                        _local_8 = _local_7++;
                        s1 = (s1 + li8(_local_8));
                        s2 = (s2 + s1);
                    };
                    s1 = (s1 % 65521);
                    s2 = (s2 % 65521);
                };
            };
            if (level == CompressionLevel.FAST)
            {
                _local_6 = _arg_1;
                _local_7 = 0x0800;
                _local_8 = _local_6;
                while ((_arg_2 - _local_6) > _local_7)
                {
                    _local_9 = (_local_6 + _local_7);
                    if (!blockInProgress)
                    {
                        _local_10 = false;
                        blockInProgress = true;
                        if (level == CompressionLevel.UNCOMPRESSED)
                        {
                            if (bitOffset == 0)
                            {
                                si8(0, currentAddr);
                            };
                            _local_11 = li8(currentAddr);
                            _local_11 = (_local_11 | (((_local_10) ? 1 : 0) << bitOffset));
                            si32(_local_11, currentAddr);
                            bitOffset = (bitOffset + 3);
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            if (bitOffset > 0)
                            {
                                _local_11 = li8(currentAddr);
                                _local_11 = (_local_11 | (0 << bitOffset));
                                si32(_local_11, currentAddr);
                                bitOffset = (bitOffset + (8 - bitOffset));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                        }
                        else
                        {
                            _local_11 = li8(currentAddr);
                            _local_11 = (_local_11 | ((0x04 | ((_local_10) ? 1 : 0)) << bitOffset));
                            si32(_local_11, currentAddr);
                            bitOffset = (bitOffset + 3);
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                        };
                        blockStartAddr = currentAddr;
                        _local_12 = Math.min(_arg_2, (_local_6 + 98304));
                        createAndWriteHuffmanTrees(_local_6, _local_12);
                    };
                    while (_local_8 < _local_9)
                    {
                        _local_11 = li8(_local_8);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_13 = ++_local_8;
                        _local_11 = li8(_local_13);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_8++;
                    };
                    _local_6 = (_local_6 + _local_7);
                    if (((blockInProgress) ? (currentAddr - blockStartAddr) : 0) > 0xC000)
                    {
                        if (level != CompressionLevel.UNCOMPRESSED)
                        {
                            _local_11 = 0;
                            _local_13 = li32((scratchAddr + _local_11) + 0x0400);
                            _local_14 = li8(currentAddr);
                            _local_14 = (_local_14 | ((_local_13 >>> 16) << bitOffset));
                            si32(_local_14, currentAddr);
                            bitOffset = (bitOffset + (_local_13 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                        };
                        blockInProgress = false;
                    };
                };
                if (_local_8 < _arg_2)
                {
                    if (!blockInProgress)
                    {
                        _local_10 = false;
                        blockInProgress = true;
                        if (level == CompressionLevel.UNCOMPRESSED)
                        {
                            if (bitOffset == 0)
                            {
                                si8(0, currentAddr);
                            };
                            _local_11 = li8(currentAddr);
                            _local_11 = (_local_11 | (((_local_10) ? 1 : 0) << bitOffset));
                            si32(_local_11, currentAddr);
                            bitOffset = (bitOffset + 3);
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            if (bitOffset > 0)
                            {
                                _local_11 = li8(currentAddr);
                                _local_11 = (_local_11 | (0 << bitOffset));
                                si32(_local_11, currentAddr);
                                bitOffset = (bitOffset + (8 - bitOffset));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                        }
                        else
                        {
                            _local_11 = li8(currentAddr);
                            _local_11 = (_local_11 | ((0x04 | ((_local_10) ? 1 : 0)) << bitOffset));
                            si32(_local_11, currentAddr);
                            bitOffset = (bitOffset + 3);
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                        };
                        blockStartAddr = currentAddr;
                        createAndWriteHuffmanTrees(_local_6, _arg_2);
                    };
                    while (_local_8 < _arg_2)
                    {
                        _local_11 = li8(_local_8);
                        _local_13 = 0;
                        _local_14 = li32((scratchAddr + _local_13) + (_local_11 * 4));
                        _local_15 = li8(currentAddr);
                        _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                        si32(_local_15, currentAddr);
                        bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        _local_8++;
                    };
                    if (((blockInProgress) ? (currentAddr - blockStartAddr) : 0) > 0xC000)
                    {
                        if (level != CompressionLevel.UNCOMPRESSED)
                        {
                            _local_11 = 0;
                            _local_13 = li32((scratchAddr + _local_11) + 0x0400);
                            _local_14 = li8(currentAddr);
                            _local_14 = (_local_14 | ((_local_13 >>> 16) << bitOffset));
                            si32(_local_14, currentAddr);
                            bitOffset = (bitOffset + (_local_13 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                        };
                        blockInProgress = false;
                    };
                };
            }
            else
            {
                if (level == CompressionLevel.NORMAL)
                {
                    _local_6 = _arg_1;
                    _local_21 = (_arg_2 - _local_6);
                    _local_24 = 1;
                    _local_25 = 0;
                    if (level == CompressionLevel.UNCOMPRESSED)
                    {
                        _local_23 = 8;
                        _local_22 = int(Math.ceil((_local_21 / 0xFFFF)));
                    }
                    else
                    {
                        if (level == CompressionLevel.FAST)
                        {
                            _local_22 = int(Math.ceil(((_local_21 * 2) / 0xC000)));
                        }
                        else
                        {
                            _local_22 = int(Math.ceil((_local_21 / 98304)));
                            if (level == CompressionLevel.NORMAL)
                            {
                                _local_25 = 0x70000;
                            }
                            else
                            {
                                if (level == CompressionLevel.GOOD)
                                {
                                    _local_25 = 524308;
                                };
                            };
                        };
                        _local_24 = 2;
                        _local_23 = 300;
                    };
                    _local_20 = ((currentAddr + (((_local_21 * _local_24) + (_local_23 * (_local_22 + 1))) + _local_25)) - 0x40000);
                    _local_21 = (_local_20 - 0x30000);
                    _local_17 = ((_local_20 + 0x40000) - 32);
                    while (_local_17 >= _local_20)
                    {
                        si32(-1, _local_17);
                        si32(-1, (_local_17 + 4));
                        si32(-1, (_local_17 + 8));
                        si32(-1, (_local_17 + 12));
                        si32(-1, (_local_17 + 16));
                        si32(-1, (_local_17 + 20));
                        si32(-1, (_local_17 + 24));
                        si32(-1, (_local_17 + 28));
                        _local_17 = (_local_17 - 32);
                    };
                    while ((_arg_2 - _local_6) > 0)
                    {
                        _local_12 = Math.min(_arg_2, (_local_6 + 98304));
                        _local_7 = _local_12;
                        _local_8 = (_local_7 - 4);
                        _local_23 = 0;
                        while (_local_23 < 286)
                        {
                            _local_24 = _local_23++;
                            si32(0, (scratchAddr + (_local_24 << 2)));
                        };
                        _local_23 = 0;
                        while (_local_23 < 30)
                        {
                            _local_24 = _local_23++;
                            si32(0, ((scratchAddr + 1144) + (_local_24 << 2)));
                        };
                        _local_22 = _local_21;
                        _local_17 = _local_6;
                        while (_local_17 < _local_8)
                        {
                            _local_23 = 775236557;
                            _local_24 = -862048943;
                            _local_25 = 461845907;
                            _local_26 = (li32(_local_17) * _local_24);
                            _local_26 = ((_local_26 << 15) | (_local_26 >>> 17));
                            _local_23 = (_local_23 ^ (_local_26 * _local_25));
                            _local_23 = ((_local_23 << 13) | (_local_23 >>> 19));
                            _local_23 = ((_local_23 * 5) + -430675100);
                            _local_27 = (_local_23 ^ 0x04);
                            _local_27 = (_local_27 ^ (_local_27 >>> 16));
                            _local_27 = (_local_27 * -2048144789);
                            _local_27 = (_local_27 ^ (_local_27 >>> 13));
                            _local_27 = (_local_27 * -1028477387);
                            _local_15 = (((_local_27 ^ (_local_27 >>> 16)) & 0xFFFF) << 2);
                            _local_18 = li32(_local_20 + _local_15);
                            if (((_local_18 >= (0)) && (li32(_local_18) == li32(_local_17))))
                            {
                                _local_11 = 4;
                                _local_18 = (_local_18 + 4);
                                _local_19 = (_local_17 + 4);
                                while ((((_local_19 < (_local_7)) && (li8(_local_18) == li8(_local_19))) && (_local_11 < 258)))
                                {
                                    _local_18++;
                                    _local_19++;
                                    _local_11++;
                                };
                                si32(_local_17, (_local_20 + _local_15));
                                _local_13 = (_local_19 - _local_18);
                                if (_local_13 <= 0x8000)
                                {
                                    _local_23 = li16(((scratchAddr + 2492) + (_local_11 << 2)) + 2);
                                    _local_24 = 0;
                                    _local_25 = ((scratchAddr + _local_24) + (_local_23 << 2));
                                    _local_26 = (li32(_local_25) + 1);
                                    si32(_local_26, _local_25);
                                    _local_14 = li32((scratchAddr + 3528) + (((_local_13 <= 0x0100) ? _local_13 : (0x0100 + ((_local_13 - 1) >>> 7))) << 2));
                                    _local_23 = ((scratchAddr + 1144) + ((_local_14 >>> 24) << 2));
                                    _local_24 = (li32(_local_23) + 1);
                                    si32(_local_24, _local_23);
                                    si32(((_local_11 | 0x0200) | (_local_13 << 16)), _local_22);
                                    _local_22 = (_local_22 + 4);
                                    _local_17 = (_local_17 + _local_11);
                                    if (_local_17 < _local_8)
                                    {
                                        var _temp_1:* = _local_20;
                                        _local_24 = 775236557;
                                        _local_25 = -862048943;
                                        _local_26 = 461845907;
                                        _local_27 = (li32(_local_17 - 1) * _local_25);
                                        _local_27 = ((_local_27 << 15) | (_local_27 >>> 17));
                                        _local_24 = (_local_24 ^ (_local_27 * _local_26));
                                        _local_24 = ((_local_24 << 13) | (_local_24 >>> 19));
                                        _local_24 = ((_local_24 * 5) + -430675100);
                                        _local_28 = (_local_24 ^ 0x04);
                                        _local_28 = (_local_28 ^ (_local_28 >>> 16));
                                        _local_28 = (_local_28 * -2048144789);
                                        _local_28 = (_local_28 ^ (_local_28 >>> 13));
                                        _local_28 = (_local_28 * -1028477387);
                                        _local_23 = (_temp_1 + (((_local_28 ^ (_local_28 >>> 16)) & 0xFFFF) << 2));
                                        si32((_local_17 - 1), _local_23);
                                    };
                                }
                                else
                                {
                                    _local_9 = li8(_local_17);
                                    si16(_local_9, _local_22);
                                    _local_23 = 0;
                                    _local_24 = ((scratchAddr + _local_23) + (_local_9 << 2));
                                    _local_25 = (li32(_local_24) + 1);
                                    si32(_local_25, _local_24);
                                    _local_22 = (_local_22 + 2);
                                    _local_17++;
                                };
                            }
                            else
                            {
                                _local_9 = li8(_local_17);
                                si16(_local_9, _local_22);
                                _local_23 = 0;
                                _local_24 = ((scratchAddr + _local_23) + (_local_9 << 2));
                                _local_25 = (li32(_local_24) + 1);
                                si32(_local_25, _local_24);
                                si32(_local_17, (_local_20 + _local_15));
                                _local_22 = (_local_22 + 2);
                                _local_17++;
                            };
                        };
                        while (_local_17 < _local_7)
                        {
                            _local_9 = li8(_local_17);
                            si16(_local_9, _local_22);
                            _local_23 = 0;
                            _local_24 = ((scratchAddr + _local_23) + (_local_9 << 2));
                            _local_25 = (li32(_local_24) + 1);
                            si32(_local_25, _local_24);
                            _local_22 = (_local_22 + 2);
                            _local_17++;
                        };
                        _local_10 = false;
                        blockInProgress = true;
                        if (level == CompressionLevel.UNCOMPRESSED)
                        {
                            if (bitOffset == 0)
                            {
                                si8(0, currentAddr);
                            };
                            _local_23 = li8(currentAddr);
                            _local_23 = (_local_23 | (((_local_10) ? 1 : 0) << bitOffset));
                            si32(_local_23, currentAddr);
                            bitOffset = (bitOffset + 3);
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            if (bitOffset > 0)
                            {
                                _local_23 = li8(currentAddr);
                                _local_23 = (_local_23 | (0 << bitOffset));
                                si32(_local_23, currentAddr);
                                bitOffset = (bitOffset + (8 - bitOffset));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                        }
                        else
                        {
                            _local_23 = li8(currentAddr);
                            _local_23 = (_local_23 | ((0x04 | ((_local_10) ? 1 : 0)) << bitOffset));
                            si32(_local_23, currentAddr);
                            bitOffset = (bitOffset + 3);
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                        };
                        blockStartAddr = currentAddr;
                        createAndWriteHuffmanTrees(_local_6, _local_7);
                        _local_17 = _local_21;
                        while ((_local_17 + 64) <= _local_22)
                        {
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                        };
                        while (_local_17 < _local_22)
                        {
                            _local_27 = li16(_local_17);
                            if ((_local_27 & 0x0200) != 0)
                            {
                                _local_23 = (_local_27 ^ 0x0200);
                                _local_25 = li32((scratchAddr + 2492) + (_local_23 << 2));
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + ((_local_25 >>> 16) * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_23 - (_local_25 & 0x1FFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_25 & 0xFF00) >>> 13));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_24 = li16(_local_17 + 2);
                                _local_26 = li32((scratchAddr + 3528) + (((_local_24 <= 0x0100) ? _local_24 : (0x0100 + ((_local_24 - 1) >>> 7))) << 2));
                                _local_28 = li32((scratchAddr + 1144) + ((_local_26 >>> 24) * 4));
                                _local_29 = li8(currentAddr);
                                _local_29 = (_local_29 | ((_local_28 >>> 16) << bitOffset));
                                si32(_local_29, currentAddr);
                                bitOffset = (bitOffset + (_local_28 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                _local_28 = li8(currentAddr);
                                _local_28 = (_local_28 | ((_local_24 - (_local_26 & 0xFFFF)) << bitOffset));
                                si32(_local_28, currentAddr);
                                bitOffset = (bitOffset + ((_local_26 & 0xFF0000) >>> 16));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            }
                            else
                            {
                                _local_28 = 0;
                                _local_29 = li32((scratchAddr + _local_28) + (_local_27 * 4));
                                _local_30 = li8(currentAddr);
                                _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                si32(_local_30, currentAddr);
                                bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            _local_9 = _local_27;
                            _local_17 = (_local_17 + (2 + ((_local_9 & 0x0200) >>> 8)));
                        };
                        if (level != CompressionLevel.UNCOMPRESSED)
                        {
                            _local_23 = 0;
                            _local_24 = li32((scratchAddr + _local_23) + 0x0400);
                            _local_25 = li8(currentAddr);
                            _local_25 = (_local_25 | ((_local_24 >>> 16) << bitOffset));
                            si32(_local_25, currentAddr);
                            bitOffset = (bitOffset + (_local_24 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                        };
                        blockInProgress = false;
                        _local_6 = _local_7;
                    };
                }
                else
                {
                    if (level == CompressionLevel.GOOD)
                    {
                        _local_6 = _arg_1;
                        _local_18 = (_arg_2 - _local_6);
                        _local_21 = 1;
                        _local_22 = 0;
                        if (level == CompressionLevel.UNCOMPRESSED)
                        {
                            _local_20 = 8;
                            _local_19 = int(Math.ceil((_local_18 / 0xFFFF)));
                        }
                        else
                        {
                            if (level == CompressionLevel.FAST)
                            {
                                _local_19 = int(Math.ceil(((_local_18 * 2) / 0xC000)));
                            }
                            else
                            {
                                _local_19 = int(Math.ceil((_local_18 / 98304)));
                                if (level == CompressionLevel.NORMAL)
                                {
                                    _local_22 = 0x70000;
                                }
                                else
                                {
                                    if (level == CompressionLevel.GOOD)
                                    {
                                        _local_22 = 524308;
                                    };
                                };
                            };
                            _local_21 = 2;
                            _local_20 = 300;
                        };
                        _local_17 = ((currentAddr + (((_local_18 * _local_21) + (_local_20 * (_local_19 + 1))) + _local_22)) - 327700);
                        _local_18 = (_local_17 - 0x30000);
                        _local_34 = new LZHash(_local_17, 258, 0x8000);
                        while ((_arg_2 - _local_6) > 0)
                        {
                            _local_12 = Math.min(_arg_2, (_local_6 + 98304));
                            _local_7 = _local_12;
                            _local_9 = (_local_7 - 9);
                            _local_8 = ((_local_9 - 516) - 1);
                            _local_20 = 0;
                            while (_local_20 < 286)
                            {
                                _local_21 = _local_20++;
                                si32(0, (scratchAddr + (_local_21 << 2)));
                            };
                            _local_20 = 0;
                            while (_local_20 < 30)
                            {
                                _local_21 = _local_20++;
                                si32(0, ((scratchAddr + 1144) + (_local_21 << 2)));
                            };
                            _local_19 = _local_18;
                            _local_15 = _local_6;
                            if (_local_15 < _local_8)
                            {
                                _local_22 = 775236557;
                                _local_23 = -862048943;
                                _local_24 = 461845907;
                                _local_25 = (li32(_local_6) * _local_23);
                                _local_25 = ((_local_25 << 15) | (_local_25 >>> 17));
                                _local_22 = (_local_22 ^ (_local_25 * _local_24));
                                _local_22 = ((_local_22 << 13) | (_local_22 >>> 19));
                                _local_22 = ((_local_22 * 5) + -430675100);
                                _local_26 = (_local_22 ^ 0x04);
                                _local_26 = (_local_26 ^ (_local_26 >>> 16));
                                _local_26 = (_local_26 * -2048144789);
                                _local_26 = (_local_26 ^ (_local_26 >>> 13));
                                _local_26 = (_local_26 * -1028477387);
                                _local_21 = ((_local_26 ^ (_local_26 >>> 16)) & 0xFFFF);
                                _local_20 = (_local_34.addr + (_local_21 * 5));
                                _local_21 = 3;
                                _local_22 = -1;
                                _local_24 = li32(_local_20 + 1);
                                if ((((_local_24 >= (0)) && (li32(_local_6) == li32(_local_24))) && ((_local_6 - _local_24) <= _local_34.windowSize)))
                                {
                                    _local_25 = (_local_6 + 4);
                                    _local_23 = 4;
                                    _local_24 = (_local_24 + 4);
                                    while (((li32(_local_24) == (li32(_local_25))) && ((_local_23 + 4) <= _local_34.maxMatchLength)))
                                    {
                                        _local_23 = (_local_23 + 4);
                                        _local_24 = (_local_24 + 4);
                                        _local_25 = (_local_25 + 4);
                                    };
                                    while (((li8(_local_24) == (li8(_local_25))) && (_local_23 < _local_34.maxMatchLength)))
                                    {
                                        _local_23++;
                                        _local_24++;
                                        _local_25++;
                                    };
                                    _local_21 = _local_23;
                                    _local_22 = _local_24;
                                };
                                _local_26 = 5;
                                _local_27 = 9;
                                while (_local_26 < _local_27)
                                {
                                    _local_28 = _local_26++;
                                    _local_35 = li32(_local_6);
                                    si32(_local_35, _local_34.hashScratchAddr);
                                    _local_35 = li32(_local_6 + 4);
                                    si32(_local_35, (_local_34.hashScratchAddr + 4));
                                    si32(0, (_local_34.hashScratchAddr + _local_28));
                                    _local_35 = 775236557;
                                    _local_36 = -862048943;
                                    _local_37 = 461845907;
                                    _local_38 = (li32(_local_34.hashScratchAddr) * _local_36);
                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                    _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                    _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                    _local_35 = ((_local_35 * 5) + -430675100);
                                    _local_38 = (li32(_local_34.hashScratchAddr + 4) * _local_36);
                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                    _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                    _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                    _local_35 = ((_local_35 * 5) + -430675100);
                                    _local_39 = (_local_35 ^ _local_28);
                                    _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                    _local_39 = (_local_39 * -2048144789);
                                    _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                    _local_39 = (_local_39 * -1028477387);
                                    _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                    _local_29 = ((_local_34.addr + (_local_30 * 5)) + 1);
                                    _local_24 = li32(_local_29);
                                    if (((((_local_24 >= (0)) && (li32((_local_24 + _local_21) - 3) == li32((_local_6 + _local_21) - 3))) && (li32(_local_6) == li32(_local_24))) && ((_local_6 - _local_24) <= _local_34.windowSize)))
                                    {
                                        _local_25 = (_local_6 + 4);
                                        _local_23 = 4;
                                        _local_24 = (_local_24 + 4);
                                        while (((li32(_local_24) == (li32(_local_25))) && ((_local_23 + 4) <= _local_34.maxMatchLength)))
                                        {
                                            _local_23 = (_local_23 + 4);
                                            _local_24 = (_local_24 + 4);
                                            _local_25 = (_local_25 + 4);
                                        };
                                        while (((li8(_local_24) == (li8(_local_25))) && (_local_23 < _local_34.maxMatchLength)))
                                        {
                                            _local_23++;
                                            _local_24++;
                                            _local_25++;
                                        };
                                        if (_local_23 > _local_21)
                                        {
                                            _local_21 = _local_23;
                                            _local_22 = _local_24;
                                        };
                                    };
                                };
                                si32((((_local_6 - (_local_22 - _local_21)) << 16) | _local_21), _local_34.resultAddr);
                                _local_21 = _local_20;
                                _local_22 = 4;
                                _local_23 = _local_6;
                                _local_24 = li8(_local_21);
                                if (((_local_24 < (8)) && (_local_24 >= 0)))
                                {
                                    _local_25 = li32(_local_21 + 1);
                                    si8(_local_22, _local_21);
                                    si32(_local_23, (_local_21 + 1));
                                    _local_22 = (_local_24 + 1);
                                    _local_23 = _local_25;
                                    _local_27 = li32(_local_23);
                                    si32(_local_27, _local_34.hashScratchAddr);
                                    _local_27 = li32(_local_23 + 4);
                                    si32(_local_27, (_local_34.hashScratchAddr + 4));
                                    si32(0, (_local_34.hashScratchAddr + _local_22));
                                    _local_27 = 775236557;
                                    _local_28 = -862048943;
                                    _local_29 = 461845907;
                                    _local_30 = (li32(_local_34.hashScratchAddr) * _local_28);
                                    _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                    _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                    _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                    _local_27 = ((_local_27 * 5) + -430675100);
                                    _local_30 = (li32(_local_34.hashScratchAddr + 4) * _local_28);
                                    _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                    _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                    _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                    _local_27 = ((_local_27 * 5) + -430675100);
                                    _local_35 = (_local_27 ^ _local_22);
                                    _local_35 = (_local_35 ^ (_local_35 >>> 16));
                                    _local_35 = (_local_35 * -2048144789);
                                    _local_35 = (_local_35 ^ (_local_35 >>> 13));
                                    _local_35 = (_local_35 * -1028477387);
                                    _local_26 = ((_local_35 ^ (_local_35 >>> 16)) & 0xFFFF);
                                    _local_21 = (_local_34.addr + (_local_26 * 5));
                                    _local_24 = li8(_local_21);
                                    if (((_local_24 < (8)) && (_local_24 >= 0)))
                                    {
                                        _local_25 = li32(_local_21 + 1);
                                        si8(_local_22, _local_21);
                                        si32(_local_23, (_local_21 + 1));
                                        _local_22 = (_local_24 + 1);
                                        _local_23 = _local_25;
                                        _local_27 = li32(_local_23);
                                        si32(_local_27, _local_34.hashScratchAddr);
                                        _local_27 = li32(_local_23 + 4);
                                        si32(_local_27, (_local_34.hashScratchAddr + 4));
                                        si32(0, (_local_34.hashScratchAddr + _local_22));
                                        _local_27 = 775236557;
                                        _local_28 = -862048943;
                                        _local_29 = 461845907;
                                        _local_30 = (li32(_local_34.hashScratchAddr) * _local_28);
                                        _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                        _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                        _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                        _local_27 = ((_local_27 * 5) + -430675100);
                                        _local_30 = (li32(_local_34.hashScratchAddr + 4) * _local_28);
                                        _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                        _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                        _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                        _local_27 = ((_local_27 * 5) + -430675100);
                                        _local_35 = (_local_27 ^ _local_22);
                                        _local_35 = (_local_35 ^ (_local_35 >>> 16));
                                        _local_35 = (_local_35 * -2048144789);
                                        _local_35 = (_local_35 ^ (_local_35 >>> 13));
                                        _local_35 = (_local_35 * -1028477387);
                                        _local_26 = ((_local_35 ^ (_local_35 >>> 16)) & 0xFFFF);
                                        _local_21 = (_local_34.addr + (_local_26 * 5));
                                        _local_24 = li8(_local_21);
                                        if (((_local_24 < (8)) && (_local_24 >= 0)))
                                        {
                                            _local_25 = li32(_local_21 + 1);
                                            si8(_local_22, _local_21);
                                            si32(_local_23, (_local_21 + 1));
                                            _local_22 = (_local_24 + 1);
                                            _local_23 = _local_25;
                                            _local_27 = li32(_local_23);
                                            si32(_local_27, _local_34.hashScratchAddr);
                                            _local_27 = li32(_local_23 + 4);
                                            si32(_local_27, (_local_34.hashScratchAddr + 4));
                                            si32(0, (_local_34.hashScratchAddr + _local_22));
                                            _local_27 = 775236557;
                                            _local_28 = -862048943;
                                            _local_29 = 461845907;
                                            _local_30 = (li32(_local_34.hashScratchAddr) * _local_28);
                                            _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                            _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                            _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                            _local_27 = ((_local_27 * 5) + -430675100);
                                            _local_30 = (li32(_local_34.hashScratchAddr + 4) * _local_28);
                                            _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                            _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                            _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                            _local_27 = ((_local_27 * 5) + -430675100);
                                            _local_35 = (_local_27 ^ _local_22);
                                            _local_35 = (_local_35 ^ (_local_35 >>> 16));
                                            _local_35 = (_local_35 * -2048144789);
                                            _local_35 = (_local_35 ^ (_local_35 >>> 13));
                                            _local_35 = (_local_35 * -1028477387);
                                            _local_26 = ((_local_35 ^ (_local_35 >>> 16)) & 0xFFFF);
                                            _local_21 = (_local_34.addr + (_local_26 * 5));
                                            _local_24 = li8(_local_21);
                                            if (((_local_24 < (8)) && (_local_24 >= 0)))
                                            {
                                                _local_25 = li32(_local_21 + 1);
                                                si8(_local_22, _local_21);
                                                si32(_local_23, (_local_21 + 1));
                                                _local_22 = (_local_24 + 1);
                                                _local_23 = _local_25;
                                                _local_27 = li32(_local_23);
                                                si32(_local_27, _local_34.hashScratchAddr);
                                                _local_27 = li32(_local_23 + 4);
                                                si32(_local_27, (_local_34.hashScratchAddr + 4));
                                                si32(0, (_local_34.hashScratchAddr + _local_22));
                                                _local_27 = 775236557;
                                                _local_28 = -862048943;
                                                _local_29 = 461845907;
                                                _local_30 = (li32(_local_34.hashScratchAddr) * _local_28);
                                                _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                                _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                                _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                                _local_27 = ((_local_27 * 5) + -430675100);
                                                _local_30 = (li32(_local_34.hashScratchAddr + 4) * _local_28);
                                                _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                                _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                                _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                                _local_27 = ((_local_27 * 5) + -430675100);
                                                _local_35 = (_local_27 ^ _local_22);
                                                _local_35 = (_local_35 ^ (_local_35 >>> 16));
                                                _local_35 = (_local_35 * -2048144789);
                                                _local_35 = (_local_35 ^ (_local_35 >>> 13));
                                                _local_35 = (_local_35 * -1028477387);
                                                _local_26 = ((_local_35 ^ (_local_35 >>> 16)) & 0xFFFF);
                                                _local_21 = (_local_34.addr + (_local_26 * 5));
                                            };
                                        };
                                    };
                                };
                                si8(_local_22, _local_21);
                                si32(_local_23, (_local_21 + 1));
                                _local_34.resultAddr = (_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07));
                            }
                            else
                            {
                                if (_local_15 < _local_9)
                                {
                                    _local_22 = 775236557;
                                    _local_23 = -862048943;
                                    _local_24 = 461845907;
                                    _local_25 = (li32(_local_6) * _local_23);
                                    _local_25 = ((_local_25 << 15) | (_local_25 >>> 17));
                                    _local_22 = (_local_22 ^ (_local_25 * _local_24));
                                    _local_22 = ((_local_22 << 13) | (_local_22 >>> 19));
                                    _local_22 = ((_local_22 * 5) + -430675100);
                                    _local_26 = (_local_22 ^ 0x04);
                                    _local_26 = (_local_26 ^ (_local_26 >>> 16));
                                    _local_26 = (_local_26 * -2048144789);
                                    _local_26 = (_local_26 ^ (_local_26 >>> 13));
                                    _local_26 = (_local_26 * -1028477387);
                                    _local_21 = ((_local_26 ^ (_local_26 >>> 16)) & 0xFFFF);
                                    _local_20 = (_local_34.addr + (_local_21 * 5));
                                    _local_21 = 3;
                                    _local_22 = -1;
                                    _local_24 = li32(_local_20 + 1);
                                    if ((((_local_24 >= (0)) && (li32(_local_6) == li32(_local_24))) && ((_local_6 - _local_24) <= _local_34.windowSize)))
                                    {
                                        _local_25 = (_local_6 + 4);
                                        _local_23 = 4;
                                        _local_24 = (_local_24 + 4);
                                        while (((((_local_25 + 4) <= (_local_7)) && (li32(_local_24) == li32(_local_25))) && ((_local_23 + 4) <= _local_34.maxMatchLength)))
                                        {
                                            _local_23 = (_local_23 + 4);
                                            _local_24 = (_local_24 + 4);
                                            _local_25 = (_local_25 + 4);
                                        };
                                        while ((((_local_25 < (_local_7)) && (li8(_local_24) == li8(_local_25))) && (_local_23 < _local_34.maxMatchLength)))
                                        {
                                            _local_23++;
                                            _local_24++;
                                            _local_25++;
                                        };
                                        _local_21 = _local_23;
                                        _local_22 = _local_24;
                                    };
                                    _local_26 = 5;
                                    _local_27 = 9;
                                    while (_local_26 < _local_27)
                                    {
                                        _local_28 = _local_26++;
                                        _local_35 = li32(_local_6);
                                        si32(_local_35, _local_34.hashScratchAddr);
                                        _local_35 = li32(_local_6 + 4);
                                        si32(_local_35, (_local_34.hashScratchAddr + 4));
                                        si32(0, (_local_34.hashScratchAddr + _local_28));
                                        _local_35 = 775236557;
                                        _local_36 = -862048943;
                                        _local_37 = 461845907;
                                        _local_38 = (li32(_local_34.hashScratchAddr) * _local_36);
                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                        _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                        _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                        _local_35 = ((_local_35 * 5) + -430675100);
                                        _local_38 = (li32(_local_34.hashScratchAddr + 4) * _local_36);
                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                        _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                        _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                        _local_35 = ((_local_35 * 5) + -430675100);
                                        _local_39 = (_local_35 ^ _local_28);
                                        _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                        _local_39 = (_local_39 * -2048144789);
                                        _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                        _local_39 = (_local_39 * -1028477387);
                                        _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                        _local_29 = ((_local_34.addr + (_local_30 * 5)) + 1);
                                        _local_24 = li32(_local_29);
                                        if ((((_local_24 >= (0)) && (li32(_local_6) == li32(_local_24))) && ((_local_6 - _local_24) <= _local_34.windowSize)))
                                        {
                                            _local_25 = (_local_6 + 4);
                                            _local_23 = 4;
                                            _local_24 = (_local_24 + 4);
                                            while (((((_local_25 + 4) <= (_local_7)) && (li32(_local_24) == li32(_local_25))) && ((_local_23 + 4) <= _local_34.maxMatchLength)))
                                            {
                                                _local_23 = (_local_23 + 4);
                                                _local_24 = (_local_24 + 4);
                                                _local_25 = (_local_25 + 4);
                                            };
                                            while ((((_local_25 < (_local_7)) && (li8(_local_24) == li8(_local_25))) && (_local_23 < _local_34.maxMatchLength)))
                                            {
                                                _local_23++;
                                                _local_24++;
                                                _local_25++;
                                            };
                                            if (_local_23 > _local_21)
                                            {
                                                _local_21 = _local_23;
                                                _local_22 = _local_24;
                                            };
                                        };
                                    };
                                    si32((((_local_6 - (_local_22 - _local_21)) << 16) | _local_21), _local_34.resultAddr);
                                    _local_21 = _local_20;
                                    _local_22 = 4;
                                    _local_23 = _local_6;
                                    _local_24 = li8(_local_21);
                                    if (((_local_24 < (8)) && (_local_24 >= 0)))
                                    {
                                        _local_25 = li32(_local_21 + 1);
                                        si8(_local_22, _local_21);
                                        si32(_local_23, (_local_21 + 1));
                                        _local_22 = (_local_24 + 1);
                                        _local_23 = _local_25;
                                        _local_27 = li32(_local_23);
                                        si32(_local_27, _local_34.hashScratchAddr);
                                        _local_27 = li32(_local_23 + 4);
                                        si32(_local_27, (_local_34.hashScratchAddr + 4));
                                        si32(0, (_local_34.hashScratchAddr + _local_22));
                                        _local_27 = 775236557;
                                        _local_28 = -862048943;
                                        _local_29 = 461845907;
                                        _local_30 = (li32(_local_34.hashScratchAddr) * _local_28);
                                        _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                        _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                        _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                        _local_27 = ((_local_27 * 5) + -430675100);
                                        _local_30 = (li32(_local_34.hashScratchAddr + 4) * _local_28);
                                        _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                        _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                        _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                        _local_27 = ((_local_27 * 5) + -430675100);
                                        _local_35 = (_local_27 ^ _local_22);
                                        _local_35 = (_local_35 ^ (_local_35 >>> 16));
                                        _local_35 = (_local_35 * -2048144789);
                                        _local_35 = (_local_35 ^ (_local_35 >>> 13));
                                        _local_35 = (_local_35 * -1028477387);
                                        _local_26 = ((_local_35 ^ (_local_35 >>> 16)) & 0xFFFF);
                                        _local_21 = (_local_34.addr + (_local_26 * 5));
                                        _local_24 = li8(_local_21);
                                        if (((_local_24 < (8)) && (_local_24 >= 0)))
                                        {
                                            _local_25 = li32(_local_21 + 1);
                                            si8(_local_22, _local_21);
                                            si32(_local_23, (_local_21 + 1));
                                            _local_22 = (_local_24 + 1);
                                            _local_23 = _local_25;
                                            _local_27 = li32(_local_23);
                                            si32(_local_27, _local_34.hashScratchAddr);
                                            _local_27 = li32(_local_23 + 4);
                                            si32(_local_27, (_local_34.hashScratchAddr + 4));
                                            si32(0, (_local_34.hashScratchAddr + _local_22));
                                            _local_27 = 775236557;
                                            _local_28 = -862048943;
                                            _local_29 = 461845907;
                                            _local_30 = (li32(_local_34.hashScratchAddr) * _local_28);
                                            _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                            _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                            _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                            _local_27 = ((_local_27 * 5) + -430675100);
                                            _local_30 = (li32(_local_34.hashScratchAddr + 4) * _local_28);
                                            _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                            _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                            _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                            _local_27 = ((_local_27 * 5) + -430675100);
                                            _local_35 = (_local_27 ^ _local_22);
                                            _local_35 = (_local_35 ^ (_local_35 >>> 16));
                                            _local_35 = (_local_35 * -2048144789);
                                            _local_35 = (_local_35 ^ (_local_35 >>> 13));
                                            _local_35 = (_local_35 * -1028477387);
                                            _local_26 = ((_local_35 ^ (_local_35 >>> 16)) & 0xFFFF);
                                            _local_21 = (_local_34.addr + (_local_26 * 5));
                                            _local_24 = li8(_local_21);
                                            if (((_local_24 < (8)) && (_local_24 >= 0)))
                                            {
                                                _local_25 = li32(_local_21 + 1);
                                                si8(_local_22, _local_21);
                                                si32(_local_23, (_local_21 + 1));
                                                _local_22 = (_local_24 + 1);
                                                _local_23 = _local_25;
                                                _local_27 = li32(_local_23);
                                                si32(_local_27, _local_34.hashScratchAddr);
                                                _local_27 = li32(_local_23 + 4);
                                                si32(_local_27, (_local_34.hashScratchAddr + 4));
                                                si32(0, (_local_34.hashScratchAddr + _local_22));
                                                _local_27 = 775236557;
                                                _local_28 = -862048943;
                                                _local_29 = 461845907;
                                                _local_30 = (li32(_local_34.hashScratchAddr) * _local_28);
                                                _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                                _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                                _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                                _local_27 = ((_local_27 * 5) + -430675100);
                                                _local_30 = (li32(_local_34.hashScratchAddr + 4) * _local_28);
                                                _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                                _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                                _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                                _local_27 = ((_local_27 * 5) + -430675100);
                                                _local_35 = (_local_27 ^ _local_22);
                                                _local_35 = (_local_35 ^ (_local_35 >>> 16));
                                                _local_35 = (_local_35 * -2048144789);
                                                _local_35 = (_local_35 ^ (_local_35 >>> 13));
                                                _local_35 = (_local_35 * -1028477387);
                                                _local_26 = ((_local_35 ^ (_local_35 >>> 16)) & 0xFFFF);
                                                _local_21 = (_local_34.addr + (_local_26 * 5));
                                                _local_24 = li8(_local_21);
                                                if (((_local_24 < (8)) && (_local_24 >= 0)))
                                                {
                                                    _local_25 = li32(_local_21 + 1);
                                                    si8(_local_22, _local_21);
                                                    si32(_local_23, (_local_21 + 1));
                                                    _local_22 = (_local_24 + 1);
                                                    _local_23 = _local_25;
                                                    _local_27 = li32(_local_23);
                                                    si32(_local_27, _local_34.hashScratchAddr);
                                                    _local_27 = li32(_local_23 + 4);
                                                    si32(_local_27, (_local_34.hashScratchAddr + 4));
                                                    si32(0, (_local_34.hashScratchAddr + _local_22));
                                                    _local_27 = 775236557;
                                                    _local_28 = -862048943;
                                                    _local_29 = 461845907;
                                                    _local_30 = (li32(_local_34.hashScratchAddr) * _local_28);
                                                    _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                                    _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                                    _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                                    _local_27 = ((_local_27 * 5) + -430675100);
                                                    _local_30 = (li32(_local_34.hashScratchAddr + 4) * _local_28);
                                                    _local_30 = ((_local_30 << 15) | (_local_30 >>> 17));
                                                    _local_27 = (_local_27 ^ (_local_30 * _local_29));
                                                    _local_27 = ((_local_27 << 13) | (_local_27 >>> 19));
                                                    _local_27 = ((_local_27 * 5) + -430675100);
                                                    _local_35 = (_local_27 ^ _local_22);
                                                    _local_35 = (_local_35 ^ (_local_35 >>> 16));
                                                    _local_35 = (_local_35 * -2048144789);
                                                    _local_35 = (_local_35 ^ (_local_35 >>> 13));
                                                    _local_35 = (_local_35 * -1028477387);
                                                    _local_26 = ((_local_35 ^ (_local_35 >>> 16)) & 0xFFFF);
                                                    _local_21 = (_local_34.addr + (_local_26 * 5));
                                                };
                                            };
                                        };
                                    };
                                    si8(_local_22, _local_21);
                                    si32(_local_23, (_local_21 + 1));
                                    _local_34.resultAddr = (_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07));
                                };
                            };
                            while (_local_15 < _local_8)
                            {
                                _local_23 = 775236557;
                                _local_24 = -862048943;
                                _local_25 = 461845907;
                                _local_26 = (li32(_local_15 + 1) * _local_24);
                                _local_26 = ((_local_26 << 15) | (_local_26 >>> 17));
                                _local_23 = (_local_23 ^ (_local_26 * _local_25));
                                _local_23 = ((_local_23 << 13) | (_local_23 >>> 19));
                                _local_23 = ((_local_23 * 5) + -430675100);
                                _local_27 = (_local_23 ^ 0x04);
                                _local_27 = (_local_27 ^ (_local_27 >>> 16));
                                _local_27 = (_local_27 * -2048144789);
                                _local_27 = (_local_27 ^ (_local_27 >>> 13));
                                _local_27 = (_local_27 * -1028477387);
                                _local_22 = ((_local_27 ^ (_local_27 >>> 16)) & 0xFFFF);
                                _local_21 = (_local_34.addr + (_local_22 * 5));
                                if (li16(_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07)) < (_local_34.avgMatchLength + 4))
                                {
                                    _local_22 = (_local_15 + 1);
                                    _local_23 = 3;
                                    _local_24 = -1;
                                    _local_26 = li32(_local_21 + 1);
                                    if ((((_local_26 >= (0)) && (li32(_local_22) == li32(_local_26))) && ((_local_22 - _local_26) <= _local_34.windowSize)))
                                    {
                                        _local_27 = (_local_22 + 4);
                                        _local_25 = 4;
                                        _local_26 = (_local_26 + 4);
                                        while (((li32(_local_26) == (li32(_local_27))) && ((_local_25 + 4) <= _local_34.maxMatchLength)))
                                        {
                                            _local_25 = (_local_25 + 4);
                                            _local_26 = (_local_26 + 4);
                                            _local_27 = (_local_27 + 4);
                                        };
                                        while (((li8(_local_26) == (li8(_local_27))) && (_local_25 < _local_34.maxMatchLength)))
                                        {
                                            _local_25++;
                                            _local_26++;
                                            _local_27++;
                                        };
                                        _local_23 = _local_25;
                                        _local_24 = _local_26;
                                    };
                                    _local_28 = 5;
                                    _local_29 = 9;
                                    while (_local_28 < _local_29)
                                    {
                                        _local_30 = _local_28++;
                                        _local_37 = li32(_local_22);
                                        si32(_local_37, _local_34.hashScratchAddr);
                                        _local_37 = li32(_local_22 + 4);
                                        si32(_local_37, (_local_34.hashScratchAddr + 4));
                                        si32(0, (_local_34.hashScratchAddr + _local_30));
                                        _local_37 = 775236557;
                                        _local_38 = -862048943;
                                        _local_39 = 461845907;
                                        _local_40 = (li32(_local_34.hashScratchAddr) * _local_38);
                                        _local_40 = ((_local_40 << 15) | (_local_40 >>> 17));
                                        _local_37 = (_local_37 ^ (_local_40 * _local_39));
                                        _local_37 = ((_local_37 << 13) | (_local_37 >>> 19));
                                        _local_37 = ((_local_37 * 5) + -430675100);
                                        _local_40 = (li32(_local_34.hashScratchAddr + 4) * _local_38);
                                        _local_40 = ((_local_40 << 15) | (_local_40 >>> 17));
                                        _local_37 = (_local_37 ^ (_local_40 * _local_39));
                                        _local_37 = ((_local_37 << 13) | (_local_37 >>> 19));
                                        _local_37 = ((_local_37 * 5) + -430675100);
                                        _local_41 = (_local_37 ^ _local_30);
                                        _local_41 = (_local_41 ^ (_local_41 >>> 16));
                                        _local_41 = (_local_41 * -2048144789);
                                        _local_41 = (_local_41 ^ (_local_41 >>> 13));
                                        _local_41 = (_local_41 * -1028477387);
                                        _local_36 = ((_local_41 ^ (_local_41 >>> 16)) & 0xFFFF);
                                        _local_35 = ((_local_34.addr + (_local_36 * 5)) + 1);
                                        _local_26 = li32(_local_35);
                                        if (((((_local_26 >= (0)) && (li32((_local_26 + _local_23) - 3) == li32((_local_22 + _local_23) - 3))) && (li32(_local_22) == li32(_local_26))) && ((_local_22 - _local_26) <= _local_34.windowSize)))
                                        {
                                            _local_27 = (_local_22 + 4);
                                            _local_25 = 4;
                                            _local_26 = (_local_26 + 4);
                                            while (((li32(_local_26) == (li32(_local_27))) && ((_local_25 + 4) <= _local_34.maxMatchLength)))
                                            {
                                                _local_25 = (_local_25 + 4);
                                                _local_26 = (_local_26 + 4);
                                                _local_27 = (_local_27 + 4);
                                            };
                                            while (((li8(_local_26) == (li8(_local_27))) && (_local_25 < _local_34.maxMatchLength)))
                                            {
                                                _local_25++;
                                                _local_26++;
                                                _local_27++;
                                            };
                                            if (_local_25 > _local_23)
                                            {
                                                _local_23 = _local_25;
                                                _local_24 = _local_26;
                                            };
                                        };
                                    };
                                    si32((((_local_22 - (_local_24 - _local_23)) << 16) | _local_23), _local_34.resultAddr);
                                }
                                else
                                {
                                    si32(0, _local_34.resultAddr);
                                };
                                _local_22 = _local_21;
                                _local_23 = 4;
                                _local_24 = (_local_15 + 1);
                                _local_25 = li8(_local_22);
                                if (((_local_25 < (8)) && (_local_25 >= 0)))
                                {
                                    _local_26 = li32(_local_22 + 1);
                                    si8(_local_23, _local_22);
                                    si32(_local_24, (_local_22 + 1));
                                    _local_23 = (_local_25 + 1);
                                    _local_24 = _local_26;
                                    _local_28 = li32(_local_24);
                                    si32(_local_28, _local_34.hashScratchAddr);
                                    _local_28 = li32(_local_24 + 4);
                                    si32(_local_28, (_local_34.hashScratchAddr + 4));
                                    si32(0, (_local_34.hashScratchAddr + _local_23));
                                    _local_28 = 775236557;
                                    _local_29 = -862048943;
                                    _local_30 = 461845907;
                                    _local_35 = (li32(_local_34.hashScratchAddr) * _local_29);
                                    _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                    _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                    _local_28 = ((_local_28 * 5) + -430675100);
                                    _local_35 = (li32(_local_34.hashScratchAddr + 4) * _local_29);
                                    _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                    _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                    _local_28 = ((_local_28 * 5) + -430675100);
                                    _local_36 = (_local_28 ^ _local_23);
                                    _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                    _local_36 = (_local_36 * -2048144789);
                                    _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                    _local_36 = (_local_36 * -1028477387);
                                    _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                    _local_22 = (_local_34.addr + (_local_27 * 5));
                                    _local_25 = li8(_local_22);
                                    if (((_local_25 < (8)) && (_local_25 >= 0)))
                                    {
                                        _local_26 = li32(_local_22 + 1);
                                        si8(_local_23, _local_22);
                                        si32(_local_24, (_local_22 + 1));
                                        _local_23 = (_local_25 + 1);
                                        _local_24 = _local_26;
                                        _local_28 = li32(_local_24);
                                        si32(_local_28, _local_34.hashScratchAddr);
                                        _local_28 = li32(_local_24 + 4);
                                        si32(_local_28, (_local_34.hashScratchAddr + 4));
                                        si32(0, (_local_34.hashScratchAddr + _local_23));
                                        _local_28 = 775236557;
                                        _local_29 = -862048943;
                                        _local_30 = 461845907;
                                        _local_35 = (li32(_local_34.hashScratchAddr) * _local_29);
                                        _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                        _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                        _local_28 = ((_local_28 * 5) + -430675100);
                                        _local_35 = (li32(_local_34.hashScratchAddr + 4) * _local_29);
                                        _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                        _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                        _local_28 = ((_local_28 * 5) + -430675100);
                                        _local_36 = (_local_28 ^ _local_23);
                                        _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                        _local_36 = (_local_36 * -2048144789);
                                        _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                        _local_36 = (_local_36 * -1028477387);
                                        _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                        _local_22 = (_local_34.addr + (_local_27 * 5));
                                        _local_25 = li8(_local_22);
                                        if (((_local_25 < (8)) && (_local_25 >= 0)))
                                        {
                                            _local_26 = li32(_local_22 + 1);
                                            si8(_local_23, _local_22);
                                            si32(_local_24, (_local_22 + 1));
                                            _local_23 = (_local_25 + 1);
                                            _local_24 = _local_26;
                                            _local_28 = li32(_local_24);
                                            si32(_local_28, _local_34.hashScratchAddr);
                                            _local_28 = li32(_local_24 + 4);
                                            si32(_local_28, (_local_34.hashScratchAddr + 4));
                                            si32(0, (_local_34.hashScratchAddr + _local_23));
                                            _local_28 = 775236557;
                                            _local_29 = -862048943;
                                            _local_30 = 461845907;
                                            _local_35 = (li32(_local_34.hashScratchAddr) * _local_29);
                                            _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_35 = (li32(_local_34.hashScratchAddr + 4) * _local_29);
                                            _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_36 = (_local_28 ^ _local_23);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                            _local_36 = (_local_36 * -2048144789);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                            _local_36 = (_local_36 * -1028477387);
                                            _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                            _local_22 = (_local_34.addr + (_local_27 * 5));
                                            _local_25 = li8(_local_22);
                                            if (((_local_25 < (8)) && (_local_25 >= 0)))
                                            {
                                                _local_26 = li32(_local_22 + 1);
                                                si8(_local_23, _local_22);
                                                si32(_local_24, (_local_22 + 1));
                                                _local_23 = (_local_25 + 1);
                                                _local_24 = _local_26;
                                                _local_28 = li32(_local_24);
                                                si32(_local_28, _local_34.hashScratchAddr);
                                                _local_28 = li32(_local_24 + 4);
                                                si32(_local_28, (_local_34.hashScratchAddr + 4));
                                                si32(0, (_local_34.hashScratchAddr + _local_23));
                                                _local_28 = 775236557;
                                                _local_29 = -862048943;
                                                _local_30 = 461845907;
                                                _local_35 = (li32(_local_34.hashScratchAddr) * _local_29);
                                                _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_35 = (li32(_local_34.hashScratchAddr + 4) * _local_29);
                                                _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_36 = (_local_28 ^ _local_23);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                _local_36 = (_local_36 * -2048144789);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                _local_36 = (_local_36 * -1028477387);
                                                _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                _local_22 = (_local_34.addr + (_local_27 * 5));
                                            };
                                        };
                                    };
                                };
                                si8(_local_23, _local_22);
                                si32(_local_24, (_local_22 + 1));
                                _local_34.resultAddr = (_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07));
                                if (li16(_local_34.resultAddr) >= 4)
                                {
                                    _local_20 = li16(_local_34.resultAddr);
                                    if (li16(_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07)) > _local_20)
                                    {
                                        si32(0, _local_34.resultAddr);
                                    }
                                    else
                                    {
                                        _local_34.avgMatchLength = ((((_local_34.avgMatchLength << 1) + (_local_34.avgMatchLength << 2)) + (_local_20 << 1)) >>> 3);
                                        if (_local_20 < (_local_34.avgMatchLength + 4))
                                        {
                                            _local_22 = ((_local_15 + 1) + 1);
                                            _local_23 = (_local_15 + _local_20);
                                            while (_local_22 < _local_23)
                                            {
                                                _local_24 = _local_22++;
                                                _local_25 = 4;
                                                _local_26 = _local_24;
                                                _local_35 = 775236557;
                                                _local_36 = -862048943;
                                                _local_37 = 461845907;
                                                _local_38 = (li32(_local_24) * _local_36);
                                                _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                                _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                                _local_35 = ((_local_35 * 5) + -430675100);
                                                _local_39 = (_local_35 ^ 0x04);
                                                _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                _local_39 = (_local_39 * -2048144789);
                                                _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                _local_39 = (_local_39 * -1028477387);
                                                _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                _local_29 = (_local_34.addr + (_local_30 * 5));
                                                _local_27 = li8(_local_29);
                                                if (((_local_27 < (8)) && (_local_27 >= 0)))
                                                {
                                                    _local_28 = li32(_local_29 + 1);
                                                    si8(_local_25, _local_29);
                                                    si32(_local_26, (_local_29 + 1));
                                                    _local_25 = (_local_27 + 1);
                                                    _local_26 = _local_28;
                                                    _local_35 = li32(_local_26);
                                                    si32(_local_35, _local_34.hashScratchAddr);
                                                    _local_35 = li32(_local_26 + 4);
                                                    si32(_local_35, (_local_34.hashScratchAddr + 4));
                                                    si32(0, (_local_34.hashScratchAddr + _local_25));
                                                    _local_35 = 775236557;
                                                    _local_36 = -862048943;
                                                    _local_37 = 461845907;
                                                    _local_38 = (li32(_local_34.hashScratchAddr) * _local_36);
                                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                    _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                                    _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                                    _local_35 = ((_local_35 * 5) + -430675100);
                                                    _local_38 = (li32(_local_34.hashScratchAddr + 4) * _local_36);
                                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                    _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                                    _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                                    _local_35 = ((_local_35 * 5) + -430675100);
                                                    _local_39 = (_local_35 ^ _local_25);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                    _local_39 = (_local_39 * -2048144789);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                    _local_39 = (_local_39 * -1028477387);
                                                    _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                    _local_29 = (_local_34.addr + (_local_30 * 5));
                                                    _local_27 = li8(_local_29);
                                                    if (((_local_27 < (8)) && (_local_27 >= 0)))
                                                    {
                                                        _local_28 = li32(_local_29 + 1);
                                                        si8(_local_25, _local_29);
                                                        si32(_local_26, (_local_29 + 1));
                                                        _local_25 = (_local_27 + 1);
                                                        _local_26 = _local_28;
                                                        _local_35 = li32(_local_26);
                                                        si32(_local_35, _local_34.hashScratchAddr);
                                                        _local_35 = li32(_local_26 + 4);
                                                        si32(_local_35, (_local_34.hashScratchAddr + 4));
                                                        si32(0, (_local_34.hashScratchAddr + _local_25));
                                                        _local_35 = 775236557;
                                                        _local_36 = -862048943;
                                                        _local_37 = 461845907;
                                                        _local_38 = (li32(_local_34.hashScratchAddr) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                                        _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                                        _local_35 = ((_local_35 * 5) + -430675100);
                                                        _local_38 = (li32(_local_34.hashScratchAddr + 4) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                                        _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                                        _local_35 = ((_local_35 * 5) + -430675100);
                                                        _local_39 = (_local_35 ^ _local_25);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                        _local_39 = (_local_39 * -2048144789);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                        _local_39 = (_local_39 * -1028477387);
                                                        _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                        _local_29 = (_local_34.addr + (_local_30 * 5));
                                                    };
                                                };
                                                si8(_local_25, _local_29);
                                                si32(_local_26, (_local_29 + 1));
                                            };
                                        };
                                        _local_34.resultAddr = (_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07));
                                        _local_22 = (_local_15 + _local_20);
                                        _local_25 = 775236557;
                                        _local_26 = -862048943;
                                        _local_27 = 461845907;
                                        _local_28 = (li32(_local_22) * _local_26);
                                        _local_28 = ((_local_28 << 15) | (_local_28 >>> 17));
                                        _local_25 = (_local_25 ^ (_local_28 * _local_27));
                                        _local_25 = ((_local_25 << 13) | (_local_25 >>> 19));
                                        _local_25 = ((_local_25 * 5) + -430675100);
                                        _local_29 = (_local_25 ^ 0x04);
                                        _local_29 = (_local_29 ^ (_local_29 >>> 16));
                                        _local_29 = (_local_29 * -2048144789);
                                        _local_29 = (_local_29 ^ (_local_29 >>> 13));
                                        _local_29 = (_local_29 * -1028477387);
                                        _local_24 = ((_local_29 ^ (_local_29 >>> 16)) & 0xFFFF);
                                        _local_23 = (_local_34.addr + (_local_24 * 5));
                                        _local_24 = 3;
                                        _local_25 = -1;
                                        _local_27 = li32(_local_23 + 1);
                                        if ((((_local_27 >= (0)) && (li32(_local_22) == li32(_local_27))) && ((_local_22 - _local_27) <= _local_34.windowSize)))
                                        {
                                            _local_28 = (_local_22 + 4);
                                            _local_26 = 4;
                                            _local_27 = (_local_27 + 4);
                                            while (((li32(_local_27) == (li32(_local_28))) && ((_local_26 + 4) <= _local_34.maxMatchLength)))
                                            {
                                                _local_26 = (_local_26 + 4);
                                                _local_27 = (_local_27 + 4);
                                                _local_28 = (_local_28 + 4);
                                            };
                                            while (((li8(_local_27) == (li8(_local_28))) && (_local_26 < _local_34.maxMatchLength)))
                                            {
                                                _local_26++;
                                                _local_27++;
                                                _local_28++;
                                            };
                                            _local_24 = _local_26;
                                            _local_25 = _local_27;
                                        };
                                        _local_29 = 5;
                                        _local_30 = 9;
                                        while (_local_29 < _local_30)
                                        {
                                            _local_35 = _local_29++;
                                            _local_38 = li32(_local_22);
                                            si32(_local_38, _local_34.hashScratchAddr);
                                            _local_38 = li32(_local_22 + 4);
                                            si32(_local_38, (_local_34.hashScratchAddr + 4));
                                            si32(0, (_local_34.hashScratchAddr + _local_35));
                                            _local_38 = 775236557;
                                            _local_39 = -862048943;
                                            _local_40 = 461845907;
                                            _local_41 = (li32(_local_34.hashScratchAddr) * _local_39);
                                            _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                            _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                            _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                            _local_38 = ((_local_38 * 5) + -430675100);
                                            _local_41 = (li32(_local_34.hashScratchAddr + 4) * _local_39);
                                            _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                            _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                            _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                            _local_38 = ((_local_38 * 5) + -430675100);
                                            _local_42 = (_local_38 ^ _local_35);
                                            _local_42 = (_local_42 ^ (_local_42 >>> 16));
                                            _local_42 = (_local_42 * -2048144789);
                                            _local_42 = (_local_42 ^ (_local_42 >>> 13));
                                            _local_42 = (_local_42 * -1028477387);
                                            _local_37 = ((_local_42 ^ (_local_42 >>> 16)) & 0xFFFF);
                                            _local_36 = ((_local_34.addr + (_local_37 * 5)) + 1);
                                            _local_27 = li32(_local_36);
                                            if (((((_local_27 >= (0)) && (li32((_local_27 + _local_24) - 3) == li32((_local_22 + _local_24) - 3))) && (li32(_local_22) == li32(_local_27))) && ((_local_22 - _local_27) <= _local_34.windowSize)))
                                            {
                                                _local_28 = (_local_22 + 4);
                                                _local_26 = 4;
                                                _local_27 = (_local_27 + 4);
                                                while (((li32(_local_27) == (li32(_local_28))) && ((_local_26 + 4) <= _local_34.maxMatchLength)))
                                                {
                                                    _local_26 = (_local_26 + 4);
                                                    _local_27 = (_local_27 + 4);
                                                    _local_28 = (_local_28 + 4);
                                                };
                                                while (((li8(_local_27) == (li8(_local_28))) && (_local_26 < _local_34.maxMatchLength)))
                                                {
                                                    _local_26++;
                                                    _local_27++;
                                                    _local_28++;
                                                };
                                                if (_local_26 > _local_24)
                                                {
                                                    _local_24 = _local_26;
                                                    _local_25 = _local_27;
                                                };
                                            };
                                        };
                                        si32((((_local_22 - (_local_25 - _local_24)) << 16) | _local_24), _local_34.resultAddr);
                                        _local_24 = _local_23;
                                        _local_25 = 4;
                                        _local_26 = _local_22;
                                        _local_27 = li8(_local_24);
                                        if (((_local_27 < (8)) && (_local_27 >= 0)))
                                        {
                                            _local_28 = li32(_local_24 + 1);
                                            si8(_local_25, _local_24);
                                            si32(_local_26, (_local_24 + 1));
                                            _local_25 = (_local_27 + 1);
                                            _local_26 = _local_28;
                                            _local_30 = li32(_local_26);
                                            si32(_local_30, _local_34.hashScratchAddr);
                                            _local_30 = li32(_local_26 + 4);
                                            si32(_local_30, (_local_34.hashScratchAddr + 4));
                                            si32(0, (_local_34.hashScratchAddr + _local_25));
                                            _local_30 = 775236557;
                                            _local_35 = -862048943;
                                            _local_36 = 461845907;
                                            _local_37 = (li32(_local_34.hashScratchAddr) * _local_35);
                                            _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                            _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                            _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                            _local_30 = ((_local_30 * 5) + -430675100);
                                            _local_37 = (li32(_local_34.hashScratchAddr + 4) * _local_35);
                                            _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                            _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                            _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                            _local_30 = ((_local_30 * 5) + -430675100);
                                            _local_38 = (_local_30 ^ _local_25);
                                            _local_38 = (_local_38 ^ (_local_38 >>> 16));
                                            _local_38 = (_local_38 * -2048144789);
                                            _local_38 = (_local_38 ^ (_local_38 >>> 13));
                                            _local_38 = (_local_38 * -1028477387);
                                            _local_29 = ((_local_38 ^ (_local_38 >>> 16)) & 0xFFFF);
                                            _local_24 = (_local_34.addr + (_local_29 * 5));
                                            _local_27 = li8(_local_24);
                                            if (((_local_27 < (8)) && (_local_27 >= 0)))
                                            {
                                                _local_28 = li32(_local_24 + 1);
                                                si8(_local_25, _local_24);
                                                si32(_local_26, (_local_24 + 1));
                                                _local_25 = (_local_27 + 1);
                                                _local_26 = _local_28;
                                                _local_30 = li32(_local_26);
                                                si32(_local_30, _local_34.hashScratchAddr);
                                                _local_30 = li32(_local_26 + 4);
                                                si32(_local_30, (_local_34.hashScratchAddr + 4));
                                                si32(0, (_local_34.hashScratchAddr + _local_25));
                                                _local_30 = 775236557;
                                                _local_35 = -862048943;
                                                _local_36 = 461845907;
                                                _local_37 = (li32(_local_34.hashScratchAddr) * _local_35);
                                                _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                _local_30 = ((_local_30 * 5) + -430675100);
                                                _local_37 = (li32(_local_34.hashScratchAddr + 4) * _local_35);
                                                _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                _local_30 = ((_local_30 * 5) + -430675100);
                                                _local_38 = (_local_30 ^ _local_25);
                                                _local_38 = (_local_38 ^ (_local_38 >>> 16));
                                                _local_38 = (_local_38 * -2048144789);
                                                _local_38 = (_local_38 ^ (_local_38 >>> 13));
                                                _local_38 = (_local_38 * -1028477387);
                                                _local_29 = ((_local_38 ^ (_local_38 >>> 16)) & 0xFFFF);
                                                _local_24 = (_local_34.addr + (_local_29 * 5));
                                                _local_27 = li8(_local_24);
                                                if (((_local_27 < (8)) && (_local_27 >= 0)))
                                                {
                                                    _local_28 = li32(_local_24 + 1);
                                                    si8(_local_25, _local_24);
                                                    si32(_local_26, (_local_24 + 1));
                                                    _local_25 = (_local_27 + 1);
                                                    _local_26 = _local_28;
                                                    _local_30 = li32(_local_26);
                                                    si32(_local_30, _local_34.hashScratchAddr);
                                                    _local_30 = li32(_local_26 + 4);
                                                    si32(_local_30, (_local_34.hashScratchAddr + 4));
                                                    si32(0, (_local_34.hashScratchAddr + _local_25));
                                                    _local_30 = 775236557;
                                                    _local_35 = -862048943;
                                                    _local_36 = 461845907;
                                                    _local_37 = (li32(_local_34.hashScratchAddr) * _local_35);
                                                    _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                    _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                    _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                    _local_30 = ((_local_30 * 5) + -430675100);
                                                    _local_37 = (li32(_local_34.hashScratchAddr + 4) * _local_35);
                                                    _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                    _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                    _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                    _local_30 = ((_local_30 * 5) + -430675100);
                                                    _local_38 = (_local_30 ^ _local_25);
                                                    _local_38 = (_local_38 ^ (_local_38 >>> 16));
                                                    _local_38 = (_local_38 * -2048144789);
                                                    _local_38 = (_local_38 ^ (_local_38 >>> 13));
                                                    _local_38 = (_local_38 * -1028477387);
                                                    _local_29 = ((_local_38 ^ (_local_38 >>> 16)) & 0xFFFF);
                                                    _local_24 = (_local_34.addr + (_local_29 * 5));
                                                    _local_27 = li8(_local_24);
                                                    if (((_local_27 < (8)) && (_local_27 >= 0)))
                                                    {
                                                        _local_28 = li32(_local_24 + 1);
                                                        si8(_local_25, _local_24);
                                                        si32(_local_26, (_local_24 + 1));
                                                        _local_25 = (_local_27 + 1);
                                                        _local_26 = _local_28;
                                                        _local_30 = li32(_local_26);
                                                        si32(_local_30, _local_34.hashScratchAddr);
                                                        _local_30 = li32(_local_26 + 4);
                                                        si32(_local_30, (_local_34.hashScratchAddr + 4));
                                                        si32(0, (_local_34.hashScratchAddr + _local_25));
                                                        _local_30 = 775236557;
                                                        _local_35 = -862048943;
                                                        _local_36 = 461845907;
                                                        _local_37 = (li32(_local_34.hashScratchAddr) * _local_35);
                                                        _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                        _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                        _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                        _local_30 = ((_local_30 * 5) + -430675100);
                                                        _local_37 = (li32(_local_34.hashScratchAddr + 4) * _local_35);
                                                        _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                        _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                        _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                        _local_30 = ((_local_30 * 5) + -430675100);
                                                        _local_38 = (_local_30 ^ _local_25);
                                                        _local_38 = (_local_38 ^ (_local_38 >>> 16));
                                                        _local_38 = (_local_38 * -2048144789);
                                                        _local_38 = (_local_38 ^ (_local_38 >>> 13));
                                                        _local_38 = (_local_38 * -1028477387);
                                                        _local_29 = ((_local_38 ^ (_local_38 >>> 16)) & 0xFFFF);
                                                        _local_24 = (_local_34.addr + (_local_29 * 5));
                                                    };
                                                };
                                            };
                                        };
                                        si8(_local_25, _local_24);
                                        si32(_local_26, (_local_24 + 1));
                                        _local_34.resultAddr = (_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07));
                                    };
                                };
                                if (li16(_local_34.resultAddr) >= 4)
                                {
                                    _local_13 = li16(_local_34.resultAddr);
                                    _local_20 = li16(((scratchAddr + 2492) + (_local_13 << 2)) + 2);
                                    _local_21 = 0;
                                    _local_22 = ((scratchAddr + _local_21) + (_local_20 << 2));
                                    _local_23 = (li32(_local_22) + 1);
                                    si32(_local_23, _local_22);
                                    _local_20 = li16(_local_34.resultAddr + 2);
                                    _local_14 = li32((scratchAddr + 3528) + (((_local_20 <= 0x0100) ? _local_20 : (0x0100 + ((_local_20 - 1) >>> 7))) << 2));
                                    _local_20 = ((scratchAddr + 1144) + ((_local_14 >>> 24) << 2));
                                    _local_21 = (li32(_local_20) + 1);
                                    si32(_local_21, _local_20);
                                    _local_20 = (li32(_local_34.resultAddr) | 0x0200);
                                    si32(_local_20, _local_19);
                                    _local_19 = (_local_19 + 4);
                                    _local_15 = (_local_15 + _local_13);
                                }
                                else
                                {
                                    _local_11 = li8(_local_15);
                                    si16(_local_11, _local_19);
                                    _local_20 = 0;
                                    _local_21 = ((scratchAddr + _local_20) + (_local_11 << 2));
                                    _local_22 = (li32(_local_21) + 1);
                                    si32(_local_22, _local_21);
                                    _local_19 = (_local_19 + 2);
                                    _local_15++;
                                };
                            };
                            while (_local_15 < _local_9)
                            {
                                _local_23 = 775236557;
                                _local_24 = -862048943;
                                _local_25 = 461845907;
                                _local_26 = (li32(_local_15 + 1) * _local_24);
                                _local_26 = ((_local_26 << 15) | (_local_26 >>> 17));
                                _local_23 = (_local_23 ^ (_local_26 * _local_25));
                                _local_23 = ((_local_23 << 13) | (_local_23 >>> 19));
                                _local_23 = ((_local_23 * 5) + -430675100);
                                _local_27 = (_local_23 ^ 0x04);
                                _local_27 = (_local_27 ^ (_local_27 >>> 16));
                                _local_27 = (_local_27 * -2048144789);
                                _local_27 = (_local_27 ^ (_local_27 >>> 13));
                                _local_27 = (_local_27 * -1028477387);
                                _local_22 = ((_local_27 ^ (_local_27 >>> 16)) & 0xFFFF);
                                _local_21 = (_local_34.addr + (_local_22 * 5));
                                if (li16(_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07)) < (_local_34.avgMatchLength + 4))
                                {
                                    _local_22 = (_local_15 + 1);
                                    _local_23 = 3;
                                    _local_24 = -1;
                                    _local_26 = li32(_local_21 + 1);
                                    if ((((_local_26 >= (0)) && (li32(_local_22) == li32(_local_26))) && ((_local_22 - _local_26) <= _local_34.windowSize)))
                                    {
                                        _local_27 = (_local_22 + 4);
                                        _local_25 = 4;
                                        _local_26 = (_local_26 + 4);
                                        while (((((_local_27 + 4) <= (_local_7)) && (li32(_local_26) == li32(_local_27))) && ((_local_25 + 4) <= _local_34.maxMatchLength)))
                                        {
                                            _local_25 = (_local_25 + 4);
                                            _local_26 = (_local_26 + 4);
                                            _local_27 = (_local_27 + 4);
                                        };
                                        while ((((_local_27 < (_local_7)) && (li8(_local_26) == li8(_local_27))) && (_local_25 < _local_34.maxMatchLength)))
                                        {
                                            _local_25++;
                                            _local_26++;
                                            _local_27++;
                                        };
                                        _local_23 = _local_25;
                                        _local_24 = _local_26;
                                    };
                                    _local_28 = 5;
                                    _local_29 = 9;
                                    while (_local_28 < _local_29)
                                    {
                                        _local_30 = _local_28++;
                                        _local_37 = li32(_local_22);
                                        si32(_local_37, _local_34.hashScratchAddr);
                                        _local_37 = li32(_local_22 + 4);
                                        si32(_local_37, (_local_34.hashScratchAddr + 4));
                                        si32(0, (_local_34.hashScratchAddr + _local_30));
                                        _local_37 = 775236557;
                                        _local_38 = -862048943;
                                        _local_39 = 461845907;
                                        _local_40 = (li32(_local_34.hashScratchAddr) * _local_38);
                                        _local_40 = ((_local_40 << 15) | (_local_40 >>> 17));
                                        _local_37 = (_local_37 ^ (_local_40 * _local_39));
                                        _local_37 = ((_local_37 << 13) | (_local_37 >>> 19));
                                        _local_37 = ((_local_37 * 5) + -430675100);
                                        _local_40 = (li32(_local_34.hashScratchAddr + 4) * _local_38);
                                        _local_40 = ((_local_40 << 15) | (_local_40 >>> 17));
                                        _local_37 = (_local_37 ^ (_local_40 * _local_39));
                                        _local_37 = ((_local_37 << 13) | (_local_37 >>> 19));
                                        _local_37 = ((_local_37 * 5) + -430675100);
                                        _local_41 = (_local_37 ^ _local_30);
                                        _local_41 = (_local_41 ^ (_local_41 >>> 16));
                                        _local_41 = (_local_41 * -2048144789);
                                        _local_41 = (_local_41 ^ (_local_41 >>> 13));
                                        _local_41 = (_local_41 * -1028477387);
                                        _local_36 = ((_local_41 ^ (_local_41 >>> 16)) & 0xFFFF);
                                        _local_35 = ((_local_34.addr + (_local_36 * 5)) + 1);
                                        _local_26 = li32(_local_35);
                                        if ((((_local_26 >= (0)) && (li32(_local_22) == li32(_local_26))) && ((_local_22 - _local_26) <= _local_34.windowSize)))
                                        {
                                            _local_27 = (_local_22 + 4);
                                            _local_25 = 4;
                                            _local_26 = (_local_26 + 4);
                                            while (((((_local_27 + 4) <= (_local_7)) && (li32(_local_26) == li32(_local_27))) && ((_local_25 + 4) <= _local_34.maxMatchLength)))
                                            {
                                                _local_25 = (_local_25 + 4);
                                                _local_26 = (_local_26 + 4);
                                                _local_27 = (_local_27 + 4);
                                            };
                                            while ((((_local_27 < (_local_7)) && (li8(_local_26) == li8(_local_27))) && (_local_25 < _local_34.maxMatchLength)))
                                            {
                                                _local_25++;
                                                _local_26++;
                                                _local_27++;
                                            };
                                            if (_local_25 > _local_23)
                                            {
                                                _local_23 = _local_25;
                                                _local_24 = _local_26;
                                            };
                                        };
                                    };
                                    si32((((_local_22 - (_local_24 - _local_23)) << 16) | _local_23), _local_34.resultAddr);
                                }
                                else
                                {
                                    si32(0, _local_34.resultAddr);
                                };
                                _local_22 = _local_21;
                                _local_23 = 4;
                                _local_24 = (_local_15 + 1);
                                _local_25 = li8(_local_22);
                                if (((_local_25 < (8)) && (_local_25 >= 0)))
                                {
                                    _local_26 = li32(_local_22 + 1);
                                    si8(_local_23, _local_22);
                                    si32(_local_24, (_local_22 + 1));
                                    _local_23 = (_local_25 + 1);
                                    _local_24 = _local_26;
                                    _local_28 = li32(_local_24);
                                    si32(_local_28, _local_34.hashScratchAddr);
                                    _local_28 = li32(_local_24 + 4);
                                    si32(_local_28, (_local_34.hashScratchAddr + 4));
                                    si32(0, (_local_34.hashScratchAddr + _local_23));
                                    _local_28 = 775236557;
                                    _local_29 = -862048943;
                                    _local_30 = 461845907;
                                    _local_35 = (li32(_local_34.hashScratchAddr) * _local_29);
                                    _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                    _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                    _local_28 = ((_local_28 * 5) + -430675100);
                                    _local_35 = (li32(_local_34.hashScratchAddr + 4) * _local_29);
                                    _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                    _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                    _local_28 = ((_local_28 * 5) + -430675100);
                                    _local_36 = (_local_28 ^ _local_23);
                                    _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                    _local_36 = (_local_36 * -2048144789);
                                    _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                    _local_36 = (_local_36 * -1028477387);
                                    _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                    _local_22 = (_local_34.addr + (_local_27 * 5));
                                    _local_25 = li8(_local_22);
                                    if (((_local_25 < (8)) && (_local_25 >= 0)))
                                    {
                                        _local_26 = li32(_local_22 + 1);
                                        si8(_local_23, _local_22);
                                        si32(_local_24, (_local_22 + 1));
                                        _local_23 = (_local_25 + 1);
                                        _local_24 = _local_26;
                                        _local_28 = li32(_local_24);
                                        si32(_local_28, _local_34.hashScratchAddr);
                                        _local_28 = li32(_local_24 + 4);
                                        si32(_local_28, (_local_34.hashScratchAddr + 4));
                                        si32(0, (_local_34.hashScratchAddr + _local_23));
                                        _local_28 = 775236557;
                                        _local_29 = -862048943;
                                        _local_30 = 461845907;
                                        _local_35 = (li32(_local_34.hashScratchAddr) * _local_29);
                                        _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                        _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                        _local_28 = ((_local_28 * 5) + -430675100);
                                        _local_35 = (li32(_local_34.hashScratchAddr + 4) * _local_29);
                                        _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                        _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                        _local_28 = ((_local_28 * 5) + -430675100);
                                        _local_36 = (_local_28 ^ _local_23);
                                        _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                        _local_36 = (_local_36 * -2048144789);
                                        _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                        _local_36 = (_local_36 * -1028477387);
                                        _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                        _local_22 = (_local_34.addr + (_local_27 * 5));
                                        _local_25 = li8(_local_22);
                                        if (((_local_25 < (8)) && (_local_25 >= 0)))
                                        {
                                            _local_26 = li32(_local_22 + 1);
                                            si8(_local_23, _local_22);
                                            si32(_local_24, (_local_22 + 1));
                                            _local_23 = (_local_25 + 1);
                                            _local_24 = _local_26;
                                            _local_28 = li32(_local_24);
                                            si32(_local_28, _local_34.hashScratchAddr);
                                            _local_28 = li32(_local_24 + 4);
                                            si32(_local_28, (_local_34.hashScratchAddr + 4));
                                            si32(0, (_local_34.hashScratchAddr + _local_23));
                                            _local_28 = 775236557;
                                            _local_29 = -862048943;
                                            _local_30 = 461845907;
                                            _local_35 = (li32(_local_34.hashScratchAddr) * _local_29);
                                            _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_35 = (li32(_local_34.hashScratchAddr + 4) * _local_29);
                                            _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_36 = (_local_28 ^ _local_23);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                            _local_36 = (_local_36 * -2048144789);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                            _local_36 = (_local_36 * -1028477387);
                                            _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                            _local_22 = (_local_34.addr + (_local_27 * 5));
                                            _local_25 = li8(_local_22);
                                            if (((_local_25 < (8)) && (_local_25 >= 0)))
                                            {
                                                _local_26 = li32(_local_22 + 1);
                                                si8(_local_23, _local_22);
                                                si32(_local_24, (_local_22 + 1));
                                                _local_23 = (_local_25 + 1);
                                                _local_24 = _local_26;
                                                _local_28 = li32(_local_24);
                                                si32(_local_28, _local_34.hashScratchAddr);
                                                _local_28 = li32(_local_24 + 4);
                                                si32(_local_28, (_local_34.hashScratchAddr + 4));
                                                si32(0, (_local_34.hashScratchAddr + _local_23));
                                                _local_28 = 775236557;
                                                _local_29 = -862048943;
                                                _local_30 = 461845907;
                                                _local_35 = (li32(_local_34.hashScratchAddr) * _local_29);
                                                _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_35 = (li32(_local_34.hashScratchAddr + 4) * _local_29);
                                                _local_35 = ((_local_35 << 15) | (_local_35 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_35 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_36 = (_local_28 ^ _local_23);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                _local_36 = (_local_36 * -2048144789);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                _local_36 = (_local_36 * -1028477387);
                                                _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                _local_22 = (_local_34.addr + (_local_27 * 5));
                                            };
                                        };
                                    };
                                };
                                si8(_local_23, _local_22);
                                si32(_local_24, (_local_22 + 1));
                                _local_34.resultAddr = (_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07));
                                if (li16(_local_34.resultAddr) >= 4)
                                {
                                    _local_20 = li16(_local_34.resultAddr);
                                    if (li16(_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07)) > _local_20)
                                    {
                                        si32(0, _local_34.resultAddr);
                                    }
                                    else
                                    {
                                        if (((_local_15 + _local_20) + 9) < _local_7)
                                        {
                                            if (_local_20 < (_local_34.avgMatchLength + 4))
                                            {
                                                _local_22 = ((_local_15 + 1) + 1);
                                                _local_23 = (_local_15 + _local_20);
                                                while (_local_22 < _local_23)
                                                {
                                                    _local_24 = _local_22++;
                                                    _local_25 = 4;
                                                    _local_26 = _local_24;
                                                    _local_35 = 775236557;
                                                    _local_36 = -862048943;
                                                    _local_37 = 461845907;
                                                    _local_38 = (li32(_local_24) * _local_36);
                                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                    _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                                    _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                                    _local_35 = ((_local_35 * 5) + -430675100);
                                                    _local_39 = (_local_35 ^ 0x04);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                    _local_39 = (_local_39 * -2048144789);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                    _local_39 = (_local_39 * -1028477387);
                                                    _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                    _local_29 = (_local_34.addr + (_local_30 * 5));
                                                    _local_27 = li8(_local_29);
                                                    if (((_local_27 < (8)) && (_local_27 >= 0)))
                                                    {
                                                        _local_28 = li32(_local_29 + 1);
                                                        si8(_local_25, _local_29);
                                                        si32(_local_26, (_local_29 + 1));
                                                        _local_25 = (_local_27 + 1);
                                                        _local_26 = _local_28;
                                                        _local_35 = li32(_local_26);
                                                        si32(_local_35, _local_34.hashScratchAddr);
                                                        _local_35 = li32(_local_26 + 4);
                                                        si32(_local_35, (_local_34.hashScratchAddr + 4));
                                                        si32(0, (_local_34.hashScratchAddr + _local_25));
                                                        _local_35 = 775236557;
                                                        _local_36 = -862048943;
                                                        _local_37 = 461845907;
                                                        _local_38 = (li32(_local_34.hashScratchAddr) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                                        _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                                        _local_35 = ((_local_35 * 5) + -430675100);
                                                        _local_38 = (li32(_local_34.hashScratchAddr + 4) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                                        _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                                        _local_35 = ((_local_35 * 5) + -430675100);
                                                        _local_39 = (_local_35 ^ _local_25);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                        _local_39 = (_local_39 * -2048144789);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                        _local_39 = (_local_39 * -1028477387);
                                                        _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                        _local_29 = (_local_34.addr + (_local_30 * 5));
                                                        _local_27 = li8(_local_29);
                                                        if (((_local_27 < (8)) && (_local_27 >= 0)))
                                                        {
                                                            _local_28 = li32(_local_29 + 1);
                                                            si8(_local_25, _local_29);
                                                            si32(_local_26, (_local_29 + 1));
                                                            _local_25 = (_local_27 + 1);
                                                            _local_26 = _local_28;
                                                            _local_35 = li32(_local_26);
                                                            si32(_local_35, _local_34.hashScratchAddr);
                                                            _local_35 = li32(_local_26 + 4);
                                                            si32(_local_35, (_local_34.hashScratchAddr + 4));
                                                            si32(0, (_local_34.hashScratchAddr + _local_25));
                                                            _local_35 = 775236557;
                                                            _local_36 = -862048943;
                                                            _local_37 = 461845907;
                                                            _local_38 = (li32(_local_34.hashScratchAddr) * _local_36);
                                                            _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                            _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                                            _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                                            _local_35 = ((_local_35 * 5) + -430675100);
                                                            _local_38 = (li32(_local_34.hashScratchAddr + 4) * _local_36);
                                                            _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                            _local_35 = (_local_35 ^ (_local_38 * _local_37));
                                                            _local_35 = ((_local_35 << 13) | (_local_35 >>> 19));
                                                            _local_35 = ((_local_35 * 5) + -430675100);
                                                            _local_39 = (_local_35 ^ _local_25);
                                                            _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                            _local_39 = (_local_39 * -2048144789);
                                                            _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                            _local_39 = (_local_39 * -1028477387);
                                                            _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                            _local_29 = (_local_34.addr + (_local_30 * 5));
                                                        };
                                                    };
                                                    si8(_local_25, _local_29);
                                                    si32(_local_26, (_local_29 + 1));
                                                };
                                            };
                                            _local_34.resultAddr = (_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07));
                                            _local_22 = (_local_15 + _local_20);
                                            _local_25 = 775236557;
                                            _local_26 = -862048943;
                                            _local_27 = 461845907;
                                            _local_28 = (li32(_local_22) * _local_26);
                                            _local_28 = ((_local_28 << 15) | (_local_28 >>> 17));
                                            _local_25 = (_local_25 ^ (_local_28 * _local_27));
                                            _local_25 = ((_local_25 << 13) | (_local_25 >>> 19));
                                            _local_25 = ((_local_25 * 5) + -430675100);
                                            _local_29 = (_local_25 ^ 0x04);
                                            _local_29 = (_local_29 ^ (_local_29 >>> 16));
                                            _local_29 = (_local_29 * -2048144789);
                                            _local_29 = (_local_29 ^ (_local_29 >>> 13));
                                            _local_29 = (_local_29 * -1028477387);
                                            _local_24 = ((_local_29 ^ (_local_29 >>> 16)) & 0xFFFF);
                                            _local_23 = (_local_34.addr + (_local_24 * 5));
                                            _local_24 = 3;
                                            _local_25 = -1;
                                            _local_27 = li32(_local_23 + 1);
                                            if ((((_local_27 >= (0)) && (li32(_local_22) == li32(_local_27))) && ((_local_22 - _local_27) <= _local_34.windowSize)))
                                            {
                                                _local_28 = (_local_22 + 4);
                                                _local_26 = 4;
                                                _local_27 = (_local_27 + 4);
                                                while (((((_local_28 + 4) <= (_local_7)) && (li32(_local_27) == li32(_local_28))) && ((_local_26 + 4) <= _local_34.maxMatchLength)))
                                                {
                                                    _local_26 = (_local_26 + 4);
                                                    _local_27 = (_local_27 + 4);
                                                    _local_28 = (_local_28 + 4);
                                                };
                                                while ((((_local_28 < (_local_7)) && (li8(_local_27) == li8(_local_28))) && (_local_26 < _local_34.maxMatchLength)))
                                                {
                                                    _local_26++;
                                                    _local_27++;
                                                    _local_28++;
                                                };
                                                _local_24 = _local_26;
                                                _local_25 = _local_27;
                                            };
                                            _local_29 = 5;
                                            _local_30 = 9;
                                            while (_local_29 < _local_30)
                                            {
                                                _local_35 = _local_29++;
                                                _local_38 = li32(_local_22);
                                                si32(_local_38, _local_34.hashScratchAddr);
                                                _local_38 = li32(_local_22 + 4);
                                                si32(_local_38, (_local_34.hashScratchAddr + 4));
                                                si32(0, (_local_34.hashScratchAddr + _local_35));
                                                _local_38 = 775236557;
                                                _local_39 = -862048943;
                                                _local_40 = 461845907;
                                                _local_41 = (li32(_local_34.hashScratchAddr) * _local_39);
                                                _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                                _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                                _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                                _local_38 = ((_local_38 * 5) + -430675100);
                                                _local_41 = (li32(_local_34.hashScratchAddr + 4) * _local_39);
                                                _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                                _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                                _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                                _local_38 = ((_local_38 * 5) + -430675100);
                                                _local_42 = (_local_38 ^ _local_35);
                                                _local_42 = (_local_42 ^ (_local_42 >>> 16));
                                                _local_42 = (_local_42 * -2048144789);
                                                _local_42 = (_local_42 ^ (_local_42 >>> 13));
                                                _local_42 = (_local_42 * -1028477387);
                                                _local_37 = ((_local_42 ^ (_local_42 >>> 16)) & 0xFFFF);
                                                _local_36 = ((_local_34.addr + (_local_37 * 5)) + 1);
                                                _local_27 = li32(_local_36);
                                                if ((((_local_27 >= (0)) && (li32(_local_22) == li32(_local_27))) && ((_local_22 - _local_27) <= _local_34.windowSize)))
                                                {
                                                    _local_28 = (_local_22 + 4);
                                                    _local_26 = 4;
                                                    _local_27 = (_local_27 + 4);
                                                    while (((((_local_28 + 4) <= (_local_7)) && (li32(_local_27) == li32(_local_28))) && ((_local_26 + 4) <= _local_34.maxMatchLength)))
                                                    {
                                                        _local_26 = (_local_26 + 4);
                                                        _local_27 = (_local_27 + 4);
                                                        _local_28 = (_local_28 + 4);
                                                    };
                                                    while ((((_local_28 < (_local_7)) && (li8(_local_27) == li8(_local_28))) && (_local_26 < _local_34.maxMatchLength)))
                                                    {
                                                        _local_26++;
                                                        _local_27++;
                                                        _local_28++;
                                                    };
                                                    if (_local_26 > _local_24)
                                                    {
                                                        _local_24 = _local_26;
                                                        _local_25 = _local_27;
                                                    };
                                                };
                                            };
                                            si32((((_local_22 - (_local_25 - _local_24)) << 16) | _local_24), _local_34.resultAddr);
                                            _local_24 = _local_23;
                                            _local_25 = 4;
                                            _local_26 = _local_22;
                                            _local_27 = li8(_local_24);
                                            if (((_local_27 < (8)) && (_local_27 >= 0)))
                                            {
                                                _local_28 = li32(_local_24 + 1);
                                                si8(_local_25, _local_24);
                                                si32(_local_26, (_local_24 + 1));
                                                _local_25 = (_local_27 + 1);
                                                _local_26 = _local_28;
                                                _local_30 = li32(_local_26);
                                                si32(_local_30, _local_34.hashScratchAddr);
                                                _local_30 = li32(_local_26 + 4);
                                                si32(_local_30, (_local_34.hashScratchAddr + 4));
                                                si32(0, (_local_34.hashScratchAddr + _local_25));
                                                _local_30 = 775236557;
                                                _local_35 = -862048943;
                                                _local_36 = 461845907;
                                                _local_37 = (li32(_local_34.hashScratchAddr) * _local_35);
                                                _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                _local_30 = ((_local_30 * 5) + -430675100);
                                                _local_37 = (li32(_local_34.hashScratchAddr + 4) * _local_35);
                                                _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                _local_30 = ((_local_30 * 5) + -430675100);
                                                _local_38 = (_local_30 ^ _local_25);
                                                _local_38 = (_local_38 ^ (_local_38 >>> 16));
                                                _local_38 = (_local_38 * -2048144789);
                                                _local_38 = (_local_38 ^ (_local_38 >>> 13));
                                                _local_38 = (_local_38 * -1028477387);
                                                _local_29 = ((_local_38 ^ (_local_38 >>> 16)) & 0xFFFF);
                                                _local_24 = (_local_34.addr + (_local_29 * 5));
                                                _local_27 = li8(_local_24);
                                                if (((_local_27 < (8)) && (_local_27 >= 0)))
                                                {
                                                    _local_28 = li32(_local_24 + 1);
                                                    si8(_local_25, _local_24);
                                                    si32(_local_26, (_local_24 + 1));
                                                    _local_25 = (_local_27 + 1);
                                                    _local_26 = _local_28;
                                                    _local_30 = li32(_local_26);
                                                    si32(_local_30, _local_34.hashScratchAddr);
                                                    _local_30 = li32(_local_26 + 4);
                                                    si32(_local_30, (_local_34.hashScratchAddr + 4));
                                                    si32(0, (_local_34.hashScratchAddr + _local_25));
                                                    _local_30 = 775236557;
                                                    _local_35 = -862048943;
                                                    _local_36 = 461845907;
                                                    _local_37 = (li32(_local_34.hashScratchAddr) * _local_35);
                                                    _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                    _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                    _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                    _local_30 = ((_local_30 * 5) + -430675100);
                                                    _local_37 = (li32(_local_34.hashScratchAddr + 4) * _local_35);
                                                    _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                    _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                    _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                    _local_30 = ((_local_30 * 5) + -430675100);
                                                    _local_38 = (_local_30 ^ _local_25);
                                                    _local_38 = (_local_38 ^ (_local_38 >>> 16));
                                                    _local_38 = (_local_38 * -2048144789);
                                                    _local_38 = (_local_38 ^ (_local_38 >>> 13));
                                                    _local_38 = (_local_38 * -1028477387);
                                                    _local_29 = ((_local_38 ^ (_local_38 >>> 16)) & 0xFFFF);
                                                    _local_24 = (_local_34.addr + (_local_29 * 5));
                                                    _local_27 = li8(_local_24);
                                                    if (((_local_27 < (8)) && (_local_27 >= 0)))
                                                    {
                                                        _local_28 = li32(_local_24 + 1);
                                                        si8(_local_25, _local_24);
                                                        si32(_local_26, (_local_24 + 1));
                                                        _local_25 = (_local_27 + 1);
                                                        _local_26 = _local_28;
                                                        _local_30 = li32(_local_26);
                                                        si32(_local_30, _local_34.hashScratchAddr);
                                                        _local_30 = li32(_local_26 + 4);
                                                        si32(_local_30, (_local_34.hashScratchAddr + 4));
                                                        si32(0, (_local_34.hashScratchAddr + _local_25));
                                                        _local_30 = 775236557;
                                                        _local_35 = -862048943;
                                                        _local_36 = 461845907;
                                                        _local_37 = (li32(_local_34.hashScratchAddr) * _local_35);
                                                        _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                        _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                        _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                        _local_30 = ((_local_30 * 5) + -430675100);
                                                        _local_37 = (li32(_local_34.hashScratchAddr + 4) * _local_35);
                                                        _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                        _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                        _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                        _local_30 = ((_local_30 * 5) + -430675100);
                                                        _local_38 = (_local_30 ^ _local_25);
                                                        _local_38 = (_local_38 ^ (_local_38 >>> 16));
                                                        _local_38 = (_local_38 * -2048144789);
                                                        _local_38 = (_local_38 ^ (_local_38 >>> 13));
                                                        _local_38 = (_local_38 * -1028477387);
                                                        _local_29 = ((_local_38 ^ (_local_38 >>> 16)) & 0xFFFF);
                                                        _local_24 = (_local_34.addr + (_local_29 * 5));
                                                        _local_27 = li8(_local_24);
                                                        if (((_local_27 < (8)) && (_local_27 >= 0)))
                                                        {
                                                            _local_28 = li32(_local_24 + 1);
                                                            si8(_local_25, _local_24);
                                                            si32(_local_26, (_local_24 + 1));
                                                            _local_25 = (_local_27 + 1);
                                                            _local_26 = _local_28;
                                                            _local_30 = li32(_local_26);
                                                            si32(_local_30, _local_34.hashScratchAddr);
                                                            _local_30 = li32(_local_26 + 4);
                                                            si32(_local_30, (_local_34.hashScratchAddr + 4));
                                                            si32(0, (_local_34.hashScratchAddr + _local_25));
                                                            _local_30 = 775236557;
                                                            _local_35 = -862048943;
                                                            _local_36 = 461845907;
                                                            _local_37 = (li32(_local_34.hashScratchAddr) * _local_35);
                                                            _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                            _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                            _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                            _local_30 = ((_local_30 * 5) + -430675100);
                                                            _local_37 = (li32(_local_34.hashScratchAddr + 4) * _local_35);
                                                            _local_37 = ((_local_37 << 15) | (_local_37 >>> 17));
                                                            _local_30 = (_local_30 ^ (_local_37 * _local_36));
                                                            _local_30 = ((_local_30 << 13) | (_local_30 >>> 19));
                                                            _local_30 = ((_local_30 * 5) + -430675100);
                                                            _local_38 = (_local_30 ^ _local_25);
                                                            _local_38 = (_local_38 ^ (_local_38 >>> 16));
                                                            _local_38 = (_local_38 * -2048144789);
                                                            _local_38 = (_local_38 ^ (_local_38 >>> 13));
                                                            _local_38 = (_local_38 * -1028477387);
                                                            _local_29 = ((_local_38 ^ (_local_38 >>> 16)) & 0xFFFF);
                                                            _local_24 = (_local_34.addr + (_local_29 * 5));
                                                        };
                                                    };
                                                };
                                            };
                                            si8(_local_25, _local_24);
                                            si32(_local_26, (_local_24 + 1));
                                            _local_34.resultAddr = (_local_34.baseResultAddr + (((_local_34.resultAddr - _local_34.baseResultAddr) + 4) & 0x07));
                                        };
                                    };
                                };
                                if (li16(_local_34.resultAddr) >= 4)
                                {
                                    _local_13 = li16(_local_34.resultAddr);
                                    _local_20 = li16(((scratchAddr + 2492) + (_local_13 << 2)) + 2);
                                    _local_21 = 0;
                                    _local_22 = ((scratchAddr + _local_21) + (_local_20 << 2));
                                    _local_23 = (li32(_local_22) + 1);
                                    si32(_local_23, _local_22);
                                    _local_20 = li16(_local_34.resultAddr + 2);
                                    _local_14 = li32((scratchAddr + 3528) + (((_local_20 <= 0x0100) ? _local_20 : (0x0100 + ((_local_20 - 1) >>> 7))) << 2));
                                    _local_20 = ((scratchAddr + 1144) + ((_local_14 >>> 24) << 2));
                                    _local_21 = (li32(_local_20) + 1);
                                    si32(_local_21, _local_20);
                                    _local_20 = (li32(_local_34.resultAddr) | 0x0200);
                                    si32(_local_20, _local_19);
                                    _local_19 = (_local_19 + 4);
                                    _local_15 = (_local_15 + _local_13);
                                }
                                else
                                {
                                    _local_11 = li8(_local_15);
                                    si16(_local_11, _local_19);
                                    _local_20 = 0;
                                    _local_21 = ((scratchAddr + _local_20) + (_local_11 << 2));
                                    _local_22 = (li32(_local_21) + 1);
                                    si32(_local_22, _local_21);
                                    _local_19 = (_local_19 + 2);
                                    _local_15++;
                                };
                            };
                            while (_local_15 < _local_7)
                            {
                                _local_11 = li8(_local_15);
                                si16(_local_11, _local_19);
                                _local_20 = 0;
                                _local_21 = ((scratchAddr + _local_20) + (_local_11 << 2));
                                _local_22 = (li32(_local_21) + 1);
                                si32(_local_22, _local_21);
                                _local_19 = (_local_19 + 2);
                                _local_15++;
                            };
                            _local_10 = false;
                            blockInProgress = true;
                            if (level == CompressionLevel.UNCOMPRESSED)
                            {
                                if (bitOffset == 0)
                                {
                                    si8(0, currentAddr);
                                };
                                _local_20 = li8(currentAddr);
                                _local_20 = (_local_20 | (((_local_10) ? 1 : 0) << bitOffset));
                                si32(_local_20, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                if (bitOffset > 0)
                                {
                                    _local_20 = li8(currentAddr);
                                    _local_20 = (_local_20 | (0 << bitOffset));
                                    si32(_local_20, currentAddr);
                                    bitOffset = (bitOffset + (8 - bitOffset));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                            }
                            else
                            {
                                _local_20 = li8(currentAddr);
                                _local_20 = (_local_20 | ((0x04 | ((_local_10) ? 1 : 0)) << bitOffset));
                                si32(_local_20, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockStartAddr = currentAddr;
                            createAndWriteHuffmanTrees(_local_6, _local_7);
                            _local_15 = _local_18;
                            while ((_local_15 + 64) <= _local_19)
                            {
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                            };
                            while (_local_15 < _local_19)
                            {
                                _local_24 = li16(_local_15);
                                if ((_local_24 & 0x0200) != 0)
                                {
                                    _local_20 = (_local_24 ^ 0x0200);
                                    _local_22 = li32((scratchAddr + 2492) + (_local_20 << 2));
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + ((_local_22 >>> 16) * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_20 - (_local_22 & 0x1FFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_22 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_21 = li16(_local_15 + 2);
                                    _local_23 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                    _local_25 = li32((scratchAddr + 1144) + ((_local_23 >>> 24) * 4));
                                    _local_26 = li8(currentAddr);
                                    _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                    si32(_local_26, currentAddr);
                                    bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li8(currentAddr);
                                    _local_25 = (_local_25 | ((_local_21 - (_local_23 & 0xFFFF)) << bitOffset));
                                    si32(_local_25, currentAddr);
                                    bitOffset = (bitOffset + ((_local_23 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_25 = 0;
                                    _local_26 = li32((scratchAddr + _local_25) + (_local_24 * 4));
                                    _local_27 = li8(currentAddr);
                                    _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                    si32(_local_27, currentAddr);
                                    bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_11 = _local_24;
                                _local_15 = (_local_15 + (2 + ((_local_11 & 0x0200) >>> 8)));
                            };
                            if (level != CompressionLevel.UNCOMPRESSED)
                            {
                                _local_20 = 0;
                                _local_21 = li32((scratchAddr + _local_20) + 0x0400);
                                _local_22 = li8(currentAddr);
                                _local_22 = (_local_22 | ((_local_21 >>> 16) << bitOffset));
                                si32(_local_22, currentAddr);
                                bitOffset = (bitOffset + (_local_21 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockInProgress = false;
                            _local_6 = _local_7;
                        };
                    }
                    else
                    {
                        throw (new Error("Compression level not supported"));
                    };
                };
            };
        }

        public function _fastWrite(_arg_1:int, _arg_2:int):void
        {
            var _local_3:int;
            var _local_4:int;
            var _local_5:int;
            var _local_6:int;
            var _local_7:uint;
            var _local_8:* = (null as ByteArray);
            var _local_9:uint;
            var _local_10:int;
            var _local_11:Number;
            var _local_12:Boolean;
            var _local_13:int;
            var _local_14:int;
            var _local_15:int;
            var _local_16:int;
            var _local_17:int;
            var _local_18:int;
            var _local_20:int;
            var _local_21:int;
            var _local_22:int;
            var _local_23:int;
            var _local_24:int;
            var _local_25:int;
            var _local_26:int;
            var _local_27:int;
            var _local_28:int;
            var _local_29:int;
            var _local_30:int;
            var _local_31:int;
            var _local_35:* = (null as LZHash);
            var _local_36:int;
            var _local_37:int;
            var _local_38:int;
            var _local_39:int;
            var _local_40:int;
            var _local_41:int;
            var _local_42:int;
            var _local_43:int;
            if (level == CompressionLevel.UNCOMPRESSED)
            {
                _local_3 = _arg_1;
                if (zlib)
                {
                    _local_4 = _local_3;
                    while ((_local_4 + 5552) <= _arg_2)
                    {
                        _local_5 = _local_4;
                        while (_local_5 < (_local_4 + 5552))
                        {
                            s2 = (s2 + (((((((((((((((((s1 << 4) + (li8(_local_5) * 16)) + (li8(_local_5 + 1) * 15)) + (li8(_local_5 + 2) * 14)) + (li8(_local_5 + 3) * 13)) + (li8(_local_5 + 4) * 12)) + (li8(_local_5 + 5) * 11)) + (li8(_local_5 + 6) * 10)) + (li8(_local_5 + 7) * 9)) + (li8(_local_5 + 8) * 8)) + (li8(_local_5 + 9) * 7)) + (li8(_local_5 + 10) * 6)) + (li8(_local_5 + 11) * 5)) + (li8(_local_5 + 12) * 4)) + (li8(_local_5 + 13) * 3)) + (li8(_local_5 + 14) * 2)) + li8(_local_5 + 15)));
                            s1 = (s1 + (((((((((((((((li8(_local_5) + li8(_local_5 + 1)) + li8(_local_5 + 2)) + li8(_local_5 + 3)) + li8(_local_5 + 4)) + li8(_local_5 + 5)) + li8(_local_5 + 6)) + li8(_local_5 + 7)) + li8(_local_5 + 8)) + li8(_local_5 + 9)) + li8(_local_5 + 10)) + li8(_local_5 + 11)) + li8(_local_5 + 12)) + li8(_local_5 + 13)) + li8(_local_5 + 14)) + li8(_local_5 + 15)));
                            _local_5 = (_local_5 + 16);
                        };
                        s1 = (s1 % 65521);
                        s2 = (s2 % 65521);
                        _local_4 = (_local_4 + 5552);
                    };
                    if (_local_4 != _arg_2)
                    {
                        _local_5 = _local_4;
                        while (_local_5 < _arg_2)
                        {
                            _local_6 = _local_5++;
                            s1 = (s1 + li8(_local_6));
                            s2 = (s2 + s1);
                        };
                        s1 = (s1 % 65521);
                        s2 = (s2 % 65521);
                    };
                };
                _local_4 = 8;
                _local_5 = (_arg_2 - _local_3);
                _local_6 = int(Math.ceil((_local_5 / 0xFFFF)));
                _local_7 = (_local_5 + (_local_4 * _local_6));
                _local_8 = ApplicationDomain.currentDomain.domainMemory;
                _local_9 = (_local_8.length - currentAddr);
                if (_local_9 < _local_7)
                {
                    _local_8.length = (currentAddr + _local_7);
                    ApplicationDomain.currentDomain.domainMemory = _local_8;
                };
                while ((_arg_2 - _local_3) > 0)
                {
                    _local_11 = Math.min((_arg_2 - _local_3), 0xFFFF);
                    _local_10 = _local_11;
                    _local_12 = false;
                    blockInProgress = true;
                    if (level == CompressionLevel.UNCOMPRESSED)
                    {
                        if (bitOffset == 0)
                        {
                            si8(0, currentAddr);
                        };
                        _local_13 = li8(currentAddr);
                        _local_13 = (_local_13 | (((_local_12) ? 1 : 0) << bitOffset));
                        si32(_local_13, currentAddr);
                        bitOffset = (bitOffset + 3);
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                        if (bitOffset > 0)
                        {
                            _local_13 = li8(currentAddr);
                            _local_13 = (_local_13 | (0 << bitOffset));
                            si32(_local_13, currentAddr);
                            bitOffset = (bitOffset + (8 - bitOffset));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                        };
                    }
                    else
                    {
                        _local_13 = li8(currentAddr);
                        _local_13 = (_local_13 | ((0x04 | ((_local_12) ? 1 : 0)) << bitOffset));
                        si32(_local_13, currentAddr);
                        bitOffset = (bitOffset + 3);
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    blockStartAddr = currentAddr;
                    si16(_local_10, currentAddr);
                    currentAddr = (currentAddr + 2);
                    si16((~(_local_10)), currentAddr);
                    currentAddr = (currentAddr + 2);
                    _local_13 = (_local_3 + _local_10);
                    _local_14 = (_local_3 + (_local_10 & 0xFFFFFFE0));
                    _local_15 = _local_3;
                    while (_local_15 < _local_14)
                    {
                        _local_16 = li32(_local_15);
                        si32(_local_16, currentAddr);
                        _local_16 = li32(_local_15 + 4);
                        si32(_local_16, (currentAddr + 4));
                        _local_16 = li32(_local_15 + 8);
                        si32(_local_16, (currentAddr + 8));
                        _local_16 = li32(_local_15 + 12);
                        si32(_local_16, (currentAddr + 12));
                        _local_16 = li32(_local_15 + 16);
                        si32(_local_16, (currentAddr + 16));
                        _local_16 = li32(_local_15 + 20);
                        si32(_local_16, (currentAddr + 20));
                        _local_16 = li32(_local_15 + 24);
                        si32(_local_16, (currentAddr + 24));
                        _local_16 = li32(_local_15 + 28);
                        si32(_local_16, (currentAddr + 28));
                        currentAddr = (currentAddr + 32);
                        _local_15 = (_local_15 + 32);
                    };
                    while (_local_15 < _local_13)
                    {
                        _local_16 = li8(_local_15);
                        si8(_local_16, currentAddr);
                        currentAddr = (currentAddr + 1);
                        _local_15++;
                    };
                    if (level != CompressionLevel.UNCOMPRESSED)
                    {
                        _local_16 = 0;
                        _local_17 = li32((scratchAddr + _local_16) + 0x0400);
                        _local_18 = li8(currentAddr);
                        _local_18 = (_local_18 | ((_local_17 >>> 16) << bitOffset));
                        si32(_local_18, currentAddr);
                        bitOffset = (bitOffset + (_local_17 & 0xFFFF));
                        currentAddr = (currentAddr + (bitOffset >>> 3));
                        bitOffset = (bitOffset & 0x07);
                    };
                    blockInProgress = false;
                    _local_3 = (_local_3 + _local_10);
                };
            }
            else
            {
                _local_3 = (_arg_2 - _arg_1);
                _local_8 = ApplicationDomain.currentDomain.domainMemory;
                _local_6 = 1;
                _local_10 = 0;
                if (level == CompressionLevel.UNCOMPRESSED)
                {
                    _local_5 = 8;
                    _local_4 = int(Math.ceil((_local_3 / 0xFFFF)));
                }
                else
                {
                    if (level == CompressionLevel.FAST)
                    {
                        _local_4 = int(Math.ceil(((_local_3 * 2) / 0xC000)));
                    }
                    else
                    {
                        _local_4 = int(Math.ceil((_local_3 / 98304)));
                        if (level == CompressionLevel.NORMAL)
                        {
                            _local_10 = 0x70000;
                        }
                        else
                        {
                            if (level == CompressionLevel.GOOD)
                            {
                                _local_10 = 524308;
                            };
                        };
                    };
                    _local_6 = 2;
                    _local_5 = 300;
                };
                _local_7 = ((((_local_3 * _local_6) + (_local_5 * (_local_4 + 1))) + _local_10) + currentAddr);
                if (_local_7 > _local_8.length)
                {
                    _local_6 = 1;
                    _local_10 = 0;
                    if (level == CompressionLevel.UNCOMPRESSED)
                    {
                        _local_5 = 8;
                        _local_4 = int(Math.ceil((_local_3 / 0xFFFF)));
                    }
                    else
                    {
                        if (level == CompressionLevel.FAST)
                        {
                            _local_4 = int(Math.ceil(((_local_3 * 2) / 0xC000)));
                        }
                        else
                        {
                            _local_4 = int(Math.ceil((_local_3 / 98304)));
                            if (level == CompressionLevel.NORMAL)
                            {
                                _local_10 = 0x70000;
                            }
                            else
                            {
                                if (level == CompressionLevel.GOOD)
                                {
                                    _local_10 = 524308;
                                };
                            };
                        };
                        _local_6 = 2;
                        _local_5 = 300;
                    };
                    _local_8.length = ((((_local_3 * _local_6) + (_local_5 * (_local_4 + 1))) + _local_10) + currentAddr);
                    ApplicationDomain.currentDomain.domainMemory = _local_8;
                };
                if (zlib)
                {
                    _local_4 = _arg_1;
                    while ((_local_4 + 5552) <= _arg_2)
                    {
                        _local_5 = _local_4;
                        while (_local_5 < (_local_4 + 5552))
                        {
                            s2 = (s2 + (((((((((((((((((s1 << 4) + (li8(_local_5) * 16)) + (li8(_local_5 + 1) * 15)) + (li8(_local_5 + 2) * 14)) + (li8(_local_5 + 3) * 13)) + (li8(_local_5 + 4) * 12)) + (li8(_local_5 + 5) * 11)) + (li8(_local_5 + 6) * 10)) + (li8(_local_5 + 7) * 9)) + (li8(_local_5 + 8) * 8)) + (li8(_local_5 + 9) * 7)) + (li8(_local_5 + 10) * 6)) + (li8(_local_5 + 11) * 5)) + (li8(_local_5 + 12) * 4)) + (li8(_local_5 + 13) * 3)) + (li8(_local_5 + 14) * 2)) + li8(_local_5 + 15)));
                            s1 = (s1 + (((((((((((((((li8(_local_5) + li8(_local_5 + 1)) + li8(_local_5 + 2)) + li8(_local_5 + 3)) + li8(_local_5 + 4)) + li8(_local_5 + 5)) + li8(_local_5 + 6)) + li8(_local_5 + 7)) + li8(_local_5 + 8)) + li8(_local_5 + 9)) + li8(_local_5 + 10)) + li8(_local_5 + 11)) + li8(_local_5 + 12)) + li8(_local_5 + 13)) + li8(_local_5 + 14)) + li8(_local_5 + 15)));
                            _local_5 = (_local_5 + 16);
                        };
                        s1 = (s1 % 65521);
                        s2 = (s2 % 65521);
                        _local_4 = (_local_4 + 5552);
                    };
                    if (_local_4 != _arg_2)
                    {
                        _local_5 = _local_4;
                        while (_local_5 < _arg_2)
                        {
                            _local_6 = _local_5++;
                            s1 = (s1 + li8(_local_6));
                            s2 = (s2 + s1);
                        };
                        s1 = (s1 % 65521);
                        s2 = (s2 % 65521);
                    };
                };
                if (level == CompressionLevel.FAST)
                {
                    _local_4 = _arg_1;
                    _local_5 = 0x0800;
                    _local_6 = _local_4;
                    while ((_arg_2 - _local_4) > _local_5)
                    {
                        _local_10 = (_local_4 + _local_5);
                        if (!blockInProgress)
                        {
                            _local_12 = false;
                            blockInProgress = true;
                            if (level == CompressionLevel.UNCOMPRESSED)
                            {
                                if (bitOffset == 0)
                                {
                                    si8(0, currentAddr);
                                };
                                _local_13 = li8(currentAddr);
                                _local_13 = (_local_13 | (((_local_12) ? 1 : 0) << bitOffset));
                                si32(_local_13, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                if (bitOffset > 0)
                                {
                                    _local_13 = li8(currentAddr);
                                    _local_13 = (_local_13 | (0 << bitOffset));
                                    si32(_local_13, currentAddr);
                                    bitOffset = (bitOffset + (8 - bitOffset));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                            }
                            else
                            {
                                _local_13 = li8(currentAddr);
                                _local_13 = (_local_13 | ((0x04 | ((_local_12) ? 1 : 0)) << bitOffset));
                                si32(_local_13, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockStartAddr = currentAddr;
                            _local_11 = Math.min(_arg_2, (_local_4 + 98304));
                            createAndWriteHuffmanTrees(_local_4, _local_11);
                        };
                        while (_local_6 < _local_10)
                        {
                            _local_13 = li8(_local_6);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_14 = ++_local_6;
                            _local_13 = li8(_local_14);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_6++;
                        };
                        _local_4 = (_local_4 + _local_5);
                        if (((blockInProgress) ? (currentAddr - blockStartAddr) : 0) > 0xC000)
                        {
                            if (level != CompressionLevel.UNCOMPRESSED)
                            {
                                _local_13 = 0;
                                _local_14 = li32((scratchAddr + _local_13) + 0x0400);
                                _local_15 = li8(currentAddr);
                                _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                                si32(_local_15, currentAddr);
                                bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockInProgress = false;
                        };
                    };
                    if (_local_6 < _arg_2)
                    {
                        if (!blockInProgress)
                        {
                            _local_12 = false;
                            blockInProgress = true;
                            if (level == CompressionLevel.UNCOMPRESSED)
                            {
                                if (bitOffset == 0)
                                {
                                    si8(0, currentAddr);
                                };
                                _local_13 = li8(currentAddr);
                                _local_13 = (_local_13 | (((_local_12) ? 1 : 0) << bitOffset));
                                si32(_local_13, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                if (bitOffset > 0)
                                {
                                    _local_13 = li8(currentAddr);
                                    _local_13 = (_local_13 | (0 << bitOffset));
                                    si32(_local_13, currentAddr);
                                    bitOffset = (bitOffset + (8 - bitOffset));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                            }
                            else
                            {
                                _local_13 = li8(currentAddr);
                                _local_13 = (_local_13 | ((0x04 | ((_local_12) ? 1 : 0)) << bitOffset));
                                si32(_local_13, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockStartAddr = currentAddr;
                            createAndWriteHuffmanTrees(_local_4, _arg_2);
                        };
                        while (_local_6 < _arg_2)
                        {
                            _local_13 = li8(_local_6);
                            _local_14 = 0;
                            _local_15 = li32((scratchAddr + _local_14) + (_local_13 * 4));
                            _local_16 = li8(currentAddr);
                            _local_16 = (_local_16 | ((_local_15 >>> 16) << bitOffset));
                            si32(_local_16, currentAddr);
                            bitOffset = (bitOffset + (_local_15 & 0xFFFF));
                            currentAddr = (currentAddr + (bitOffset >>> 3));
                            bitOffset = (bitOffset & 0x07);
                            _local_6++;
                        };
                        if (((blockInProgress) ? (currentAddr - blockStartAddr) : 0) > 0xC000)
                        {
                            if (level != CompressionLevel.UNCOMPRESSED)
                            {
                                _local_13 = 0;
                                _local_14 = li32((scratchAddr + _local_13) + 0x0400);
                                _local_15 = li8(currentAddr);
                                _local_15 = (_local_15 | ((_local_14 >>> 16) << bitOffset));
                                si32(_local_15, currentAddr);
                                bitOffset = (bitOffset + (_local_14 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockInProgress = false;
                        };
                    };
                }
                else
                {
                    if (level == CompressionLevel.NORMAL)
                    {
                        _local_4 = _arg_1;
                        _local_22 = (_arg_2 - _local_4);
                        _local_25 = 1;
                        _local_26 = 0;
                        if (level == CompressionLevel.UNCOMPRESSED)
                        {
                            _local_24 = 8;
                            _local_23 = int(Math.ceil((_local_22 / 0xFFFF)));
                        }
                        else
                        {
                            if (level == CompressionLevel.FAST)
                            {
                                _local_23 = int(Math.ceil(((_local_22 * 2) / 0xC000)));
                            }
                            else
                            {
                                _local_23 = int(Math.ceil((_local_22 / 98304)));
                                if (level == CompressionLevel.NORMAL)
                                {
                                    _local_26 = 0x70000;
                                }
                                else
                                {
                                    if (level == CompressionLevel.GOOD)
                                    {
                                        _local_26 = 524308;
                                    };
                                };
                            };
                            _local_25 = 2;
                            _local_24 = 300;
                        };
                        _local_21 = ((currentAddr + (((_local_22 * _local_25) + (_local_24 * (_local_23 + 1))) + _local_26)) - 0x40000);
                        _local_22 = (_local_21 - 0x30000);
                        _local_17 = ((_local_21 + 0x40000) - 32);
                        while (_local_17 >= _local_21)
                        {
                            si32(-1, _local_17);
                            si32(-1, (_local_17 + 4));
                            si32(-1, (_local_17 + 8));
                            si32(-1, (_local_17 + 12));
                            si32(-1, (_local_17 + 16));
                            si32(-1, (_local_17 + 20));
                            si32(-1, (_local_17 + 24));
                            si32(-1, (_local_17 + 28));
                            _local_17 = (_local_17 - 32);
                        };
                        while ((_arg_2 - _local_4) > 0)
                        {
                            _local_11 = Math.min(_arg_2, (_local_4 + 98304));
                            _local_5 = _local_11;
                            _local_6 = (_local_5 - 4);
                            _local_24 = 0;
                            while (_local_24 < 286)
                            {
                                _local_25 = _local_24++;
                                si32(0, (scratchAddr + (_local_25 << 2)));
                            };
                            _local_24 = 0;
                            while (_local_24 < 30)
                            {
                                _local_25 = _local_24++;
                                si32(0, ((scratchAddr + 1144) + (_local_25 << 2)));
                            };
                            _local_23 = _local_22;
                            _local_17 = _local_4;
                            while (_local_17 < _local_6)
                            {
                                _local_24 = 775236557;
                                _local_25 = -862048943;
                                _local_26 = 461845907;
                                _local_27 = (li32(_local_17) * _local_25);
                                _local_27 = ((_local_27 << 15) | (_local_27 >>> 17));
                                _local_24 = (_local_24 ^ (_local_27 * _local_26));
                                _local_24 = ((_local_24 << 13) | (_local_24 >>> 19));
                                _local_24 = ((_local_24 * 5) + -430675100);
                                _local_28 = (_local_24 ^ 0x04);
                                _local_28 = (_local_28 ^ (_local_28 >>> 16));
                                _local_28 = (_local_28 * -2048144789);
                                _local_28 = (_local_28 ^ (_local_28 >>> 13));
                                _local_28 = (_local_28 * -1028477387);
                                _local_16 = (((_local_28 ^ (_local_28 >>> 16)) & 0xFFFF) << 2);
                                _local_18 = li32(_local_21 + _local_16);
                                if (((_local_18 >= (0)) && (li32(_local_18) == li32(_local_17))))
                                {
                                    _local_13 = 4;
                                    _local_18 = (_local_18 + 4);
                                    _local_20 = (_local_17 + 4);
                                    while ((((_local_20 < (_local_5)) && (li8(_local_18) == li8(_local_20))) && (_local_13 < 258)))
                                    {
                                        _local_18++;
                                        _local_20++;
                                        _local_13++;
                                    };
                                    si32(_local_17, (_local_21 + _local_16));
                                    _local_14 = (_local_20 - _local_18);
                                    if (_local_14 <= 0x8000)
                                    {
                                        _local_24 = li16(((scratchAddr + 2492) + (_local_13 << 2)) + 2);
                                        _local_25 = 0;
                                        _local_26 = ((scratchAddr + _local_25) + (_local_24 << 2));
                                        _local_27 = (li32(_local_26) + 1);
                                        si32(_local_27, _local_26);
                                        _local_15 = li32((scratchAddr + 3528) + (((_local_14 <= 0x0100) ? _local_14 : (0x0100 + ((_local_14 - 1) >>> 7))) << 2));
                                        _local_24 = ((scratchAddr + 1144) + ((_local_15 >>> 24) << 2));
                                        _local_25 = (li32(_local_24) + 1);
                                        si32(_local_25, _local_24);
                                        si32(((_local_13 | 0x0200) | (_local_14 << 16)), _local_23);
                                        _local_23 = (_local_23 + 4);
                                        _local_17 = (_local_17 + _local_13);
                                        if (_local_17 < _local_6)
                                        {
                                            var _temp_1:* = _local_21;
                                            _local_25 = 775236557;
                                            _local_26 = -862048943;
                                            _local_27 = 461845907;
                                            _local_28 = (li32(_local_17 - 1) * _local_26);
                                            _local_28 = ((_local_28 << 15) | (_local_28 >>> 17));
                                            _local_25 = (_local_25 ^ (_local_28 * _local_27));
                                            _local_25 = ((_local_25 << 13) | (_local_25 >>> 19));
                                            _local_25 = ((_local_25 * 5) + -430675100);
                                            _local_29 = (_local_25 ^ 0x04);
                                            _local_29 = (_local_29 ^ (_local_29 >>> 16));
                                            _local_29 = (_local_29 * -2048144789);
                                            _local_29 = (_local_29 ^ (_local_29 >>> 13));
                                            _local_29 = (_local_29 * -1028477387);
                                            _local_24 = (_temp_1 + (((_local_29 ^ (_local_29 >>> 16)) & 0xFFFF) << 2));
                                            si32((_local_17 - 1), _local_24);
                                        };
                                    }
                                    else
                                    {
                                        _local_10 = li8(_local_17);
                                        si16(_local_10, _local_23);
                                        _local_24 = 0;
                                        _local_25 = ((scratchAddr + _local_24) + (_local_10 << 2));
                                        _local_26 = (li32(_local_25) + 1);
                                        si32(_local_26, _local_25);
                                        _local_23 = (_local_23 + 2);
                                        _local_17++;
                                    };
                                }
                                else
                                {
                                    _local_10 = li8(_local_17);
                                    si16(_local_10, _local_23);
                                    _local_24 = 0;
                                    _local_25 = ((scratchAddr + _local_24) + (_local_10 << 2));
                                    _local_26 = (li32(_local_25) + 1);
                                    si32(_local_26, _local_25);
                                    si32(_local_17, (_local_21 + _local_16));
                                    _local_23 = (_local_23 + 2);
                                    _local_17++;
                                };
                            };
                            while (_local_17 < _local_5)
                            {
                                _local_10 = li8(_local_17);
                                si16(_local_10, _local_23);
                                _local_24 = 0;
                                _local_25 = ((scratchAddr + _local_24) + (_local_10 << 2));
                                _local_26 = (li32(_local_25) + 1);
                                si32(_local_26, _local_25);
                                _local_23 = (_local_23 + 2);
                                _local_17++;
                            };
                            _local_12 = false;
                            blockInProgress = true;
                            if (level == CompressionLevel.UNCOMPRESSED)
                            {
                                if (bitOffset == 0)
                                {
                                    si8(0, currentAddr);
                                };
                                _local_24 = li8(currentAddr);
                                _local_24 = (_local_24 | (((_local_12) ? 1 : 0) << bitOffset));
                                si32(_local_24, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                                if (bitOffset > 0)
                                {
                                    _local_24 = li8(currentAddr);
                                    _local_24 = (_local_24 | (0 << bitOffset));
                                    si32(_local_24, currentAddr);
                                    bitOffset = (bitOffset + (8 - bitOffset));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                            }
                            else
                            {
                                _local_24 = li8(currentAddr);
                                _local_24 = (_local_24 | ((0x04 | ((_local_12) ? 1 : 0)) << bitOffset));
                                si32(_local_24, currentAddr);
                                bitOffset = (bitOffset + 3);
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockStartAddr = currentAddr;
                            createAndWriteHuffmanTrees(_local_4, _local_5);
                            _local_17 = _local_22;
                            while ((_local_17 + 64) <= _local_23)
                            {
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                            };
                            while (_local_17 < _local_23)
                            {
                                _local_28 = li16(_local_17);
                                if ((_local_28 & 0x0200) != 0)
                                {
                                    _local_24 = (_local_28 ^ 0x0200);
                                    _local_26 = li32((scratchAddr + 2492) + (_local_24 << 2));
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + ((_local_26 >>> 16) * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_24 - (_local_26 & 0x1FFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_26 & 0xFF00) >>> 13));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_25 = li16(_local_17 + 2);
                                    _local_27 = li32((scratchAddr + 3528) + (((_local_25 <= 0x0100) ? _local_25 : (0x0100 + ((_local_25 - 1) >>> 7))) << 2));
                                    _local_29 = li32((scratchAddr + 1144) + ((_local_27 >>> 24) * 4));
                                    _local_30 = li8(currentAddr);
                                    _local_30 = (_local_30 | ((_local_29 >>> 16) << bitOffset));
                                    si32(_local_30, currentAddr);
                                    bitOffset = (bitOffset + (_local_29 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    _local_29 = li8(currentAddr);
                                    _local_29 = (_local_29 | ((_local_25 - (_local_27 & 0xFFFF)) << bitOffset));
                                    si32(_local_29, currentAddr);
                                    bitOffset = (bitOffset + ((_local_27 & 0xFF0000) >>> 16));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                }
                                else
                                {
                                    _local_29 = 0;
                                    _local_30 = li32((scratchAddr + _local_29) + (_local_28 * 4));
                                    _local_31 = li8(currentAddr);
                                    _local_31 = (_local_31 | ((_local_30 >>> 16) << bitOffset));
                                    si32(_local_31, currentAddr);
                                    bitOffset = (bitOffset + (_local_30 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                _local_10 = _local_28;
                                _local_17 = (_local_17 + (2 + ((_local_10 & 0x0200) >>> 8)));
                            };
                            if (level != CompressionLevel.UNCOMPRESSED)
                            {
                                _local_24 = 0;
                                _local_25 = li32((scratchAddr + _local_24) + 0x0400);
                                _local_26 = li8(currentAddr);
                                _local_26 = (_local_26 | ((_local_25 >>> 16) << bitOffset));
                                si32(_local_26, currentAddr);
                                bitOffset = (bitOffset + (_local_25 & 0xFFFF));
                                currentAddr = (currentAddr + (bitOffset >>> 3));
                                bitOffset = (bitOffset & 0x07);
                            };
                            blockInProgress = false;
                            _local_4 = _local_5;
                        };
                    }
                    else
                    {
                        if (level == CompressionLevel.GOOD)
                        {
                            _local_4 = _arg_1;
                            _local_18 = (_arg_2 - _local_4);
                            _local_22 = 1;
                            _local_23 = 0;
                            if (level == CompressionLevel.UNCOMPRESSED)
                            {
                                _local_21 = 8;
                                _local_20 = int(Math.ceil((_local_18 / 0xFFFF)));
                            }
                            else
                            {
                                if (level == CompressionLevel.FAST)
                                {
                                    _local_20 = int(Math.ceil(((_local_18 * 2) / 0xC000)));
                                }
                                else
                                {
                                    _local_20 = int(Math.ceil((_local_18 / 98304)));
                                    if (level == CompressionLevel.NORMAL)
                                    {
                                        _local_23 = 0x70000;
                                    }
                                    else
                                    {
                                        if (level == CompressionLevel.GOOD)
                                        {
                                            _local_23 = 524308;
                                        };
                                    };
                                };
                                _local_22 = 2;
                                _local_21 = 300;
                            };
                            _local_17 = ((currentAddr + (((_local_18 * _local_22) + (_local_21 * (_local_20 + 1))) + _local_23)) - 327700);
                            _local_18 = (_local_17 - 0x30000);
                            _local_35 = new LZHash(_local_17, 258, 0x8000);
                            while ((_arg_2 - _local_4) > 0)
                            {
                                _local_11 = Math.min(_arg_2, (_local_4 + 98304));
                                _local_5 = _local_11;
                                _local_10 = (_local_5 - 9);
                                _local_6 = ((_local_10 - 516) - 1);
                                _local_21 = 0;
                                while (_local_21 < 286)
                                {
                                    _local_22 = _local_21++;
                                    si32(0, (scratchAddr + (_local_22 << 2)));
                                };
                                _local_21 = 0;
                                while (_local_21 < 30)
                                {
                                    _local_22 = _local_21++;
                                    si32(0, ((scratchAddr + 1144) + (_local_22 << 2)));
                                };
                                _local_20 = _local_18;
                                _local_16 = _local_4;
                                if (_local_16 < _local_6)
                                {
                                    _local_23 = 775236557;
                                    _local_24 = -862048943;
                                    _local_25 = 461845907;
                                    _local_26 = (li32(_local_4) * _local_24);
                                    _local_26 = ((_local_26 << 15) | (_local_26 >>> 17));
                                    _local_23 = (_local_23 ^ (_local_26 * _local_25));
                                    _local_23 = ((_local_23 << 13) | (_local_23 >>> 19));
                                    _local_23 = ((_local_23 * 5) + -430675100);
                                    _local_27 = (_local_23 ^ 0x04);
                                    _local_27 = (_local_27 ^ (_local_27 >>> 16));
                                    _local_27 = (_local_27 * -2048144789);
                                    _local_27 = (_local_27 ^ (_local_27 >>> 13));
                                    _local_27 = (_local_27 * -1028477387);
                                    _local_22 = ((_local_27 ^ (_local_27 >>> 16)) & 0xFFFF);
                                    _local_21 = (_local_35.addr + (_local_22 * 5));
                                    _local_22 = 3;
                                    _local_23 = -1;
                                    _local_25 = li32(_local_21 + 1);
                                    if ((((_local_25 >= (0)) && (li32(_local_4) == li32(_local_25))) && ((_local_4 - _local_25) <= _local_35.windowSize)))
                                    {
                                        _local_26 = (_local_4 + 4);
                                        _local_24 = 4;
                                        _local_25 = (_local_25 + 4);
                                        while (((li32(_local_25) == (li32(_local_26))) && ((_local_24 + 4) <= _local_35.maxMatchLength)))
                                        {
                                            _local_24 = (_local_24 + 4);
                                            _local_25 = (_local_25 + 4);
                                            _local_26 = (_local_26 + 4);
                                        };
                                        while (((li8(_local_25) == (li8(_local_26))) && (_local_24 < _local_35.maxMatchLength)))
                                        {
                                            _local_24++;
                                            _local_25++;
                                            _local_26++;
                                        };
                                        _local_22 = _local_24;
                                        _local_23 = _local_25;
                                    };
                                    _local_27 = 5;
                                    _local_28 = 9;
                                    while (_local_27 < _local_28)
                                    {
                                        _local_29 = _local_27++;
                                        _local_36 = li32(_local_4);
                                        si32(_local_36, _local_35.hashScratchAddr);
                                        _local_36 = li32(_local_4 + 4);
                                        si32(_local_36, (_local_35.hashScratchAddr + 4));
                                        si32(0, (_local_35.hashScratchAddr + _local_29));
                                        _local_36 = 775236557;
                                        _local_37 = -862048943;
                                        _local_38 = 461845907;
                                        _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                        _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                        _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                        _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                        _local_36 = ((_local_36 * 5) + -430675100);
                                        _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                        _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                        _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                        _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                        _local_36 = ((_local_36 * 5) + -430675100);
                                        _local_40 = (_local_36 ^ _local_29);
                                        _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                        _local_40 = (_local_40 * -2048144789);
                                        _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                        _local_40 = (_local_40 * -1028477387);
                                        _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                        _local_30 = ((_local_35.addr + (_local_31 * 5)) + 1);
                                        _local_25 = li32(_local_30);
                                        if (((((_local_25 >= (0)) && (li32((_local_25 + _local_22) - 3) == li32((_local_4 + _local_22) - 3))) && (li32(_local_4) == li32(_local_25))) && ((_local_4 - _local_25) <= _local_35.windowSize)))
                                        {
                                            _local_26 = (_local_4 + 4);
                                            _local_24 = 4;
                                            _local_25 = (_local_25 + 4);
                                            while (((li32(_local_25) == (li32(_local_26))) && ((_local_24 + 4) <= _local_35.maxMatchLength)))
                                            {
                                                _local_24 = (_local_24 + 4);
                                                _local_25 = (_local_25 + 4);
                                                _local_26 = (_local_26 + 4);
                                            };
                                            while (((li8(_local_25) == (li8(_local_26))) && (_local_24 < _local_35.maxMatchLength)))
                                            {
                                                _local_24++;
                                                _local_25++;
                                                _local_26++;
                                            };
                                            if (_local_24 > _local_22)
                                            {
                                                _local_22 = _local_24;
                                                _local_23 = _local_25;
                                            };
                                        };
                                    };
                                    si32((((_local_4 - (_local_23 - _local_22)) << 16) | _local_22), _local_35.resultAddr);
                                    _local_22 = _local_21;
                                    _local_23 = 4;
                                    _local_24 = _local_4;
                                    _local_25 = li8(_local_22);
                                    if (((_local_25 < (8)) && (_local_25 >= 0)))
                                    {
                                        _local_26 = li32(_local_22 + 1);
                                        si8(_local_23, _local_22);
                                        si32(_local_24, (_local_22 + 1));
                                        _local_23 = (_local_25 + 1);
                                        _local_24 = _local_26;
                                        _local_28 = li32(_local_24);
                                        si32(_local_28, _local_35.hashScratchAddr);
                                        _local_28 = li32(_local_24 + 4);
                                        si32(_local_28, (_local_35.hashScratchAddr + 4));
                                        si32(0, (_local_35.hashScratchAddr + _local_23));
                                        _local_28 = 775236557;
                                        _local_29 = -862048943;
                                        _local_30 = 461845907;
                                        _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                        _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                        _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                        _local_28 = ((_local_28 * 5) + -430675100);
                                        _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                        _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                        _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                        _local_28 = ((_local_28 * 5) + -430675100);
                                        _local_36 = (_local_28 ^ _local_23);
                                        _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                        _local_36 = (_local_36 * -2048144789);
                                        _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                        _local_36 = (_local_36 * -1028477387);
                                        _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                        _local_22 = (_local_35.addr + (_local_27 * 5));
                                        _local_25 = li8(_local_22);
                                        if (((_local_25 < (8)) && (_local_25 >= 0)))
                                        {
                                            _local_26 = li32(_local_22 + 1);
                                            si8(_local_23, _local_22);
                                            si32(_local_24, (_local_22 + 1));
                                            _local_23 = (_local_25 + 1);
                                            _local_24 = _local_26;
                                            _local_28 = li32(_local_24);
                                            si32(_local_28, _local_35.hashScratchAddr);
                                            _local_28 = li32(_local_24 + 4);
                                            si32(_local_28, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_23));
                                            _local_28 = 775236557;
                                            _local_29 = -862048943;
                                            _local_30 = 461845907;
                                            _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                            _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                            _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_36 = (_local_28 ^ _local_23);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                            _local_36 = (_local_36 * -2048144789);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                            _local_36 = (_local_36 * -1028477387);
                                            _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                            _local_22 = (_local_35.addr + (_local_27 * 5));
                                            _local_25 = li8(_local_22);
                                            if (((_local_25 < (8)) && (_local_25 >= 0)))
                                            {
                                                _local_26 = li32(_local_22 + 1);
                                                si8(_local_23, _local_22);
                                                si32(_local_24, (_local_22 + 1));
                                                _local_23 = (_local_25 + 1);
                                                _local_24 = _local_26;
                                                _local_28 = li32(_local_24);
                                                si32(_local_28, _local_35.hashScratchAddr);
                                                _local_28 = li32(_local_24 + 4);
                                                si32(_local_28, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_23));
                                                _local_28 = 775236557;
                                                _local_29 = -862048943;
                                                _local_30 = 461845907;
                                                _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                                _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                                _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_36 = (_local_28 ^ _local_23);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                _local_36 = (_local_36 * -2048144789);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                _local_36 = (_local_36 * -1028477387);
                                                _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                _local_22 = (_local_35.addr + (_local_27 * 5));
                                                _local_25 = li8(_local_22);
                                                if (((_local_25 < (8)) && (_local_25 >= 0)))
                                                {
                                                    _local_26 = li32(_local_22 + 1);
                                                    si8(_local_23, _local_22);
                                                    si32(_local_24, (_local_22 + 1));
                                                    _local_23 = (_local_25 + 1);
                                                    _local_24 = _local_26;
                                                    _local_28 = li32(_local_24);
                                                    si32(_local_28, _local_35.hashScratchAddr);
                                                    _local_28 = li32(_local_24 + 4);
                                                    si32(_local_28, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_23));
                                                    _local_28 = 775236557;
                                                    _local_29 = -862048943;
                                                    _local_30 = 461845907;
                                                    _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                                    _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                    _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                    _local_28 = ((_local_28 * 5) + -430675100);
                                                    _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                                    _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                    _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                    _local_28 = ((_local_28 * 5) + -430675100);
                                                    _local_36 = (_local_28 ^ _local_23);
                                                    _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                    _local_36 = (_local_36 * -2048144789);
                                                    _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                    _local_36 = (_local_36 * -1028477387);
                                                    _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                    _local_22 = (_local_35.addr + (_local_27 * 5));
                                                };
                                            };
                                        };
                                    };
                                    si8(_local_23, _local_22);
                                    si32(_local_24, (_local_22 + 1));
                                    _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                }
                                else
                                {
                                    if (_local_16 < _local_10)
                                    {
                                        _local_23 = 775236557;
                                        _local_24 = -862048943;
                                        _local_25 = 461845907;
                                        _local_26 = (li32(_local_4) * _local_24);
                                        _local_26 = ((_local_26 << 15) | (_local_26 >>> 17));
                                        _local_23 = (_local_23 ^ (_local_26 * _local_25));
                                        _local_23 = ((_local_23 << 13) | (_local_23 >>> 19));
                                        _local_23 = ((_local_23 * 5) + -430675100);
                                        _local_27 = (_local_23 ^ 0x04);
                                        _local_27 = (_local_27 ^ (_local_27 >>> 16));
                                        _local_27 = (_local_27 * -2048144789);
                                        _local_27 = (_local_27 ^ (_local_27 >>> 13));
                                        _local_27 = (_local_27 * -1028477387);
                                        _local_22 = ((_local_27 ^ (_local_27 >>> 16)) & 0xFFFF);
                                        _local_21 = (_local_35.addr + (_local_22 * 5));
                                        _local_22 = 3;
                                        _local_23 = -1;
                                        _local_25 = li32(_local_21 + 1);
                                        if ((((_local_25 >= (0)) && (li32(_local_4) == li32(_local_25))) && ((_local_4 - _local_25) <= _local_35.windowSize)))
                                        {
                                            _local_26 = (_local_4 + 4);
                                            _local_24 = 4;
                                            _local_25 = (_local_25 + 4);
                                            while (((((_local_26 + 4) <= (_local_5)) && (li32(_local_25) == li32(_local_26))) && ((_local_24 + 4) <= _local_35.maxMatchLength)))
                                            {
                                                _local_24 = (_local_24 + 4);
                                                _local_25 = (_local_25 + 4);
                                                _local_26 = (_local_26 + 4);
                                            };
                                            while ((((_local_26 < (_local_5)) && (li8(_local_25) == li8(_local_26))) && (_local_24 < _local_35.maxMatchLength)))
                                            {
                                                _local_24++;
                                                _local_25++;
                                                _local_26++;
                                            };
                                            _local_22 = _local_24;
                                            _local_23 = _local_25;
                                        };
                                        _local_27 = 5;
                                        _local_28 = 9;
                                        while (_local_27 < _local_28)
                                        {
                                            _local_29 = _local_27++;
                                            _local_36 = li32(_local_4);
                                            si32(_local_36, _local_35.hashScratchAddr);
                                            _local_36 = li32(_local_4 + 4);
                                            si32(_local_36, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_29));
                                            _local_36 = 775236557;
                                            _local_37 = -862048943;
                                            _local_38 = 461845907;
                                            _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                            _local_36 = ((_local_36 * 5) + -430675100);
                                            _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                            _local_36 = ((_local_36 * 5) + -430675100);
                                            _local_40 = (_local_36 ^ _local_29);
                                            _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                            _local_40 = (_local_40 * -2048144789);
                                            _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                            _local_40 = (_local_40 * -1028477387);
                                            _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                            _local_30 = ((_local_35.addr + (_local_31 * 5)) + 1);
                                            _local_25 = li32(_local_30);
                                            if ((((_local_25 >= (0)) && (li32(_local_4) == li32(_local_25))) && ((_local_4 - _local_25) <= _local_35.windowSize)))
                                            {
                                                _local_26 = (_local_4 + 4);
                                                _local_24 = 4;
                                                _local_25 = (_local_25 + 4);
                                                while (((((_local_26 + 4) <= (_local_5)) && (li32(_local_25) == li32(_local_26))) && ((_local_24 + 4) <= _local_35.maxMatchLength)))
                                                {
                                                    _local_24 = (_local_24 + 4);
                                                    _local_25 = (_local_25 + 4);
                                                    _local_26 = (_local_26 + 4);
                                                };
                                                while ((((_local_26 < (_local_5)) && (li8(_local_25) == li8(_local_26))) && (_local_24 < _local_35.maxMatchLength)))
                                                {
                                                    _local_24++;
                                                    _local_25++;
                                                    _local_26++;
                                                };
                                                if (_local_24 > _local_22)
                                                {
                                                    _local_22 = _local_24;
                                                    _local_23 = _local_25;
                                                };
                                            };
                                        };
                                        si32((((_local_4 - (_local_23 - _local_22)) << 16) | _local_22), _local_35.resultAddr);
                                        _local_22 = _local_21;
                                        _local_23 = 4;
                                        _local_24 = _local_4;
                                        _local_25 = li8(_local_22);
                                        if (((_local_25 < (8)) && (_local_25 >= 0)))
                                        {
                                            _local_26 = li32(_local_22 + 1);
                                            si8(_local_23, _local_22);
                                            si32(_local_24, (_local_22 + 1));
                                            _local_23 = (_local_25 + 1);
                                            _local_24 = _local_26;
                                            _local_28 = li32(_local_24);
                                            si32(_local_28, _local_35.hashScratchAddr);
                                            _local_28 = li32(_local_24 + 4);
                                            si32(_local_28, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_23));
                                            _local_28 = 775236557;
                                            _local_29 = -862048943;
                                            _local_30 = 461845907;
                                            _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                            _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                            _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                            _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                            _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                            _local_28 = ((_local_28 * 5) + -430675100);
                                            _local_36 = (_local_28 ^ _local_23);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                            _local_36 = (_local_36 * -2048144789);
                                            _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                            _local_36 = (_local_36 * -1028477387);
                                            _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                            _local_22 = (_local_35.addr + (_local_27 * 5));
                                            _local_25 = li8(_local_22);
                                            if (((_local_25 < (8)) && (_local_25 >= 0)))
                                            {
                                                _local_26 = li32(_local_22 + 1);
                                                si8(_local_23, _local_22);
                                                si32(_local_24, (_local_22 + 1));
                                                _local_23 = (_local_25 + 1);
                                                _local_24 = _local_26;
                                                _local_28 = li32(_local_24);
                                                si32(_local_28, _local_35.hashScratchAddr);
                                                _local_28 = li32(_local_24 + 4);
                                                si32(_local_28, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_23));
                                                _local_28 = 775236557;
                                                _local_29 = -862048943;
                                                _local_30 = 461845907;
                                                _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                                _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                                _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                _local_28 = ((_local_28 * 5) + -430675100);
                                                _local_36 = (_local_28 ^ _local_23);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                _local_36 = (_local_36 * -2048144789);
                                                _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                _local_36 = (_local_36 * -1028477387);
                                                _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                _local_22 = (_local_35.addr + (_local_27 * 5));
                                                _local_25 = li8(_local_22);
                                                if (((_local_25 < (8)) && (_local_25 >= 0)))
                                                {
                                                    _local_26 = li32(_local_22 + 1);
                                                    si8(_local_23, _local_22);
                                                    si32(_local_24, (_local_22 + 1));
                                                    _local_23 = (_local_25 + 1);
                                                    _local_24 = _local_26;
                                                    _local_28 = li32(_local_24);
                                                    si32(_local_28, _local_35.hashScratchAddr);
                                                    _local_28 = li32(_local_24 + 4);
                                                    si32(_local_28, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_23));
                                                    _local_28 = 775236557;
                                                    _local_29 = -862048943;
                                                    _local_30 = 461845907;
                                                    _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                                    _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                    _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                    _local_28 = ((_local_28 * 5) + -430675100);
                                                    _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                                    _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                    _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                    _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                    _local_28 = ((_local_28 * 5) + -430675100);
                                                    _local_36 = (_local_28 ^ _local_23);
                                                    _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                    _local_36 = (_local_36 * -2048144789);
                                                    _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                    _local_36 = (_local_36 * -1028477387);
                                                    _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                    _local_22 = (_local_35.addr + (_local_27 * 5));
                                                    _local_25 = li8(_local_22);
                                                    if (((_local_25 < (8)) && (_local_25 >= 0)))
                                                    {
                                                        _local_26 = li32(_local_22 + 1);
                                                        si8(_local_23, _local_22);
                                                        si32(_local_24, (_local_22 + 1));
                                                        _local_23 = (_local_25 + 1);
                                                        _local_24 = _local_26;
                                                        _local_28 = li32(_local_24);
                                                        si32(_local_28, _local_35.hashScratchAddr);
                                                        _local_28 = li32(_local_24 + 4);
                                                        si32(_local_28, (_local_35.hashScratchAddr + 4));
                                                        si32(0, (_local_35.hashScratchAddr + _local_23));
                                                        _local_28 = 775236557;
                                                        _local_29 = -862048943;
                                                        _local_30 = 461845907;
                                                        _local_31 = (li32(_local_35.hashScratchAddr) * _local_29);
                                                        _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                        _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                        _local_28 = ((_local_28 * 5) + -430675100);
                                                        _local_31 = (li32(_local_35.hashScratchAddr + 4) * _local_29);
                                                        _local_31 = ((_local_31 << 15) | (_local_31 >>> 17));
                                                        _local_28 = (_local_28 ^ (_local_31 * _local_30));
                                                        _local_28 = ((_local_28 << 13) | (_local_28 >>> 19));
                                                        _local_28 = ((_local_28 * 5) + -430675100);
                                                        _local_36 = (_local_28 ^ _local_23);
                                                        _local_36 = (_local_36 ^ (_local_36 >>> 16));
                                                        _local_36 = (_local_36 * -2048144789);
                                                        _local_36 = (_local_36 ^ (_local_36 >>> 13));
                                                        _local_36 = (_local_36 * -1028477387);
                                                        _local_27 = ((_local_36 ^ (_local_36 >>> 16)) & 0xFFFF);
                                                        _local_22 = (_local_35.addr + (_local_27 * 5));
                                                    };
                                                };
                                            };
                                        };
                                        si8(_local_23, _local_22);
                                        si32(_local_24, (_local_22 + 1));
                                        _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                    };
                                };
                                while (_local_16 < _local_6)
                                {
                                    _local_24 = 775236557;
                                    _local_25 = -862048943;
                                    _local_26 = 461845907;
                                    _local_27 = (li32(_local_16 + 1) * _local_25);
                                    _local_27 = ((_local_27 << 15) | (_local_27 >>> 17));
                                    _local_24 = (_local_24 ^ (_local_27 * _local_26));
                                    _local_24 = ((_local_24 << 13) | (_local_24 >>> 19));
                                    _local_24 = ((_local_24 * 5) + -430675100);
                                    _local_28 = (_local_24 ^ 0x04);
                                    _local_28 = (_local_28 ^ (_local_28 >>> 16));
                                    _local_28 = (_local_28 * -2048144789);
                                    _local_28 = (_local_28 ^ (_local_28 >>> 13));
                                    _local_28 = (_local_28 * -1028477387);
                                    _local_23 = ((_local_28 ^ (_local_28 >>> 16)) & 0xFFFF);
                                    _local_22 = (_local_35.addr + (_local_23 * 5));
                                    if (li16(_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07)) < (_local_35.avgMatchLength + 4))
                                    {
                                        _local_23 = (_local_16 + 1);
                                        _local_24 = 3;
                                        _local_25 = -1;
                                        _local_27 = li32(_local_22 + 1);
                                        if ((((_local_27 >= (0)) && (li32(_local_23) == li32(_local_27))) && ((_local_23 - _local_27) <= _local_35.windowSize)))
                                        {
                                            _local_28 = (_local_23 + 4);
                                            _local_26 = 4;
                                            _local_27 = (_local_27 + 4);
                                            while (((li32(_local_27) == (li32(_local_28))) && ((_local_26 + 4) <= _local_35.maxMatchLength)))
                                            {
                                                _local_26 = (_local_26 + 4);
                                                _local_27 = (_local_27 + 4);
                                                _local_28 = (_local_28 + 4);
                                            };
                                            while (((li8(_local_27) == (li8(_local_28))) && (_local_26 < _local_35.maxMatchLength)))
                                            {
                                                _local_26++;
                                                _local_27++;
                                                _local_28++;
                                            };
                                            _local_24 = _local_26;
                                            _local_25 = _local_27;
                                        };
                                        _local_29 = 5;
                                        _local_30 = 9;
                                        while (_local_29 < _local_30)
                                        {
                                            _local_31 = _local_29++;
                                            _local_38 = li32(_local_23);
                                            si32(_local_38, _local_35.hashScratchAddr);
                                            _local_38 = li32(_local_23 + 4);
                                            si32(_local_38, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_31));
                                            _local_38 = 775236557;
                                            _local_39 = -862048943;
                                            _local_40 = 461845907;
                                            _local_41 = (li32(_local_35.hashScratchAddr) * _local_39);
                                            _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                            _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                            _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                            _local_38 = ((_local_38 * 5) + -430675100);
                                            _local_41 = (li32(_local_35.hashScratchAddr + 4) * _local_39);
                                            _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                            _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                            _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                            _local_38 = ((_local_38 * 5) + -430675100);
                                            _local_42 = (_local_38 ^ _local_31);
                                            _local_42 = (_local_42 ^ (_local_42 >>> 16));
                                            _local_42 = (_local_42 * -2048144789);
                                            _local_42 = (_local_42 ^ (_local_42 >>> 13));
                                            _local_42 = (_local_42 * -1028477387);
                                            _local_37 = ((_local_42 ^ (_local_42 >>> 16)) & 0xFFFF);
                                            _local_36 = ((_local_35.addr + (_local_37 * 5)) + 1);
                                            _local_27 = li32(_local_36);
                                            if (((((_local_27 >= (0)) && (li32((_local_27 + _local_24) - 3) == li32((_local_23 + _local_24) - 3))) && (li32(_local_23) == li32(_local_27))) && ((_local_23 - _local_27) <= _local_35.windowSize)))
                                            {
                                                _local_28 = (_local_23 + 4);
                                                _local_26 = 4;
                                                _local_27 = (_local_27 + 4);
                                                while (((li32(_local_27) == (li32(_local_28))) && ((_local_26 + 4) <= _local_35.maxMatchLength)))
                                                {
                                                    _local_26 = (_local_26 + 4);
                                                    _local_27 = (_local_27 + 4);
                                                    _local_28 = (_local_28 + 4);
                                                };
                                                while (((li8(_local_27) == (li8(_local_28))) && (_local_26 < _local_35.maxMatchLength)))
                                                {
                                                    _local_26++;
                                                    _local_27++;
                                                    _local_28++;
                                                };
                                                if (_local_26 > _local_24)
                                                {
                                                    _local_24 = _local_26;
                                                    _local_25 = _local_27;
                                                };
                                            };
                                        };
                                        si32((((_local_23 - (_local_25 - _local_24)) << 16) | _local_24), _local_35.resultAddr);
                                    }
                                    else
                                    {
                                        si32(0, _local_35.resultAddr);
                                    };
                                    _local_23 = _local_22;
                                    _local_24 = 4;
                                    _local_25 = (_local_16 + 1);
                                    _local_26 = li8(_local_23);
                                    if (((_local_26 < (8)) && (_local_26 >= 0)))
                                    {
                                        _local_27 = li32(_local_23 + 1);
                                        si8(_local_24, _local_23);
                                        si32(_local_25, (_local_23 + 1));
                                        _local_24 = (_local_26 + 1);
                                        _local_25 = _local_27;
                                        _local_29 = li32(_local_25);
                                        si32(_local_29, _local_35.hashScratchAddr);
                                        _local_29 = li32(_local_25 + 4);
                                        si32(_local_29, (_local_35.hashScratchAddr + 4));
                                        si32(0, (_local_35.hashScratchAddr + _local_24));
                                        _local_29 = 775236557;
                                        _local_30 = -862048943;
                                        _local_31 = 461845907;
                                        _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                        _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                        _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_37 = (_local_29 ^ _local_24);
                                        _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                        _local_37 = (_local_37 * -2048144789);
                                        _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                        _local_37 = (_local_37 * -1028477387);
                                        _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                        _local_23 = (_local_35.addr + (_local_28 * 5));
                                        _local_26 = li8(_local_23);
                                        if (((_local_26 < (8)) && (_local_26 >= 0)))
                                        {
                                            _local_27 = li32(_local_23 + 1);
                                            si8(_local_24, _local_23);
                                            si32(_local_25, (_local_23 + 1));
                                            _local_24 = (_local_26 + 1);
                                            _local_25 = _local_27;
                                            _local_29 = li32(_local_25);
                                            si32(_local_29, _local_35.hashScratchAddr);
                                            _local_29 = li32(_local_25 + 4);
                                            si32(_local_29, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_24));
                                            _local_29 = 775236557;
                                            _local_30 = -862048943;
                                            _local_31 = 461845907;
                                            _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                            _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                            _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_37 = (_local_29 ^ _local_24);
                                            _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                            _local_37 = (_local_37 * -2048144789);
                                            _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                            _local_37 = (_local_37 * -1028477387);
                                            _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                            _local_23 = (_local_35.addr + (_local_28 * 5));
                                            _local_26 = li8(_local_23);
                                            if (((_local_26 < (8)) && (_local_26 >= 0)))
                                            {
                                                _local_27 = li32(_local_23 + 1);
                                                si8(_local_24, _local_23);
                                                si32(_local_25, (_local_23 + 1));
                                                _local_24 = (_local_26 + 1);
                                                _local_25 = _local_27;
                                                _local_29 = li32(_local_25);
                                                si32(_local_29, _local_35.hashScratchAddr);
                                                _local_29 = li32(_local_25 + 4);
                                                si32(_local_29, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_24));
                                                _local_29 = 775236557;
                                                _local_30 = -862048943;
                                                _local_31 = 461845907;
                                                _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                                _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                _local_29 = ((_local_29 * 5) + -430675100);
                                                _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                                _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                _local_29 = ((_local_29 * 5) + -430675100);
                                                _local_37 = (_local_29 ^ _local_24);
                                                _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                                _local_37 = (_local_37 * -2048144789);
                                                _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                                _local_37 = (_local_37 * -1028477387);
                                                _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                                _local_23 = (_local_35.addr + (_local_28 * 5));
                                                _local_26 = li8(_local_23);
                                                if (((_local_26 < (8)) && (_local_26 >= 0)))
                                                {
                                                    _local_27 = li32(_local_23 + 1);
                                                    si8(_local_24, _local_23);
                                                    si32(_local_25, (_local_23 + 1));
                                                    _local_24 = (_local_26 + 1);
                                                    _local_25 = _local_27;
                                                    _local_29 = li32(_local_25);
                                                    si32(_local_29, _local_35.hashScratchAddr);
                                                    _local_29 = li32(_local_25 + 4);
                                                    si32(_local_29, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_24));
                                                    _local_29 = 775236557;
                                                    _local_30 = -862048943;
                                                    _local_31 = 461845907;
                                                    _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                                    _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                    _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                    _local_29 = ((_local_29 * 5) + -430675100);
                                                    _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                                    _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                    _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                    _local_29 = ((_local_29 * 5) + -430675100);
                                                    _local_37 = (_local_29 ^ _local_24);
                                                    _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                                    _local_37 = (_local_37 * -2048144789);
                                                    _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                                    _local_37 = (_local_37 * -1028477387);
                                                    _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                                    _local_23 = (_local_35.addr + (_local_28 * 5));
                                                };
                                            };
                                        };
                                    };
                                    si8(_local_24, _local_23);
                                    si32(_local_25, (_local_23 + 1));
                                    _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                    if (li16(_local_35.resultAddr) >= 4)
                                    {
                                        _local_21 = li16(_local_35.resultAddr);
                                        if (li16(_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07)) > _local_21)
                                        {
                                            si32(0, _local_35.resultAddr);
                                        }
                                        else
                                        {
                                            _local_35.avgMatchLength = ((((_local_35.avgMatchLength << 1) + (_local_35.avgMatchLength << 2)) + (_local_21 << 1)) >>> 3);
                                            if (_local_21 < (_local_35.avgMatchLength + 4))
                                            {
                                                _local_23 = ((_local_16 + 1) + 1);
                                                _local_24 = (_local_16 + _local_21);
                                                while (_local_23 < _local_24)
                                                {
                                                    _local_25 = _local_23++;
                                                    _local_26 = 4;
                                                    _local_27 = _local_25;
                                                    _local_36 = 775236557;
                                                    _local_37 = -862048943;
                                                    _local_38 = 461845907;
                                                    _local_39 = (li32(_local_25) * _local_37);
                                                    _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                    _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                    _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                    _local_36 = ((_local_36 * 5) + -430675100);
                                                    _local_40 = (_local_36 ^ 0x04);
                                                    _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                    _local_40 = (_local_40 * -2048144789);
                                                    _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                    _local_40 = (_local_40 * -1028477387);
                                                    _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                    _local_30 = (_local_35.addr + (_local_31 * 5));
                                                    _local_28 = li8(_local_30);
                                                    if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                    {
                                                        _local_29 = li32(_local_30 + 1);
                                                        si8(_local_26, _local_30);
                                                        si32(_local_27, (_local_30 + 1));
                                                        _local_26 = (_local_28 + 1);
                                                        _local_27 = _local_29;
                                                        _local_36 = li32(_local_27);
                                                        si32(_local_36, _local_35.hashScratchAddr);
                                                        _local_36 = li32(_local_27 + 4);
                                                        si32(_local_36, (_local_35.hashScratchAddr + 4));
                                                        si32(0, (_local_35.hashScratchAddr + _local_26));
                                                        _local_36 = 775236557;
                                                        _local_37 = -862048943;
                                                        _local_38 = 461845907;
                                                        _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                                        _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                        _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                        _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                        _local_36 = ((_local_36 * 5) + -430675100);
                                                        _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                                        _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                        _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                        _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                        _local_36 = ((_local_36 * 5) + -430675100);
                                                        _local_40 = (_local_36 ^ _local_26);
                                                        _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                        _local_40 = (_local_40 * -2048144789);
                                                        _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                        _local_40 = (_local_40 * -1028477387);
                                                        _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                        _local_30 = (_local_35.addr + (_local_31 * 5));
                                                        _local_28 = li8(_local_30);
                                                        if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                        {
                                                            _local_29 = li32(_local_30 + 1);
                                                            si8(_local_26, _local_30);
                                                            si32(_local_27, (_local_30 + 1));
                                                            _local_26 = (_local_28 + 1);
                                                            _local_27 = _local_29;
                                                            _local_36 = li32(_local_27);
                                                            si32(_local_36, _local_35.hashScratchAddr);
                                                            _local_36 = li32(_local_27 + 4);
                                                            si32(_local_36, (_local_35.hashScratchAddr + 4));
                                                            si32(0, (_local_35.hashScratchAddr + _local_26));
                                                            _local_36 = 775236557;
                                                            _local_37 = -862048943;
                                                            _local_38 = 461845907;
                                                            _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                            _local_36 = ((_local_36 * 5) + -430675100);
                                                            _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                            _local_36 = ((_local_36 * 5) + -430675100);
                                                            _local_40 = (_local_36 ^ _local_26);
                                                            _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                            _local_40 = (_local_40 * -2048144789);
                                                            _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                            _local_40 = (_local_40 * -1028477387);
                                                            _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                            _local_30 = (_local_35.addr + (_local_31 * 5));
                                                        };
                                                    };
                                                    si8(_local_26, _local_30);
                                                    si32(_local_27, (_local_30 + 1));
                                                };
                                            };
                                            _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                            _local_23 = (_local_16 + _local_21);
                                            _local_26 = 775236557;
                                            _local_27 = -862048943;
                                            _local_28 = 461845907;
                                            _local_29 = (li32(_local_23) * _local_27);
                                            _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                            _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                            _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                            _local_26 = ((_local_26 * 5) + -430675100);
                                            _local_30 = (_local_26 ^ 0x04);
                                            _local_30 = (_local_30 ^ (_local_30 >>> 16));
                                            _local_30 = (_local_30 * -2048144789);
                                            _local_30 = (_local_30 ^ (_local_30 >>> 13));
                                            _local_30 = (_local_30 * -1028477387);
                                            _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                                            _local_24 = (_local_35.addr + (_local_25 * 5));
                                            _local_25 = 3;
                                            _local_26 = -1;
                                            _local_28 = li32(_local_24 + 1);
                                            if ((((_local_28 >= (0)) && (li32(_local_23) == li32(_local_28))) && ((_local_23 - _local_28) <= _local_35.windowSize)))
                                            {
                                                _local_29 = (_local_23 + 4);
                                                _local_27 = 4;
                                                _local_28 = (_local_28 + 4);
                                                while (((li32(_local_28) == (li32(_local_29))) && ((_local_27 + 4) <= _local_35.maxMatchLength)))
                                                {
                                                    _local_27 = (_local_27 + 4);
                                                    _local_28 = (_local_28 + 4);
                                                    _local_29 = (_local_29 + 4);
                                                };
                                                while (((li8(_local_28) == (li8(_local_29))) && (_local_27 < _local_35.maxMatchLength)))
                                                {
                                                    _local_27++;
                                                    _local_28++;
                                                    _local_29++;
                                                };
                                                _local_25 = _local_27;
                                                _local_26 = _local_28;
                                            };
                                            _local_30 = 5;
                                            _local_31 = 9;
                                            while (_local_30 < _local_31)
                                            {
                                                _local_36 = _local_30++;
                                                _local_39 = li32(_local_23);
                                                si32(_local_39, _local_35.hashScratchAddr);
                                                _local_39 = li32(_local_23 + 4);
                                                si32(_local_39, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_36));
                                                _local_39 = 775236557;
                                                _local_40 = -862048943;
                                                _local_41 = 461845907;
                                                _local_42 = (li32(_local_35.hashScratchAddr) * _local_40);
                                                _local_42 = ((_local_42 << 15) | (_local_42 >>> 17));
                                                _local_39 = (_local_39 ^ (_local_42 * _local_41));
                                                _local_39 = ((_local_39 << 13) | (_local_39 >>> 19));
                                                _local_39 = ((_local_39 * 5) + -430675100);
                                                _local_42 = (li32(_local_35.hashScratchAddr + 4) * _local_40);
                                                _local_42 = ((_local_42 << 15) | (_local_42 >>> 17));
                                                _local_39 = (_local_39 ^ (_local_42 * _local_41));
                                                _local_39 = ((_local_39 << 13) | (_local_39 >>> 19));
                                                _local_39 = ((_local_39 * 5) + -430675100);
                                                _local_43 = (_local_39 ^ _local_36);
                                                _local_43 = (_local_43 ^ (_local_43 >>> 16));
                                                _local_43 = (_local_43 * -2048144789);
                                                _local_43 = (_local_43 ^ (_local_43 >>> 13));
                                                _local_43 = (_local_43 * -1028477387);
                                                _local_38 = ((_local_43 ^ (_local_43 >>> 16)) & 0xFFFF);
                                                _local_37 = ((_local_35.addr + (_local_38 * 5)) + 1);
                                                _local_28 = li32(_local_37);
                                                if (((((_local_28 >= (0)) && (li32((_local_28 + _local_25) - 3) == li32((_local_23 + _local_25) - 3))) && (li32(_local_23) == li32(_local_28))) && ((_local_23 - _local_28) <= _local_35.windowSize)))
                                                {
                                                    _local_29 = (_local_23 + 4);
                                                    _local_27 = 4;
                                                    _local_28 = (_local_28 + 4);
                                                    while (((li32(_local_28) == (li32(_local_29))) && ((_local_27 + 4) <= _local_35.maxMatchLength)))
                                                    {
                                                        _local_27 = (_local_27 + 4);
                                                        _local_28 = (_local_28 + 4);
                                                        _local_29 = (_local_29 + 4);
                                                    };
                                                    while (((li8(_local_28) == (li8(_local_29))) && (_local_27 < _local_35.maxMatchLength)))
                                                    {
                                                        _local_27++;
                                                        _local_28++;
                                                        _local_29++;
                                                    };
                                                    if (_local_27 > _local_25)
                                                    {
                                                        _local_25 = _local_27;
                                                        _local_26 = _local_28;
                                                    };
                                                };
                                            };
                                            si32((((_local_23 - (_local_26 - _local_25)) << 16) | _local_25), _local_35.resultAddr);
                                            _local_25 = _local_24;
                                            _local_26 = 4;
                                            _local_27 = _local_23;
                                            _local_28 = li8(_local_25);
                                            if (((_local_28 < (8)) && (_local_28 >= 0)))
                                            {
                                                _local_29 = li32(_local_25 + 1);
                                                si8(_local_26, _local_25);
                                                si32(_local_27, (_local_25 + 1));
                                                _local_26 = (_local_28 + 1);
                                                _local_27 = _local_29;
                                                _local_31 = li32(_local_27);
                                                si32(_local_31, _local_35.hashScratchAddr);
                                                _local_31 = li32(_local_27 + 4);
                                                si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_26));
                                                _local_31 = 775236557;
                                                _local_36 = -862048943;
                                                _local_37 = 461845907;
                                                _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                _local_31 = ((_local_31 * 5) + -430675100);
                                                _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                _local_31 = ((_local_31 * 5) + -430675100);
                                                _local_39 = (_local_31 ^ _local_26);
                                                _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                _local_39 = (_local_39 * -2048144789);
                                                _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                _local_39 = (_local_39 * -1028477387);
                                                _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                _local_25 = (_local_35.addr + (_local_30 * 5));
                                                _local_28 = li8(_local_25);
                                                if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                {
                                                    _local_29 = li32(_local_25 + 1);
                                                    si8(_local_26, _local_25);
                                                    si32(_local_27, (_local_25 + 1));
                                                    _local_26 = (_local_28 + 1);
                                                    _local_27 = _local_29;
                                                    _local_31 = li32(_local_27);
                                                    si32(_local_31, _local_35.hashScratchAddr);
                                                    _local_31 = li32(_local_27 + 4);
                                                    si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_26));
                                                    _local_31 = 775236557;
                                                    _local_36 = -862048943;
                                                    _local_37 = 461845907;
                                                    _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                    _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                    _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                    _local_31 = ((_local_31 * 5) + -430675100);
                                                    _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                    _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                    _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                    _local_31 = ((_local_31 * 5) + -430675100);
                                                    _local_39 = (_local_31 ^ _local_26);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                    _local_39 = (_local_39 * -2048144789);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                    _local_39 = (_local_39 * -1028477387);
                                                    _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                    _local_25 = (_local_35.addr + (_local_30 * 5));
                                                    _local_28 = li8(_local_25);
                                                    if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                    {
                                                        _local_29 = li32(_local_25 + 1);
                                                        si8(_local_26, _local_25);
                                                        si32(_local_27, (_local_25 + 1));
                                                        _local_26 = (_local_28 + 1);
                                                        _local_27 = _local_29;
                                                        _local_31 = li32(_local_27);
                                                        si32(_local_31, _local_35.hashScratchAddr);
                                                        _local_31 = li32(_local_27 + 4);
                                                        si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                        si32(0, (_local_35.hashScratchAddr + _local_26));
                                                        _local_31 = 775236557;
                                                        _local_36 = -862048943;
                                                        _local_37 = 461845907;
                                                        _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                        _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                        _local_31 = ((_local_31 * 5) + -430675100);
                                                        _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                        _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                        _local_31 = ((_local_31 * 5) + -430675100);
                                                        _local_39 = (_local_31 ^ _local_26);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                        _local_39 = (_local_39 * -2048144789);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                        _local_39 = (_local_39 * -1028477387);
                                                        _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                        _local_25 = (_local_35.addr + (_local_30 * 5));
                                                        _local_28 = li8(_local_25);
                                                        if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                        {
                                                            _local_29 = li32(_local_25 + 1);
                                                            si8(_local_26, _local_25);
                                                            si32(_local_27, (_local_25 + 1));
                                                            _local_26 = (_local_28 + 1);
                                                            _local_27 = _local_29;
                                                            _local_31 = li32(_local_27);
                                                            si32(_local_31, _local_35.hashScratchAddr);
                                                            _local_31 = li32(_local_27 + 4);
                                                            si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                            si32(0, (_local_35.hashScratchAddr + _local_26));
                                                            _local_31 = 775236557;
                                                            _local_36 = -862048943;
                                                            _local_37 = 461845907;
                                                            _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                            _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                            _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                            _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                            _local_31 = ((_local_31 * 5) + -430675100);
                                                            _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                            _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                            _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                            _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                            _local_31 = ((_local_31 * 5) + -430675100);
                                                            _local_39 = (_local_31 ^ _local_26);
                                                            _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                            _local_39 = (_local_39 * -2048144789);
                                                            _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                            _local_39 = (_local_39 * -1028477387);
                                                            _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                            _local_25 = (_local_35.addr + (_local_30 * 5));
                                                        };
                                                    };
                                                };
                                            };
                                            si8(_local_26, _local_25);
                                            si32(_local_27, (_local_25 + 1));
                                            _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                        };
                                    };
                                    if (li16(_local_35.resultAddr) >= 4)
                                    {
                                        _local_14 = li16(_local_35.resultAddr);
                                        _local_21 = li16(((scratchAddr + 2492) + (_local_14 << 2)) + 2);
                                        _local_22 = 0;
                                        _local_23 = ((scratchAddr + _local_22) + (_local_21 << 2));
                                        _local_24 = (li32(_local_23) + 1);
                                        si32(_local_24, _local_23);
                                        _local_21 = li16(_local_35.resultAddr + 2);
                                        _local_15 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                        _local_21 = ((scratchAddr + 1144) + ((_local_15 >>> 24) << 2));
                                        _local_22 = (li32(_local_21) + 1);
                                        si32(_local_22, _local_21);
                                        _local_21 = (li32(_local_35.resultAddr) | 0x0200);
                                        si32(_local_21, _local_20);
                                        _local_20 = (_local_20 + 4);
                                        _local_16 = (_local_16 + _local_14);
                                    }
                                    else
                                    {
                                        _local_13 = li8(_local_16);
                                        si16(_local_13, _local_20);
                                        _local_21 = 0;
                                        _local_22 = ((scratchAddr + _local_21) + (_local_13 << 2));
                                        _local_23 = (li32(_local_22) + 1);
                                        si32(_local_23, _local_22);
                                        _local_20 = (_local_20 + 2);
                                        _local_16++;
                                    };
                                };
                                while (_local_16 < _local_10)
                                {
                                    _local_24 = 775236557;
                                    _local_25 = -862048943;
                                    _local_26 = 461845907;
                                    _local_27 = (li32(_local_16 + 1) * _local_25);
                                    _local_27 = ((_local_27 << 15) | (_local_27 >>> 17));
                                    _local_24 = (_local_24 ^ (_local_27 * _local_26));
                                    _local_24 = ((_local_24 << 13) | (_local_24 >>> 19));
                                    _local_24 = ((_local_24 * 5) + -430675100);
                                    _local_28 = (_local_24 ^ 0x04);
                                    _local_28 = (_local_28 ^ (_local_28 >>> 16));
                                    _local_28 = (_local_28 * -2048144789);
                                    _local_28 = (_local_28 ^ (_local_28 >>> 13));
                                    _local_28 = (_local_28 * -1028477387);
                                    _local_23 = ((_local_28 ^ (_local_28 >>> 16)) & 0xFFFF);
                                    _local_22 = (_local_35.addr + (_local_23 * 5));
                                    if (li16(_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07)) < (_local_35.avgMatchLength + 4))
                                    {
                                        _local_23 = (_local_16 + 1);
                                        _local_24 = 3;
                                        _local_25 = -1;
                                        _local_27 = li32(_local_22 + 1);
                                        if ((((_local_27 >= (0)) && (li32(_local_23) == li32(_local_27))) && ((_local_23 - _local_27) <= _local_35.windowSize)))
                                        {
                                            _local_28 = (_local_23 + 4);
                                            _local_26 = 4;
                                            _local_27 = (_local_27 + 4);
                                            while (((((_local_28 + 4) <= (_local_5)) && (li32(_local_27) == li32(_local_28))) && ((_local_26 + 4) <= _local_35.maxMatchLength)))
                                            {
                                                _local_26 = (_local_26 + 4);
                                                _local_27 = (_local_27 + 4);
                                                _local_28 = (_local_28 + 4);
                                            };
                                            while ((((_local_28 < (_local_5)) && (li8(_local_27) == li8(_local_28))) && (_local_26 < _local_35.maxMatchLength)))
                                            {
                                                _local_26++;
                                                _local_27++;
                                                _local_28++;
                                            };
                                            _local_24 = _local_26;
                                            _local_25 = _local_27;
                                        };
                                        _local_29 = 5;
                                        _local_30 = 9;
                                        while (_local_29 < _local_30)
                                        {
                                            _local_31 = _local_29++;
                                            _local_38 = li32(_local_23);
                                            si32(_local_38, _local_35.hashScratchAddr);
                                            _local_38 = li32(_local_23 + 4);
                                            si32(_local_38, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_31));
                                            _local_38 = 775236557;
                                            _local_39 = -862048943;
                                            _local_40 = 461845907;
                                            _local_41 = (li32(_local_35.hashScratchAddr) * _local_39);
                                            _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                            _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                            _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                            _local_38 = ((_local_38 * 5) + -430675100);
                                            _local_41 = (li32(_local_35.hashScratchAddr + 4) * _local_39);
                                            _local_41 = ((_local_41 << 15) | (_local_41 >>> 17));
                                            _local_38 = (_local_38 ^ (_local_41 * _local_40));
                                            _local_38 = ((_local_38 << 13) | (_local_38 >>> 19));
                                            _local_38 = ((_local_38 * 5) + -430675100);
                                            _local_42 = (_local_38 ^ _local_31);
                                            _local_42 = (_local_42 ^ (_local_42 >>> 16));
                                            _local_42 = (_local_42 * -2048144789);
                                            _local_42 = (_local_42 ^ (_local_42 >>> 13));
                                            _local_42 = (_local_42 * -1028477387);
                                            _local_37 = ((_local_42 ^ (_local_42 >>> 16)) & 0xFFFF);
                                            _local_36 = ((_local_35.addr + (_local_37 * 5)) + 1);
                                            _local_27 = li32(_local_36);
                                            if ((((_local_27 >= (0)) && (li32(_local_23) == li32(_local_27))) && ((_local_23 - _local_27) <= _local_35.windowSize)))
                                            {
                                                _local_28 = (_local_23 + 4);
                                                _local_26 = 4;
                                                _local_27 = (_local_27 + 4);
                                                while (((((_local_28 + 4) <= (_local_5)) && (li32(_local_27) == li32(_local_28))) && ((_local_26 + 4) <= _local_35.maxMatchLength)))
                                                {
                                                    _local_26 = (_local_26 + 4);
                                                    _local_27 = (_local_27 + 4);
                                                    _local_28 = (_local_28 + 4);
                                                };
                                                while ((((_local_28 < (_local_5)) && (li8(_local_27) == li8(_local_28))) && (_local_26 < _local_35.maxMatchLength)))
                                                {
                                                    _local_26++;
                                                    _local_27++;
                                                    _local_28++;
                                                };
                                                if (_local_26 > _local_24)
                                                {
                                                    _local_24 = _local_26;
                                                    _local_25 = _local_27;
                                                };
                                            };
                                        };
                                        si32((((_local_23 - (_local_25 - _local_24)) << 16) | _local_24), _local_35.resultAddr);
                                    }
                                    else
                                    {
                                        si32(0, _local_35.resultAddr);
                                    };
                                    _local_23 = _local_22;
                                    _local_24 = 4;
                                    _local_25 = (_local_16 + 1);
                                    _local_26 = li8(_local_23);
                                    if (((_local_26 < (8)) && (_local_26 >= 0)))
                                    {
                                        _local_27 = li32(_local_23 + 1);
                                        si8(_local_24, _local_23);
                                        si32(_local_25, (_local_23 + 1));
                                        _local_24 = (_local_26 + 1);
                                        _local_25 = _local_27;
                                        _local_29 = li32(_local_25);
                                        si32(_local_29, _local_35.hashScratchAddr);
                                        _local_29 = li32(_local_25 + 4);
                                        si32(_local_29, (_local_35.hashScratchAddr + 4));
                                        si32(0, (_local_35.hashScratchAddr + _local_24));
                                        _local_29 = 775236557;
                                        _local_30 = -862048943;
                                        _local_31 = 461845907;
                                        _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                        _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                        _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                        _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                        _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                        _local_29 = ((_local_29 * 5) + -430675100);
                                        _local_37 = (_local_29 ^ _local_24);
                                        _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                        _local_37 = (_local_37 * -2048144789);
                                        _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                        _local_37 = (_local_37 * -1028477387);
                                        _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                        _local_23 = (_local_35.addr + (_local_28 * 5));
                                        _local_26 = li8(_local_23);
                                        if (((_local_26 < (8)) && (_local_26 >= 0)))
                                        {
                                            _local_27 = li32(_local_23 + 1);
                                            si8(_local_24, _local_23);
                                            si32(_local_25, (_local_23 + 1));
                                            _local_24 = (_local_26 + 1);
                                            _local_25 = _local_27;
                                            _local_29 = li32(_local_25);
                                            si32(_local_29, _local_35.hashScratchAddr);
                                            _local_29 = li32(_local_25 + 4);
                                            si32(_local_29, (_local_35.hashScratchAddr + 4));
                                            si32(0, (_local_35.hashScratchAddr + _local_24));
                                            _local_29 = 775236557;
                                            _local_30 = -862048943;
                                            _local_31 = 461845907;
                                            _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                            _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                            _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                            _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                            _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                            _local_29 = ((_local_29 * 5) + -430675100);
                                            _local_37 = (_local_29 ^ _local_24);
                                            _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                            _local_37 = (_local_37 * -2048144789);
                                            _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                            _local_37 = (_local_37 * -1028477387);
                                            _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                            _local_23 = (_local_35.addr + (_local_28 * 5));
                                            _local_26 = li8(_local_23);
                                            if (((_local_26 < (8)) && (_local_26 >= 0)))
                                            {
                                                _local_27 = li32(_local_23 + 1);
                                                si8(_local_24, _local_23);
                                                si32(_local_25, (_local_23 + 1));
                                                _local_24 = (_local_26 + 1);
                                                _local_25 = _local_27;
                                                _local_29 = li32(_local_25);
                                                si32(_local_29, _local_35.hashScratchAddr);
                                                _local_29 = li32(_local_25 + 4);
                                                si32(_local_29, (_local_35.hashScratchAddr + 4));
                                                si32(0, (_local_35.hashScratchAddr + _local_24));
                                                _local_29 = 775236557;
                                                _local_30 = -862048943;
                                                _local_31 = 461845907;
                                                _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                                _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                _local_29 = ((_local_29 * 5) + -430675100);
                                                _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                                _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                _local_29 = ((_local_29 * 5) + -430675100);
                                                _local_37 = (_local_29 ^ _local_24);
                                                _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                                _local_37 = (_local_37 * -2048144789);
                                                _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                                _local_37 = (_local_37 * -1028477387);
                                                _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                                _local_23 = (_local_35.addr + (_local_28 * 5));
                                                _local_26 = li8(_local_23);
                                                if (((_local_26 < (8)) && (_local_26 >= 0)))
                                                {
                                                    _local_27 = li32(_local_23 + 1);
                                                    si8(_local_24, _local_23);
                                                    si32(_local_25, (_local_23 + 1));
                                                    _local_24 = (_local_26 + 1);
                                                    _local_25 = _local_27;
                                                    _local_29 = li32(_local_25);
                                                    si32(_local_29, _local_35.hashScratchAddr);
                                                    _local_29 = li32(_local_25 + 4);
                                                    si32(_local_29, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_24));
                                                    _local_29 = 775236557;
                                                    _local_30 = -862048943;
                                                    _local_31 = 461845907;
                                                    _local_36 = (li32(_local_35.hashScratchAddr) * _local_30);
                                                    _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                    _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                    _local_29 = ((_local_29 * 5) + -430675100);
                                                    _local_36 = (li32(_local_35.hashScratchAddr + 4) * _local_30);
                                                    _local_36 = ((_local_36 << 15) | (_local_36 >>> 17));
                                                    _local_29 = (_local_29 ^ (_local_36 * _local_31));
                                                    _local_29 = ((_local_29 << 13) | (_local_29 >>> 19));
                                                    _local_29 = ((_local_29 * 5) + -430675100);
                                                    _local_37 = (_local_29 ^ _local_24);
                                                    _local_37 = (_local_37 ^ (_local_37 >>> 16));
                                                    _local_37 = (_local_37 * -2048144789);
                                                    _local_37 = (_local_37 ^ (_local_37 >>> 13));
                                                    _local_37 = (_local_37 * -1028477387);
                                                    _local_28 = ((_local_37 ^ (_local_37 >>> 16)) & 0xFFFF);
                                                    _local_23 = (_local_35.addr + (_local_28 * 5));
                                                };
                                            };
                                        };
                                    };
                                    si8(_local_24, _local_23);
                                    si32(_local_25, (_local_23 + 1));
                                    _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                    if (li16(_local_35.resultAddr) >= 4)
                                    {
                                        _local_21 = li16(_local_35.resultAddr);
                                        if (li16(_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07)) > _local_21)
                                        {
                                            si32(0, _local_35.resultAddr);
                                        }
                                        else
                                        {
                                            if (((_local_16 + _local_21) + 9) < _local_5)
                                            {
                                                if (_local_21 < (_local_35.avgMatchLength + 4))
                                                {
                                                    _local_23 = ((_local_16 + 1) + 1);
                                                    _local_24 = (_local_16 + _local_21);
                                                    while (_local_23 < _local_24)
                                                    {
                                                        _local_25 = _local_23++;
                                                        _local_26 = 4;
                                                        _local_27 = _local_25;
                                                        _local_36 = 775236557;
                                                        _local_37 = -862048943;
                                                        _local_38 = 461845907;
                                                        _local_39 = (li32(_local_25) * _local_37);
                                                        _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                        _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                        _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                        _local_36 = ((_local_36 * 5) + -430675100);
                                                        _local_40 = (_local_36 ^ 0x04);
                                                        _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                        _local_40 = (_local_40 * -2048144789);
                                                        _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                        _local_40 = (_local_40 * -1028477387);
                                                        _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                        _local_30 = (_local_35.addr + (_local_31 * 5));
                                                        _local_28 = li8(_local_30);
                                                        if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                        {
                                                            _local_29 = li32(_local_30 + 1);
                                                            si8(_local_26, _local_30);
                                                            si32(_local_27, (_local_30 + 1));
                                                            _local_26 = (_local_28 + 1);
                                                            _local_27 = _local_29;
                                                            _local_36 = li32(_local_27);
                                                            si32(_local_36, _local_35.hashScratchAddr);
                                                            _local_36 = li32(_local_27 + 4);
                                                            si32(_local_36, (_local_35.hashScratchAddr + 4));
                                                            si32(0, (_local_35.hashScratchAddr + _local_26));
                                                            _local_36 = 775236557;
                                                            _local_37 = -862048943;
                                                            _local_38 = 461845907;
                                                            _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                            _local_36 = ((_local_36 * 5) + -430675100);
                                                            _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                                            _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                            _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                            _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                            _local_36 = ((_local_36 * 5) + -430675100);
                                                            _local_40 = (_local_36 ^ _local_26);
                                                            _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                            _local_40 = (_local_40 * -2048144789);
                                                            _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                            _local_40 = (_local_40 * -1028477387);
                                                            _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                            _local_30 = (_local_35.addr + (_local_31 * 5));
                                                            _local_28 = li8(_local_30);
                                                            if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                            {
                                                                _local_29 = li32(_local_30 + 1);
                                                                si8(_local_26, _local_30);
                                                                si32(_local_27, (_local_30 + 1));
                                                                _local_26 = (_local_28 + 1);
                                                                _local_27 = _local_29;
                                                                _local_36 = li32(_local_27);
                                                                si32(_local_36, _local_35.hashScratchAddr);
                                                                _local_36 = li32(_local_27 + 4);
                                                                si32(_local_36, (_local_35.hashScratchAddr + 4));
                                                                si32(0, (_local_35.hashScratchAddr + _local_26));
                                                                _local_36 = 775236557;
                                                                _local_37 = -862048943;
                                                                _local_38 = 461845907;
                                                                _local_39 = (li32(_local_35.hashScratchAddr) * _local_37);
                                                                _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                                _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                                _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                                _local_36 = ((_local_36 * 5) + -430675100);
                                                                _local_39 = (li32(_local_35.hashScratchAddr + 4) * _local_37);
                                                                _local_39 = ((_local_39 << 15) | (_local_39 >>> 17));
                                                                _local_36 = (_local_36 ^ (_local_39 * _local_38));
                                                                _local_36 = ((_local_36 << 13) | (_local_36 >>> 19));
                                                                _local_36 = ((_local_36 * 5) + -430675100);
                                                                _local_40 = (_local_36 ^ _local_26);
                                                                _local_40 = (_local_40 ^ (_local_40 >>> 16));
                                                                _local_40 = (_local_40 * -2048144789);
                                                                _local_40 = (_local_40 ^ (_local_40 >>> 13));
                                                                _local_40 = (_local_40 * -1028477387);
                                                                _local_31 = ((_local_40 ^ (_local_40 >>> 16)) & 0xFFFF);
                                                                _local_30 = (_local_35.addr + (_local_31 * 5));
                                                            };
                                                        };
                                                        si8(_local_26, _local_30);
                                                        si32(_local_27, (_local_30 + 1));
                                                    };
                                                };
                                                _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                                _local_23 = (_local_16 + _local_21);
                                                _local_26 = 775236557;
                                                _local_27 = -862048943;
                                                _local_28 = 461845907;
                                                _local_29 = (li32(_local_23) * _local_27);
                                                _local_29 = ((_local_29 << 15) | (_local_29 >>> 17));
                                                _local_26 = (_local_26 ^ (_local_29 * _local_28));
                                                _local_26 = ((_local_26 << 13) | (_local_26 >>> 19));
                                                _local_26 = ((_local_26 * 5) + -430675100);
                                                _local_30 = (_local_26 ^ 0x04);
                                                _local_30 = (_local_30 ^ (_local_30 >>> 16));
                                                _local_30 = (_local_30 * -2048144789);
                                                _local_30 = (_local_30 ^ (_local_30 >>> 13));
                                                _local_30 = (_local_30 * -1028477387);
                                                _local_25 = ((_local_30 ^ (_local_30 >>> 16)) & 0xFFFF);
                                                _local_24 = (_local_35.addr + (_local_25 * 5));
                                                _local_25 = 3;
                                                _local_26 = -1;
                                                _local_28 = li32(_local_24 + 1);
                                                if ((((_local_28 >= (0)) && (li32(_local_23) == li32(_local_28))) && ((_local_23 - _local_28) <= _local_35.windowSize)))
                                                {
                                                    _local_29 = (_local_23 + 4);
                                                    _local_27 = 4;
                                                    _local_28 = (_local_28 + 4);
                                                    while (((((_local_29 + 4) <= (_local_5)) && (li32(_local_28) == li32(_local_29))) && ((_local_27 + 4) <= _local_35.maxMatchLength)))
                                                    {
                                                        _local_27 = (_local_27 + 4);
                                                        _local_28 = (_local_28 + 4);
                                                        _local_29 = (_local_29 + 4);
                                                    };
                                                    while ((((_local_29 < (_local_5)) && (li8(_local_28) == li8(_local_29))) && (_local_27 < _local_35.maxMatchLength)))
                                                    {
                                                        _local_27++;
                                                        _local_28++;
                                                        _local_29++;
                                                    };
                                                    _local_25 = _local_27;
                                                    _local_26 = _local_28;
                                                };
                                                _local_30 = 5;
                                                _local_31 = 9;
                                                while (_local_30 < _local_31)
                                                {
                                                    _local_36 = _local_30++;
                                                    _local_39 = li32(_local_23);
                                                    si32(_local_39, _local_35.hashScratchAddr);
                                                    _local_39 = li32(_local_23 + 4);
                                                    si32(_local_39, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_36));
                                                    _local_39 = 775236557;
                                                    _local_40 = -862048943;
                                                    _local_41 = 461845907;
                                                    _local_42 = (li32(_local_35.hashScratchAddr) * _local_40);
                                                    _local_42 = ((_local_42 << 15) | (_local_42 >>> 17));
                                                    _local_39 = (_local_39 ^ (_local_42 * _local_41));
                                                    _local_39 = ((_local_39 << 13) | (_local_39 >>> 19));
                                                    _local_39 = ((_local_39 * 5) + -430675100);
                                                    _local_42 = (li32(_local_35.hashScratchAddr + 4) * _local_40);
                                                    _local_42 = ((_local_42 << 15) | (_local_42 >>> 17));
                                                    _local_39 = (_local_39 ^ (_local_42 * _local_41));
                                                    _local_39 = ((_local_39 << 13) | (_local_39 >>> 19));
                                                    _local_39 = ((_local_39 * 5) + -430675100);
                                                    _local_43 = (_local_39 ^ _local_36);
                                                    _local_43 = (_local_43 ^ (_local_43 >>> 16));
                                                    _local_43 = (_local_43 * -2048144789);
                                                    _local_43 = (_local_43 ^ (_local_43 >>> 13));
                                                    _local_43 = (_local_43 * -1028477387);
                                                    _local_38 = ((_local_43 ^ (_local_43 >>> 16)) & 0xFFFF);
                                                    _local_37 = ((_local_35.addr + (_local_38 * 5)) + 1);
                                                    _local_28 = li32(_local_37);
                                                    if ((((_local_28 >= (0)) && (li32(_local_23) == li32(_local_28))) && ((_local_23 - _local_28) <= _local_35.windowSize)))
                                                    {
                                                        _local_29 = (_local_23 + 4);
                                                        _local_27 = 4;
                                                        _local_28 = (_local_28 + 4);
                                                        while (((((_local_29 + 4) <= (_local_5)) && (li32(_local_28) == li32(_local_29))) && ((_local_27 + 4) <= _local_35.maxMatchLength)))
                                                        {
                                                            _local_27 = (_local_27 + 4);
                                                            _local_28 = (_local_28 + 4);
                                                            _local_29 = (_local_29 + 4);
                                                        };
                                                        while ((((_local_29 < (_local_5)) && (li8(_local_28) == li8(_local_29))) && (_local_27 < _local_35.maxMatchLength)))
                                                        {
                                                            _local_27++;
                                                            _local_28++;
                                                            _local_29++;
                                                        };
                                                        if (_local_27 > _local_25)
                                                        {
                                                            _local_25 = _local_27;
                                                            _local_26 = _local_28;
                                                        };
                                                    };
                                                };
                                                si32((((_local_23 - (_local_26 - _local_25)) << 16) | _local_25), _local_35.resultAddr);
                                                _local_25 = _local_24;
                                                _local_26 = 4;
                                                _local_27 = _local_23;
                                                _local_28 = li8(_local_25);
                                                if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                {
                                                    _local_29 = li32(_local_25 + 1);
                                                    si8(_local_26, _local_25);
                                                    si32(_local_27, (_local_25 + 1));
                                                    _local_26 = (_local_28 + 1);
                                                    _local_27 = _local_29;
                                                    _local_31 = li32(_local_27);
                                                    si32(_local_31, _local_35.hashScratchAddr);
                                                    _local_31 = li32(_local_27 + 4);
                                                    si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                    si32(0, (_local_35.hashScratchAddr + _local_26));
                                                    _local_31 = 775236557;
                                                    _local_36 = -862048943;
                                                    _local_37 = 461845907;
                                                    _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                    _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                    _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                    _local_31 = ((_local_31 * 5) + -430675100);
                                                    _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                    _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                    _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                    _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                    _local_31 = ((_local_31 * 5) + -430675100);
                                                    _local_39 = (_local_31 ^ _local_26);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                    _local_39 = (_local_39 * -2048144789);
                                                    _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                    _local_39 = (_local_39 * -1028477387);
                                                    _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                    _local_25 = (_local_35.addr + (_local_30 * 5));
                                                    _local_28 = li8(_local_25);
                                                    if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                    {
                                                        _local_29 = li32(_local_25 + 1);
                                                        si8(_local_26, _local_25);
                                                        si32(_local_27, (_local_25 + 1));
                                                        _local_26 = (_local_28 + 1);
                                                        _local_27 = _local_29;
                                                        _local_31 = li32(_local_27);
                                                        si32(_local_31, _local_35.hashScratchAddr);
                                                        _local_31 = li32(_local_27 + 4);
                                                        si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                        si32(0, (_local_35.hashScratchAddr + _local_26));
                                                        _local_31 = 775236557;
                                                        _local_36 = -862048943;
                                                        _local_37 = 461845907;
                                                        _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                        _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                        _local_31 = ((_local_31 * 5) + -430675100);
                                                        _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                        _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                        _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                        _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                        _local_31 = ((_local_31 * 5) + -430675100);
                                                        _local_39 = (_local_31 ^ _local_26);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                        _local_39 = (_local_39 * -2048144789);
                                                        _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                        _local_39 = (_local_39 * -1028477387);
                                                        _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                        _local_25 = (_local_35.addr + (_local_30 * 5));
                                                        _local_28 = li8(_local_25);
                                                        if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                        {
                                                            _local_29 = li32(_local_25 + 1);
                                                            si8(_local_26, _local_25);
                                                            si32(_local_27, (_local_25 + 1));
                                                            _local_26 = (_local_28 + 1);
                                                            _local_27 = _local_29;
                                                            _local_31 = li32(_local_27);
                                                            si32(_local_31, _local_35.hashScratchAddr);
                                                            _local_31 = li32(_local_27 + 4);
                                                            si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                            si32(0, (_local_35.hashScratchAddr + _local_26));
                                                            _local_31 = 775236557;
                                                            _local_36 = -862048943;
                                                            _local_37 = 461845907;
                                                            _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                            _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                            _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                            _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                            _local_31 = ((_local_31 * 5) + -430675100);
                                                            _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                            _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                            _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                            _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                            _local_31 = ((_local_31 * 5) + -430675100);
                                                            _local_39 = (_local_31 ^ _local_26);
                                                            _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                            _local_39 = (_local_39 * -2048144789);
                                                            _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                            _local_39 = (_local_39 * -1028477387);
                                                            _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                            _local_25 = (_local_35.addr + (_local_30 * 5));
                                                            _local_28 = li8(_local_25);
                                                            if (((_local_28 < (8)) && (_local_28 >= 0)))
                                                            {
                                                                _local_29 = li32(_local_25 + 1);
                                                                si8(_local_26, _local_25);
                                                                si32(_local_27, (_local_25 + 1));
                                                                _local_26 = (_local_28 + 1);
                                                                _local_27 = _local_29;
                                                                _local_31 = li32(_local_27);
                                                                si32(_local_31, _local_35.hashScratchAddr);
                                                                _local_31 = li32(_local_27 + 4);
                                                                si32(_local_31, (_local_35.hashScratchAddr + 4));
                                                                si32(0, (_local_35.hashScratchAddr + _local_26));
                                                                _local_31 = 775236557;
                                                                _local_36 = -862048943;
                                                                _local_37 = 461845907;
                                                                _local_38 = (li32(_local_35.hashScratchAddr) * _local_36);
                                                                _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                                _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                                _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                                _local_31 = ((_local_31 * 5) + -430675100);
                                                                _local_38 = (li32(_local_35.hashScratchAddr + 4) * _local_36);
                                                                _local_38 = ((_local_38 << 15) | (_local_38 >>> 17));
                                                                _local_31 = (_local_31 ^ (_local_38 * _local_37));
                                                                _local_31 = ((_local_31 << 13) | (_local_31 >>> 19));
                                                                _local_31 = ((_local_31 * 5) + -430675100);
                                                                _local_39 = (_local_31 ^ _local_26);
                                                                _local_39 = (_local_39 ^ (_local_39 >>> 16));
                                                                _local_39 = (_local_39 * -2048144789);
                                                                _local_39 = (_local_39 ^ (_local_39 >>> 13));
                                                                _local_39 = (_local_39 * -1028477387);
                                                                _local_30 = ((_local_39 ^ (_local_39 >>> 16)) & 0xFFFF);
                                                                _local_25 = (_local_35.addr + (_local_30 * 5));
                                                            };
                                                        };
                                                    };
                                                };
                                                si8(_local_26, _local_25);
                                                si32(_local_27, (_local_25 + 1));
                                                _local_35.resultAddr = (_local_35.baseResultAddr + (((_local_35.resultAddr - _local_35.baseResultAddr) + 4) & 0x07));
                                            };
                                        };
                                    };
                                    if (li16(_local_35.resultAddr) >= 4)
                                    {
                                        _local_14 = li16(_local_35.resultAddr);
                                        _local_21 = li16(((scratchAddr + 2492) + (_local_14 << 2)) + 2);
                                        _local_22 = 0;
                                        _local_23 = ((scratchAddr + _local_22) + (_local_21 << 2));
                                        _local_24 = (li32(_local_23) + 1);
                                        si32(_local_24, _local_23);
                                        _local_21 = li16(_local_35.resultAddr + 2);
                                        _local_15 = li32((scratchAddr + 3528) + (((_local_21 <= 0x0100) ? _local_21 : (0x0100 + ((_local_21 - 1) >>> 7))) << 2));
                                        _local_21 = ((scratchAddr + 1144) + ((_local_15 >>> 24) << 2));
                                        _local_22 = (li32(_local_21) + 1);
                                        si32(_local_22, _local_21);
                                        _local_21 = (li32(_local_35.resultAddr) | 0x0200);
                                        si32(_local_21, _local_20);
                                        _local_20 = (_local_20 + 4);
                                        _local_16 = (_local_16 + _local_14);
                                    }
                                    else
                                    {
                                        _local_13 = li8(_local_16);
                                        si16(_local_13, _local_20);
                                        _local_21 = 0;
                                        _local_22 = ((scratchAddr + _local_21) + (_local_13 << 2));
                                        _local_23 = (li32(_local_22) + 1);
                                        si32(_local_23, _local_22);
                                        _local_20 = (_local_20 + 2);
                                        _local_16++;
                                    };
                                };
                                while (_local_16 < _local_5)
                                {
                                    _local_13 = li8(_local_16);
                                    si16(_local_13, _local_20);
                                    _local_21 = 0;
                                    _local_22 = ((scratchAddr + _local_21) + (_local_13 << 2));
                                    _local_23 = (li32(_local_22) + 1);
                                    si32(_local_23, _local_22);
                                    _local_20 = (_local_20 + 2);
                                    _local_16++;
                                };
                                _local_12 = false;
                                blockInProgress = true;
                                if (level == CompressionLevel.UNCOMPRESSED)
                                {
                                    if (bitOffset == 0)
                                    {
                                        si8(0, currentAddr);
                                    };
                                    _local_21 = li8(currentAddr);
                                    _local_21 = (_local_21 | (((_local_12) ? 1 : 0) << bitOffset));
                                    si32(_local_21, currentAddr);
                                    bitOffset = (bitOffset + 3);
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                    if (bitOffset > 0)
                                    {
                                        _local_21 = li8(currentAddr);
                                        _local_21 = (_local_21 | (0 << bitOffset));
                                        si32(_local_21, currentAddr);
                                        bitOffset = (bitOffset + (8 - bitOffset));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                }
                                else
                                {
                                    _local_21 = li8(currentAddr);
                                    _local_21 = (_local_21 | ((0x04 | ((_local_12) ? 1 : 0)) << bitOffset));
                                    si32(_local_21, currentAddr);
                                    bitOffset = (bitOffset + 3);
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                blockStartAddr = currentAddr;
                                createAndWriteHuffmanTrees(_local_4, _local_5);
                                _local_16 = _local_18;
                                while ((_local_16 + 64) <= _local_20)
                                {
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                };
                                while (_local_16 < _local_20)
                                {
                                    _local_25 = li16(_local_16);
                                    if ((_local_25 & 0x0200) != 0)
                                    {
                                        _local_21 = (_local_25 ^ 0x0200);
                                        _local_23 = li32((scratchAddr + 2492) + (_local_21 << 2));
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + ((_local_23 >>> 16) * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_21 - (_local_23 & 0x1FFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_23 & 0xFF00) >>> 13));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_22 = li16(_local_16 + 2);
                                        _local_24 = li32((scratchAddr + 3528) + (((_local_22 <= 0x0100) ? _local_22 : (0x0100 + ((_local_22 - 1) >>> 7))) << 2));
                                        _local_26 = li32((scratchAddr + 1144) + ((_local_24 >>> 24) * 4));
                                        _local_27 = li8(currentAddr);
                                        _local_27 = (_local_27 | ((_local_26 >>> 16) << bitOffset));
                                        si32(_local_27, currentAddr);
                                        bitOffset = (bitOffset + (_local_26 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                        _local_26 = li8(currentAddr);
                                        _local_26 = (_local_26 | ((_local_22 - (_local_24 & 0xFFFF)) << bitOffset));
                                        si32(_local_26, currentAddr);
                                        bitOffset = (bitOffset + ((_local_24 & 0xFF0000) >>> 16));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    }
                                    else
                                    {
                                        _local_26 = 0;
                                        _local_27 = li32((scratchAddr + _local_26) + (_local_25 * 4));
                                        _local_28 = li8(currentAddr);
                                        _local_28 = (_local_28 | ((_local_27 >>> 16) << bitOffset));
                                        si32(_local_28, currentAddr);
                                        bitOffset = (bitOffset + (_local_27 & 0xFFFF));
                                        currentAddr = (currentAddr + (bitOffset >>> 3));
                                        bitOffset = (bitOffset & 0x07);
                                    };
                                    _local_13 = _local_25;
                                    _local_16 = (_local_16 + (2 + ((_local_13 & 0x0200) >>> 8)));
                                };
                                if (level != CompressionLevel.UNCOMPRESSED)
                                {
                                    _local_21 = 0;
                                    _local_22 = li32((scratchAddr + _local_21) + 0x0400);
                                    _local_23 = li8(currentAddr);
                                    _local_23 = (_local_23 | ((_local_22 >>> 16) << bitOffset));
                                    si32(_local_23, currentAddr);
                                    bitOffset = (bitOffset + (_local_22 & 0xFFFF));
                                    currentAddr = (currentAddr + (bitOffset >>> 3));
                                    bitOffset = (bitOffset & 0x07);
                                };
                                blockInProgress = false;
                                _local_4 = _local_5;
                            };
                        }
                        else
                        {
                            throw (new Error("Compression level not supported"));
                        };
                    };
                };
            };
        }

        public function _createAndWriteHuffmanTrees(_arg_1:int, _arg_2:int):void
        {
            var _local_4:int;
            var _local_5:int;
            var _local_6:int;
            var _local_7:int;
            var _local_8:int;
            var _local_9:int;
            var _local_10:int;
            var _local_3:int;
            if (level == CompressionLevel.FAST)
            {
                _local_3 = 0x0101;
                _local_4 = 0;
                while (_local_4 < 0x0100)
                {
                    _local_5 = _local_4++;
                    si32(10, (scratchAddr + (_local_5 * 4)));
                };
                si32(1, (scratchAddr + 0x0400));
                _local_4 = (_arg_2 - _arg_1);
                if (_local_4 <= 0x4000)
                {
                    _local_5 = 1;
                }
                else
                {
                    if (_local_4 <= 102400)
                    {
                        _local_5 = 5;
                    }
                    else
                    {
                        _local_5 = 11;
                    };
                };
                _local_7 = int((_local_4 / _local_5));
                _local_8 = (_local_7 & 0xFFFFFFF0);
                _local_9 = 0;
                while (_local_9 < _local_8)
                {
                    _local_6 = li8(_arg_1 + (_local_9 * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 1) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 2) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 3) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 4) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 5) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 6) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 7) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 8) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 9) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 10) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 11) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 12) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 13) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 14) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_6 = li8(_arg_1 + ((_local_9 + 15) * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_9 = (_local_9 + 16);
                };
                while (_local_9 < _local_7)
                {
                    _local_6 = li8(_arg_1 + (_local_9 * _local_5));
                    _local_10 = (li32(scratchAddr + (_local_6 * 4)) + 1);
                    si32(_local_10, (scratchAddr + (_local_6 * 4)));
                    _local_9++;
                };
            }
            else
            {
                if (((level == (CompressionLevel.NORMAL)) || (level == CompressionLevel.GOOD)))
                {
                    _local_3 = 0x0101;
                    _local_4 = 0x0101;
                    while (_local_4 < 286)
                    {
                        _local_5 = _local_4++;
                        if (li32(scratchAddr + (_local_5 * 4)) > 0)
                        {
                            _local_3 = (_local_5 + 1);
                        };
                    };
                    si32(1, (scratchAddr + 0x0400));
                    _local_4 = 0;
                    while (_local_4 < _local_3)
                    {
                        _local_5 = _local_4++;
                        if (((_local_5 != (0x0100)) && (li32(scratchAddr + (_local_5 * 4)) > 0)))
                        {
                            _local_6 = (li32(scratchAddr + (_local_5 * 4)) + 2);
                            si32(_local_6, (scratchAddr + (_local_5 * 4)));
                        };
                    };
                };
            };
            HuffmanTree.weightedAlphabetToCodes(scratchAddr, (scratchAddr + (_local_3 * 4)), 15);
            literalLengthCodes = _local_3;
            _local_3 = (scratchAddr + 1144);
            _local_4 = 0;
            if (((level == (CompressionLevel.NORMAL)) || (level == CompressionLevel.GOOD)))
            {
                _local_5 = 0;
                while (_local_5 < 30)
                {
                    _local_6 = _local_5++;
                    if (li32(_local_3 + (_local_6 * 4)) > 0)
                    {
                        _local_4 = (_local_6 + 1);
                    };
                };
            };
            HuffmanTree.weightedAlphabetToCodes(_local_3, (_local_3 + (_local_4 * 4)), 15);
            distanceCodes = _local_4;
            _local_4 = 0;
            while (_local_4 < 19)
            {
                _local_5 = _local_4++;
                si32(1, ((scratchAddr + 1272) + (_local_5 * 4)));
            };
            _local_5 = 0;
            while (_local_5 < literalLengthCodes)
            {
                _local_6 = _local_5++;
                _local_4 = ((scratchAddr + 1272) + (li16(scratchAddr + (_local_6 * 4)) * 4));
                _local_7 = (li32(_local_4) + 1);
                si32(_local_7, _local_4);
            };
            _local_5 = 0;
            while (_local_5 < distanceCodes)
            {
                _local_6 = _local_5++;
                _local_4 = ((scratchAddr + 1272) + (li16((scratchAddr + 1144) + (_local_6 * 4)) * 4));
                _local_7 = (li32(_local_4) + 1);
                si32(_local_7, _local_4);
            };
            _local_5 = (scratchAddr + 1272);
            HuffmanTree.weightedAlphabetToCodes(_local_5, (_local_5 + 76), 7);
            _local_3 = 19;
            _local_4 = li8(currentAddr);
            _local_4 = (_local_4 | ((literalLengthCodes - 0x0101) << bitOffset));
            si32(_local_4, currentAddr);
            bitOffset = (bitOffset + 5);
            currentAddr = (currentAddr + (bitOffset >>> 3));
            bitOffset = (bitOffset & 0x07);
            if (distanceCodes == 0)
            {
                _local_4 = li8(currentAddr);
                _local_4 = (_local_4 | (0 << bitOffset));
                si32(_local_4, currentAddr);
                bitOffset = (bitOffset + 5);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            }
            else
            {
                _local_4 = li8(currentAddr);
                _local_4 = (_local_4 | ((distanceCodes - 1) << bitOffset));
                si32(_local_4, currentAddr);
                bitOffset = (bitOffset + 5);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            _local_4 = li8(currentAddr);
            _local_4 = (_local_4 | ((_local_3 - 4) << bitOffset));
            si32(_local_4, currentAddr);
            bitOffset = (bitOffset + 4);
            currentAddr = (currentAddr + (bitOffset >>> 3));
            bitOffset = (bitOffset & 0x07);
            _local_4 = 0;
            var _local_11:Array = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
            while (_local_4 < _local_11.length)
            {
                _local_5 = _local_11[_local_4];
                _local_4++;
                _local_6 = li16((scratchAddr + 1272) + (_local_5 * 4));
                _local_7 = li8(currentAddr);
                _local_7 = (_local_7 | (_local_6 << bitOffset));
                si32(_local_7, currentAddr);
                bitOffset = (bitOffset + 3);
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            _local_4 = 0;
            _local_5 = literalLengthCodes;
            while (_local_4 < _local_5)
            {
                _local_6 = _local_4++;
                _local_7 = li16(scratchAddr + (_local_6 * 4));
                _local_8 = li32((scratchAddr + 1272) + (_local_7 * 4));
                _local_9 = li8(currentAddr);
                _local_9 = (_local_9 | ((_local_8 >>> 16) << bitOffset));
                si32(_local_9, currentAddr);
                bitOffset = (bitOffset + (_local_8 & 0xFFFF));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            };
            if (distanceCodes == 0)
            {
                _local_4 = li32(scratchAddr + 1272);
                _local_5 = li8(currentAddr);
                _local_5 = (_local_5 | ((_local_4 >>> 16) << bitOffset));
                si32(_local_5, currentAddr);
                bitOffset = (bitOffset + (_local_4 & 0xFFFF));
                currentAddr = (currentAddr + (bitOffset >>> 3));
                bitOffset = (bitOffset & 0x07);
            }
            else
            {
                _local_4 = 0;
                _local_5 = distanceCodes;
                while (_local_4 < _local_5)
                {
                    _local_6 = _local_4++;
                    _local_7 = li16((scratchAddr + 1144) + (_local_6 * 4));
                    _local_8 = li32((scratchAddr + 1272) + (_local_7 * 4));
                    _local_9 = li8(currentAddr);
                    _local_9 = (_local_9 | ((_local_8 >>> 16) << bitOffset));
                    si32(_local_9, currentAddr);
                    bitOffset = (bitOffset + (_local_8 & 0xFFFF));
                    currentAddr = (currentAddr + (bitOffset >>> 3));
                    bitOffset = (bitOffset & 0x07);
                };
            };
        }


    }
}

